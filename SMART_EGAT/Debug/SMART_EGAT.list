
SMART_EGAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008004  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08008138  08008138  00018138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008700  08008700  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008700  08008700  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008700  08008700  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001f4  080088fc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080088fc  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000587f  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149a  00000000  00000000  00025a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00026f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  00027850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003750  00000000  00000000  000280d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064b0  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00010fbc  00000000  00000000  00031cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00042c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a8  00000000  00000000  00042ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f4 	.word	0x200001f4
 800014c:	00000000 	.word	0x00000000
 8000150:	0800811c 	.word	0x0800811c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f8 	.word	0x200001f8
 800016c:	0800811c 	.word	0x0800811c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_f2uiz>:
 8000fb8:	0042      	lsls	r2, r0, #1
 8000fba:	d20e      	bcs.n	8000fda <__aeabi_f2uiz+0x22>
 8000fbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc0:	d30b      	bcc.n	8000fda <__aeabi_f2uiz+0x22>
 8000fc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fca:	d409      	bmi.n	8000fe0 <__aeabi_f2uiz+0x28>
 8000fcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr
 8000fe0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe4:	d101      	bne.n	8000fea <__aeabi_f2uiz+0x32>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	d102      	bne.n	8000ff0 <__aeabi_f2uiz+0x38>
 8000fea:	f04f 30ff 	mov.w	r0, #4294967295
 8000fee:	4770      	bx	lr
 8000ff0:	f04f 0000 	mov.w	r0, #0
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_d2lz>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	2200      	movs	r2, #0
 8001000:	2300      	movs	r3, #0
 8001002:	4628      	mov	r0, r5
 8001004:	4621      	mov	r1, r4
 8001006:	f7ff fcf3 	bl	80009f0 <__aeabi_dcmplt>
 800100a:	b928      	cbnz	r0, 8001018 <__aeabi_d2lz+0x20>
 800100c:	4628      	mov	r0, r5
 800100e:	4621      	mov	r1, r4
 8001010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001014:	f000 b80a 	b.w	800102c <__aeabi_d2ulz>
 8001018:	4628      	mov	r0, r5
 800101a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800101e:	f000 f805 	bl	800102c <__aeabi_d2ulz>
 8001022:	4240      	negs	r0, r0
 8001024:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001028:	bd38      	pop	{r3, r4, r5, pc}
 800102a:	bf00      	nop

0800102c <__aeabi_d2ulz>:
 800102c:	b5d0      	push	{r4, r6, r7, lr}
 800102e:	2200      	movs	r2, #0
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <__aeabi_d2ulz+0x34>)
 8001032:	4606      	mov	r6, r0
 8001034:	460f      	mov	r7, r1
 8001036:	f7ff fa69 	bl	800050c <__aeabi_dmul>
 800103a:	f7ff fd3f 	bl	8000abc <__aeabi_d2uiz>
 800103e:	4604      	mov	r4, r0
 8001040:	f7ff f9ea 	bl	8000418 <__aeabi_ui2d>
 8001044:	2200      	movs	r2, #0
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <__aeabi_d2ulz+0x38>)
 8001048:	f7ff fa60 	bl	800050c <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4630      	mov	r0, r6
 8001052:	4639      	mov	r1, r7
 8001054:	f7ff f8a2 	bl	800019c <__aeabi_dsub>
 8001058:	f7ff fd30 	bl	8000abc <__aeabi_d2uiz>
 800105c:	4621      	mov	r1, r4
 800105e:	bdd0      	pop	{r4, r6, r7, pc}
 8001060:	3df00000 	.word	0x3df00000
 8001064:	41f00000 	.word	0x41f00000

08001068 <RCC_voidInitSysClock>:
#include "../00-RCC/RCC_private.h"
#include "../00-RCC/RCC_register.h"


void RCC_voidInitSysClock(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	/*Turn ON HSI with no trimming*/
	RCC->CR = 0x00000081;

#elif SYSTEM_CLK == SYS_CLK_HSE_CRYSTAL
	/*Selecting HSE as system clock without choosing prescaler*/
	RCC->CFGR = 1;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <RCC_voidInitSysClock+0x24>)
 800106e:	2201      	movs	r2, #1
 8001070:	605a      	str	r2, [r3, #4]

	/*Selecting HSE with no bypass and trimming*/
	RCC->CR = 0x00010080;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <RCC_voidInitSysClock+0x24>)
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <RCC_voidInitSysClock+0x28>)
 8001076:	601a      	str	r2, [r3, #0]

	/*Selecting Clock security system*/
#if RCC_CSS_ENABLE == ENABLE
	SET_BIT(RCC->CR,RCC_CR_CSSON);
#elif RCC_CSS_ENABLE == DISABLE
	CLR_BIT(RCC->CR,RCC_CR_CSSON);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <RCC_voidInitSysClock+0x24>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <RCC_voidInitSysClock+0x24>)
 800107e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001082:	6013      	str	r3, [r2, #0]
#endif

}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	00010080 	.word	0x00010080

08001094 <RCC_voidEnableClock>:


u8 RCC_voidEnableClock(u8 Copy_u8PeripheralID,u8 Copy_u8BusId)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState = OK;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralID <= 31)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b1f      	cmp	r3, #31
 80010ac:	d82a      	bhi.n	8001104 <RCC_voidEnableClock+0x70>
	{
		switch (Copy_u8BusId)
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d01a      	beq.n	80010ea <RCC_voidEnableClock+0x56>
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	dc22      	bgt.n	80010fe <RCC_voidEnableClock+0x6a>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <RCC_voidEnableClock+0x2e>
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d00a      	beq.n	80010d6 <RCC_voidEnableClock+0x42>
 80010c0:	e01d      	b.n	80010fe <RCC_voidEnableClock+0x6a>
		{
		case RCC_AHB:  SET_BIT(RCC->AHBENR,	Copy_u8PeripheralID); break;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <RCC_voidEnableClock+0x80>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	4911      	ldr	r1, [pc, #68]	; (8001114 <RCC_voidEnableClock+0x80>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	614b      	str	r3, [r1, #20]
 80010d4:	e018      	b.n	8001108 <RCC_voidEnableClock+0x74>
		case RCC_APB1: SET_BIT(RCC->APB1ENR,Copy_u8PeripheralID); break;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <RCC_voidEnableClock+0x80>)
 80010d8:	69da      	ldr	r2, [r3, #28]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	490c      	ldr	r1, [pc, #48]	; (8001114 <RCC_voidEnableClock+0x80>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61cb      	str	r3, [r1, #28]
 80010e8:	e00e      	b.n	8001108 <RCC_voidEnableClock+0x74>
		case RCC_APB2: SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID); break;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <RCC_voidEnableClock+0x80>)
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	4907      	ldr	r1, [pc, #28]	; (8001114 <RCC_voidEnableClock+0x80>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	618b      	str	r3, [r1, #24]
 80010fc:	e004      	b.n	8001108 <RCC_voidEnableClock+0x74>
		default: 	   Local_u8ErrorState = NOK; break;
 80010fe:	2302      	movs	r3, #2
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e001      	b.n	8001108 <RCC_voidEnableClock+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 8001104:	2302      	movs	r3, #2
 8001106:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000

08001118 <PORT_voidInit>:
 * Type        : Synchronous & Non Reentrant                                *
 *                                                                          *
 * description : Initiate all Pins of the Microcontroller                   *
 ****************************************************************************/
void PORT_voidInit( void )
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	/* --> set the mode for all ports */

	/* port A */
	GPIOA->CRL = PORTA_LOW_MODE;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <PORT_voidInit+0x40>)
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <PORT_voidInit+0x44>)
 8001120:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = PORTA_HIGH_MODE;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <PORT_voidInit+0x40>)
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <PORT_voidInit+0x48>)
 8001126:	605a      	str	r2, [r3, #4]

	/* port B */
	GPIOB->CRL = PORTB_LOW_MODE;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <PORT_voidInit+0x4c>)
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <PORT_voidInit+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = PORTB_HIGH_MODE;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <PORT_voidInit+0x4c>)
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <PORT_voidInit+0x54>)
 8001132:	605a      	str	r2, [r3, #4]

	/* port C */
	GPIOC->CRH = PORTC_HIGH_MODE;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <PORT_voidInit+0x58>)
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <PORT_voidInit+0x5c>)
 8001138:	605a      	str	r2, [r3, #4]

	/* --> set initial value for all ports */

	/* port A */
	GPIOA->ODR = PORTA_INITIAL_VALUE;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <PORT_voidInit+0x40>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]

	/* port B */
	GPIOB->ODR = PORTB_INITIAL_VALUE;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <PORT_voidInit+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]

	/* port C */
	GPIOC->ODR = PORTC_INITIAL_VALUE;
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <PORT_voidInit+0x58>)
 8001148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114c:	60da      	str	r2, [r3, #12]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800
 800115c:	84b4b000 	.word	0x84b4b000
 8001160:	833334b3 	.word	0x833334b3
 8001164:	40010c00 	.word	0x40010c00
 8001168:	34888333 	.word	0x34888333
 800116c:	b4bb4843 	.word	0xb4bb4843
 8001170:	40011000 	.word	0x40011000
 8001174:	44344444 	.word	0x44344444

08001178 <MDIO_u8WriteChannel>:
#include "../02-DIO/DIO_private.h"
#include "../02-DIO/DIO_interface.h"

/* WriteChannel is used to set pin to High or Low */
u8 MDIO_u8WriteChannel(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	460b      	mov	r3, r1
 8001184:	71bb      	strb	r3, [r7, #6]
 8001186:	4613      	mov	r3, r2
 8001188:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorStatus=OK;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8Pin >15)
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d902      	bls.n	800119a <MDIO_u8WriteChannel+0x22>
	{
		Local_u8ErrorStatus=NOK;
 8001194:	2302      	movs	r3, #2
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e046      	b.n	8001228 <MDIO_u8WriteChannel+0xb0>
	}
	else
	{
		switch(Copy_u8Port)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d02a      	beq.n	80011f6 <MDIO_u8WriteChannel+0x7e>
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	dc3a      	bgt.n	800121a <MDIO_u8WriteChannel+0xa2>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d002      	beq.n	80011ae <MDIO_u8WriteChannel+0x36>
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d012      	beq.n	80011d2 <MDIO_u8WriteChannel+0x5a>
			{
				//CLR_BIT(MDIOC_ODR,Copy_u8Pin);
				MDIOC->BRR=(1<<Copy_u8Pin);
			}
			break;
		default: break;
 80011ac:	e035      	b.n	800121a <MDIO_u8WriteChannel+0xa2>
			if(Copy_u8Value==MDIO_PIN_HIGH)
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <MDIO_u8WriteChannel+0x48>
				MDIOA->BSRR=(1<<Copy_u8Pin);
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2201      	movs	r2, #1
 80011b8:	409a      	lsls	r2, r3
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MDIO_u8WriteChannel+0xbc>)
 80011bc:	611a      	str	r2, [r3, #16]
			break;
 80011be:	e02e      	b.n	800121e <MDIO_u8WriteChannel+0xa6>
			else if(Copy_u8Value==MDIO_PIN_LOW)
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d12b      	bne.n	800121e <MDIO_u8WriteChannel+0xa6>
				MDIOA -> BRR=(1<<Copy_u8Pin);
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	2201      	movs	r2, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MDIO_u8WriteChannel+0xbc>)
 80011ce:	615a      	str	r2, [r3, #20]
			break;
 80011d0:	e025      	b.n	800121e <MDIO_u8WriteChannel+0xa6>
			if(Copy_u8Value==MDIO_PIN_HIGH)
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <MDIO_u8WriteChannel+0x6c>
				MDIOB -> BSRR=(1<<Copy_u8Pin);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	2201      	movs	r2, #1
 80011dc:	409a      	lsls	r2, r3
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MDIO_u8WriteChannel+0xc0>)
 80011e0:	611a      	str	r2, [r3, #16]
			break;
 80011e2:	e01e      	b.n	8001222 <MDIO_u8WriteChannel+0xaa>
			else if(Copy_u8Value==MDIO_PIN_LOW)
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d11b      	bne.n	8001222 <MDIO_u8WriteChannel+0xaa>
				MDIOB->BRR=(1<<Copy_u8Pin);
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	2201      	movs	r2, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MDIO_u8WriteChannel+0xc0>)
 80011f2:	615a      	str	r2, [r3, #20]
			break;
 80011f4:	e015      	b.n	8001222 <MDIO_u8WriteChannel+0xaa>
			if(Copy_u8Value==MDIO_PIN_HIGH)
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <MDIO_u8WriteChannel+0x90>
				MDIOC->BSRR=(1<<Copy_u8Pin);
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	2201      	movs	r2, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MDIO_u8WriteChannel+0xc4>)
 8001204:	611a      	str	r2, [r3, #16]
			break;
 8001206:	e00e      	b.n	8001226 <MDIO_u8WriteChannel+0xae>
			else if(Copy_u8Value==MDIO_PIN_LOW)
 8001208:	797b      	ldrb	r3, [r7, #5]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10b      	bne.n	8001226 <MDIO_u8WriteChannel+0xae>
				MDIOC->BRR=(1<<Copy_u8Pin);
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	2201      	movs	r2, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MDIO_u8WriteChannel+0xc4>)
 8001216:	615a      	str	r2, [r3, #20]
			break;
 8001218:	e005      	b.n	8001226 <MDIO_u8WriteChannel+0xae>
		default: break;
 800121a:	bf00      	nop
 800121c:	e004      	b.n	8001228 <MDIO_u8WriteChannel+0xb0>
			break;
 800121e:	bf00      	nop
 8001220:	e002      	b.n	8001228 <MDIO_u8WriteChannel+0xb0>
			break;
 8001222:	bf00      	nop
 8001224:	e000      	b.n	8001228 <MDIO_u8WriteChannel+0xb0>
			break;
 8001226:	bf00      	nop
		}
	}
	return Local_u8ErrorStatus;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	40011000 	.word	0x40011000

08001240 <MDIO_u8ReadChannel>:
/* ReadChannel is used to read the logic on the pin */
/*the Read value is changed by reference*/
u8 MDIO_u8ReadChannel(u8 Copy_u8Port, u8 Copy_u8Pin, u8 * Copy_pu8ReadValue)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	603a      	str	r2, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	460b      	mov	r3, r1
 800124e:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorStatus=OK;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8Pin >15)
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	d902      	bls.n	8001260 <MDIO_u8ReadChannel+0x20>
	{
		Local_u8ErrorStatus=NOK;
 800125a:	2302      	movs	r3, #2
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e030      	b.n	80012c2 <MDIO_u8ReadChannel+0x82>
	}
	else
	{
		switch(Copy_u8Port)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d01e      	beq.n	80012a4 <MDIO_u8ReadChannel+0x64>
 8001266:	2b03      	cmp	r3, #3
 8001268:	dc28      	bgt.n	80012bc <MDIO_u8ReadChannel+0x7c>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <MDIO_u8ReadChannel+0x34>
 800126e:	2b02      	cmp	r3, #2
 8001270:	d00c      	beq.n	800128c <MDIO_u8ReadChannel+0x4c>
 8001272:	e023      	b.n	80012bc <MDIO_u8ReadChannel+0x7c>
		{
		case MDIO_PORTA	: *Copy_pu8ReadValue=	GET_BIT(MDIOA->IDR,Copy_u8Pin);	break;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MDIO_u8ReadChannel+0x90>)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e01a      	b.n	80012c2 <MDIO_u8ReadChannel+0x82>
		case MDIO_PORTB	: *Copy_pu8ReadValue=	GET_BIT(MDIOB->IDR,Copy_u8Pin);	break;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MDIO_u8ReadChannel+0x94>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e00e      	b.n	80012c2 <MDIO_u8ReadChannel+0x82>
		case MDIO_PORTC	: *Copy_pu8ReadValue= 	GET_BIT(MDIOC->IDR,Copy_u8Pin);	break;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MDIO_u8ReadChannel+0x98>)
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e002      	b.n	80012c2 <MDIO_u8ReadChannel+0x82>
		default : Local_u8ErrorStatus=NOK ;				break;
 80012bc:	2302      	movs	r3, #2
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	bf00      	nop
		}
	}
	return Local_u8ErrorStatus;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40010c00 	.word	0x40010c00
 80012d8:	40011000 	.word	0x40011000

080012dc <MSTK_voidClkSrcInit>:
#include "../11-USART/USART_interface.h"

volatile void (*Global_voidPtrCallbackFunc) (void);
static u8 MSTK_u8ModeOfinterval;
void MSTK_voidClkSrcInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
#if STK_CLK_SRC == AHB_DIVIDE_BY_8
	CLR_BIT(MSTK->MSTK_CTRL,MSTK_CLK_SRC); /* clk source AHB/8 */
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <MSTK_voidClkSrcInit+0x18>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a03      	ldr	r2, [pc, #12]	; (80012f4 <MSTK_voidClkSrcInit+0x18>)
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	6013      	str	r3, [r2, #0]
#elif STK_CLK_SRC == AHB
	SET_BIT(MSTK->MSTK_CTRL,MSTK_CLK_SRC);
#endif
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <MSTK_voidClearCount>:
u8 MSTK_voidClearCount(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
	u8 Local_u8CountFlag;
	Local_u8CountFlag=GET_BIT(MSTK->MSTK_CTRL,MSTK_CNT_FLAG); /*clearing counter flag by reading it when it reaches overflow*/
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MSTK_voidClearCount+0x20>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
	return Local_u8CountFlag;
 800130c:	79fb      	ldrb	r3, [r7, #7]
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	e000e010 	.word	0xe000e010

0800131c <MSTK_voidSetBusyWait>:
void MSTK_voidSetBusyWait(u32 Copy_u32Ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	/*Clear Value register */
	MSTK ->MSTK_VAL =0x00;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MSTK_voidSetBusyWait+0x38>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
	/*Set Load register to number of ticks*/
	MSTK ->MSTK_LOAD =Copy_u32Ticks;
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <MSTK_voidSetBusyWait+0x38>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6053      	str	r3, [r2, #4]
	/*Enable STK peripheral*/
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MSTK_voidSetBusyWait+0x38>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <MSTK_voidSetBusyWait+0x38>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]
	/*Busy wait until the count down flag is raised */
	while(MSTK_voidClearCount()==0);
 800133c:	bf00      	nop
 800133e:	f7ff ffdb 	bl	80012f8 <MSTK_voidClearCount>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0fa      	beq.n	800133e <MSTK_voidSetBusyWait+0x22>
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <MSTK_u8SetIntervalPeriodic>:
	MSTK_u8ModeOfinterval=MSTK_SINGLE_INTERVAL;

}

void MSTK_u8SetIntervalPeriodic(u32 Copy_u32Ticks)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	/*Clear Value register */
	MSTK ->MSTK_VAL =0x00;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MSTK_u8SetIntervalPeriodic+0x3c>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
	/*Set Load register to number of ticks*/
	MSTK ->MSTK_LOAD =Copy_u32Ticks;
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <MSTK_u8SetIntervalPeriodic+0x3c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6053      	str	r3, [r2, #4]
	/*Enable the STK underflow interrupt*/
	SET_BIT(MSTK->MSTK_CTRL,MSTK_TICKINT_EN);
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MSTK_u8SetIntervalPeriodic+0x3c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <MSTK_u8SetIntervalPeriodic+0x3c>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	6013      	str	r3, [r2, #0]
	/*Enable STK peripheral*/
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MSTK_u8SetIntervalPeriodic+0x3c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <MSTK_u8SetIntervalPeriodic+0x3c>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]
	MSTK_u8ModeOfinterval=MSTK_PERIODIC_INTERVAL;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <MSTK_u8SetIntervalPeriodic+0x40>)
 8001386:	2202      	movs	r2, #2
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	e000e010 	.word	0xe000e010
 8001398:	20000214 	.word	0x20000214

0800139c <MSTK_voidStopInterval>:

void MSTK_voidStopInterval(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	/*Disable the STK peripheral*/
	CLR_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MSTK_voidStopInterval+0x24>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <MSTK_voidStopInterval+0x24>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
	/*Clearing load Register*/
	MSTK->MSTK_LOAD=0x00;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <MSTK_voidStopInterval+0x24>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
	/*Clearing value Register*/
	MSTK->MSTK_VAL=0x00;
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <MSTK_voidStopInterval+0x24>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <MSTK_u8SetCallBackFunc>:
{
	return MSTK -> MSTK_VAL ;
}

u8 MSTK_u8SetCallBackFunc(void (*Copy_ptrFunc)(void))
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	u8 Local_u8ErrorStatus=OK;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
	if(Copy_ptrFunc ==NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <MSTK_u8SetCallBackFunc+0x18>
	{
		Local_u8ErrorStatus=NULL_POINTER;
 80013d6:	2303      	movs	r3, #3
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e002      	b.n	80013e2 <MSTK_u8SetCallBackFunc+0x1e>
	}
	else
	{
		Global_voidPtrCallbackFunc=Copy_ptrFunc;
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <MSTK_u8SetCallBackFunc+0x2c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
	}
	return Local_u8ErrorStatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000210 	.word	0x20000210

080013f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	if(Global_voidPtrCallbackFunc!=NULL)
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <SysTick_Handler+0x30>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00e      	beq.n	800141e <SysTick_Handler+0x2a>
	{
		if(MSTK_u8ModeOfinterval==MSTK_SINGLE_INTERVAL)
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <SysTick_Handler+0x34>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <SysTick_Handler+0x24>
		{
			/*Clear load and value registers*/
			MSTK_voidStopInterval();
 8001408:	f7ff ffc8 	bl	800139c <MSTK_voidStopInterval>
			/*Disable the interrupt*/
			CLR_BIT(MSTK->MSTK_CTRL,MSTK_TICKINT_EN);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <SysTick_Handler+0x38>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <SysTick_Handler+0x38>)
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	6013      	str	r3, [r2, #0]
		}
		Global_voidPtrCallbackFunc();
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <SysTick_Handler+0x30>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4798      	blx	r3
	}
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000210 	.word	0x20000210
 8001428:	20000214 	.word	0x20000214
 800142c:	e000e010 	.word	0xe000e010

08001430 <EXTI0_IRQHandler>:

	return Local_u8ErrorState;
}

void EXTI0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE0] != NULL)
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <EXTI0_IRQHandler+0x24>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <EXTI0_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE0]();
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <EXTI0_IRQHandler+0x24>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE0);
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <EXTI0_IRQHandler+0x28>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <EXTI0_IRQHandler+0x28>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000218 	.word	0x20000218
 8001458:	40010400 	.word	0x40010400

0800145c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE1] != NULL)
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <EXTI1_IRQHandler+0x24>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <EXTI1_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE1]();
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <EXTI1_IRQHandler+0x24>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE1);
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <EXTI1_IRQHandler+0x28>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <EXTI1_IRQHandler+0x28>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6153      	str	r3, [r2, #20]
	else
	{
		/*Do Nothing*/
	}

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000218 	.word	0x20000218
 8001484:	40010400 	.word	0x40010400

08001488 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE2] != NULL)
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <EXTI2_IRQHandler+0x24>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <EXTI2_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE2]();
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <EXTI2_IRQHandler+0x24>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE2);
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <EXTI2_IRQHandler+0x28>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <EXTI2_IRQHandler+0x28>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000218 	.word	0x20000218
 80014b0:	40010400 	.word	0x40010400

080014b4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE3] != NULL)
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <EXTI3_IRQHandler+0x24>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <EXTI3_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE3]();
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <EXTI3_IRQHandler+0x24>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE3);
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <EXTI3_IRQHandler+0x28>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <EXTI3_IRQHandler+0x28>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000218 	.word	0x20000218
 80014dc:	40010400 	.word	0x40010400

080014e0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE4] != NULL)
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <EXTI4_IRQHandler+0x24>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <EXTI4_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE4]();
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <EXTI4_IRQHandler+0x24>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE4);
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <EXTI4_IRQHandler+0x28>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <EXTI4_IRQHandler+0x28>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000218 	.word	0x20000218
 8001508:	40010400 	.word	0x40010400

0800150c <MTIM2_voidInit>:
u8 Global_u8FlagTIM4=DISABLED;


/*Timer 2 Initialization */
void  MTIM2_voidInit(void)
{ 
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

	/* Set the Request Event Source*/
#if TIM2_UPDATE_REQUEST_SOURCE ==	ALL_SOURCES
	CLR_BIT(TIM2->CR1,TIM_CR1_URS);
 8001510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM2->CR1,TIM_CR1_URS);
#endif

	/* Set Center Align Mode */
#if TIM2_CENTER_ALIGNED_MODE ==	CENTER_ALIGN_MODE0
	CLR_BIT(TIM2->CR1,TIM_CR1_CMS1);
 8001520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152a:	f023 0320 	bic.w	r3, r3, #32
 800152e:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM2->CR1,TIM_CR1_CMS2);
 8001530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800153e:	6013      	str	r3, [r2, #0]
	/*WE CAN ONLY SET A DIRECTION OF COUNTING AT MODE 0 !!*/
	/* SET DIRECTION OF COUNTING */
#if	TIM2_COUNTER_DIRECTION==UP_COUNTER
	CLR_BIT(TIM2->CR1,TIM_CR1_DIR);
 8001540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154a:	f023 0310 	bic.w	r3, r3, #16
 800154e:	6013      	str	r3, [r2, #0]


#if TIM2_AUTO_RELOAD_PRELOAD == ARR_BUFFERED
	SET_BIT(TIM2->CR1,TIM_CR1_ARPE);
#else
	CLR_BIT(TIM2->CR1,TIM_CR1_ARPE);
 8001550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800155e:	6013      	str	r3, [r2, #0]
#endif

#if TIM2_CAPTURE_COMPARE_INTRUPT_STATUS ==ENABLED
	SET_BIT(TIM2->DIER,TIM_DIER_CC1IE);
#else
	CLR_BIT(TIM2->DIER,TIM_DIER_CC1IE);
 8001560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	60d3      	str	r3, [r2, #12]
#endif

	/*Set the required Prescaler value*/
	/*the eqn:F=fCK_PSC / (PSC[15:0] + 1)*/
#if (TIM2_PRESCALE_VALUE>0 && TIM2_PRESCALE_VALUE<=65536)
	TIM2->PSC=TIM2_PRESCALE_VALUE-1;
 8001570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001574:	f240 321f 	movw	r2, #799	; 0x31f
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
#else
#error ("wrong prescale  ")
#endif
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
	...

08001584 <MTIM3_voidInit>:



/*Timer 3 Initialization */
void  MTIM3_voidInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	/* Set the Request Event Source*/
#if TIM3_UPDATE_REQUEST_SOURCE ==	ALL_SOURCES
	CLR_BIT(TIM3->CR1,TIM_CR1_URS);
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MTIM3_voidInit+0x5c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <MTIM3_voidInit+0x5c>)
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM3->CR1,TIM_CR1_URS);
#endif

	/* Set Center Align Mode */
#if TIM3_CENTER_ALIGNED_MODE ==	CENTER_ALIGN_MODE0
	CLR_BIT(TIM3->CR1,TIM_CR1_CMS1);
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MTIM3_voidInit+0x5c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <MTIM3_voidInit+0x5c>)
 800159a:	f023 0320 	bic.w	r3, r3, #32
 800159e:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM3->CR1,TIM_CR1_CMS2);
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015aa:	6013      	str	r3, [r2, #0]
	/*WE CAN ONLY SET A DIRECTION OF COUNTING AT MODE 0 !!*/
	/* SET DIRECTION OF COUNTING */
#if	TIM3_COUNTER_DIRECTION==UP_COUNTER
	CLR_BIT(TIM3->CR1,TIM_CR1_DIR);
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015b2:	f023 0310 	bic.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]


#if TIM3_AUTO_RELOAD_PRELOAD == ARR_BUFFERED
	SET_BIT(TIM3->CR1,TIM_CR1_ARPE);
#else
	CLR_BIT(TIM3->CR1,TIM_CR1_ARPE);
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015c2:	6013      	str	r3, [r2, #0]


#if TIM3_CAPTURE_COMPARE_INTRUPT_STATUS ==ENABLED
	SET_BIT(TIM3->DIER,TIM_DIER_CC1IE);
#else
	CLR_BIT(TIM3->DIER,TIM_DIER_CC1IE);
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015ca:	f023 0302 	bic.w	r3, r3, #2
 80015ce:	60d3      	str	r3, [r2, #12]
#endif

	/*Set the required Prescaler value*/
	/*the eqn:F=fCK_PSC / (PSC[15:0] + 1)*/
#if (TIM3_PRESCALE_VALUE>0 && TIM3_PRESCALE_VALUE<=65536)
	TIM3->PSC=TIM3_PRESCALE_VALUE-1;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <MTIM3_voidInit+0x5c>)
 80015d2:	f240 321f 	movw	r2, #799	; 0x31f
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
#else
#error ("wrong prescale  ")
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40000400 	.word	0x40000400

080015e4 <MTIM2_voidSetBusyWait>:
#endif
}

/*Timer 2 Synchronous mode*/
u8 MTIM2_voidSetBusyWait(u16 Copy_u16Ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8ErrorStatus=OK;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
	if(Copy_u16Ticks<=65536)
	{
		/*Reload the auto reload register with the required ticks*/
		TIM2->ARR=Copy_u16Ticks;
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	62d3      	str	r3, [r2, #44]	; 0x2c
		/*Enable the counter*/
		MTIM2_voidStartCounter();
 80015fa:	f000 f817 	bl	800162c <MTIM2_voidStartCounter>
		/*Busy wait until the UIF flag is raised*/
		while (GET_BIT(TIM2->SR,TIM_SR_UIF)==0)
 80015fe:	e000      	b.n	8001602 <MTIM2_voidSetBusyWait+0x1e>
		{
			asm("NOP");
 8001600:	bf00      	nop
		while (GET_BIT(TIM2->SR,TIM_SR_UIF)==0)
 8001602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f7      	beq.n	8001600 <MTIM2_voidSetBusyWait+0x1c>
		}
		/*Clearing the UIF flag by software to be able to be raised again*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 8001610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6113      	str	r3, [r2, #16]
	}
	else
	{
		Local_u8ErrorStatus=NOK;
	}
	return Local_u8ErrorStatus;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}	
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MTIM2_voidStartCounter>:
}


/*Enable the counter to Timer 2 and down the flag to be able for another interrupt to enter the ISR*/
void MTIM2_voidStartCounter(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	Global_u8FlagTIM2=DISABLED;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MTIM2_voidStartCounter+0x24>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
	SET_BIT(TIM2->CR1,TIM_CR1_CEN);
 8001636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000264 	.word	0x20000264

08001654 <TIM2_IRQHandler>:
	return Local_u8ErrorStatus;
}

/*Timer 2 ISR Handler*/
void TIM2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if(Global_voidTIM2PtrCallbackFunc!=NULL)
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <TIM2_IRQHandler+0x30>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00e      	beq.n	800167e <TIM2_IRQHandler+0x2a>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM2==ENABLED)
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <TIM2_IRQHandler+0x34>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <TIM2_IRQHandler+0x1a>
		{
			Global_voidTIM2PtrCallbackFunc();
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <TIM2_IRQHandler+0x30>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 800166e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6113      	str	r3, [r2, #16]
	}
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000258 	.word	0x20000258
 8001688:	20000264 	.word	0x20000264

0800168c <TIM3_IRQHandler>:


/*Timer 3 ISR Handler*/
void TIM3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	if(Global_voidTIM3PtrCallbackFunc!=NULL)
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <TIM3_IRQHandler+0x2c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <TIM3_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM3==ENABLED)
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <TIM3_IRQHandler+0x30>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d102      	bne.n	80016a6 <TIM3_IRQHandler+0x1a>
		{
			Global_voidTIM3PtrCallbackFunc();
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <TIM3_IRQHandler+0x2c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM3->SR,TIM_SR_UIF);
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <TIM3_IRQHandler+0x34>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <TIM3_IRQHandler+0x34>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6113      	str	r3, [r2, #16]
	}
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000025c 	.word	0x2000025c
 80016bc:	20000265 	.word	0x20000265
 80016c0:	40000400 	.word	0x40000400

080016c4 <TIM4_IRQHandler>:

/*Timer 4 ISR Handler*/
void TIM4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	if(Global_voidTIM4PtrCallbackFunc!=NULL)
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <TIM4_IRQHandler+0x2c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00c      	beq.n	80016ea <TIM4_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM4==ENABLED)
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <TIM4_IRQHandler+0x30>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <TIM4_IRQHandler+0x1a>
		{
			Global_voidTIM4PtrCallbackFunc();
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <TIM4_IRQHandler+0x2c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM4->SR,TIM_SR_UIF);
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <TIM4_IRQHandler+0x34>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <TIM4_IRQHandler+0x34>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6113      	str	r3, [r2, #16]
	}

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000260 	.word	0x20000260
 80016f4:	20000266 	.word	0x20000266
 80016f8:	40000800 	.word	0x40000800

080016fc <USART_voidInit>:

/* Array of Addresses which has type of Struct to addresses USART_t*/
static volatile USART_t* const USART [3] = { USART_1 , USART_2 , USART_3 };

void USART_voidInit(USART_config_t *USART_ptr)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	u8 Local_u8USARTNum=USART_ptr->USART_Number;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	73fb      	strb	r3, [r7, #15]


	/*Calculating the value of BRR corresponding to the BaudRate*/
	u32 Local_u32Mantissa= CLOCK_FREQ / ( 16 * (USART_ptr -> USART_BaudRate ) );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4a95      	ldr	r2, [pc, #596]	; (8001968 <USART_voidInit+0x26c>)
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
	u32 Local_u32Fraction = ((( CLOCK_FREQ * 100 ) / ( 16 * (USART_ptr->USART_BaudRate) )) % 100 ) * 16 ;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	4a93      	ldr	r2, [pc, #588]	; (800196c <USART_voidInit+0x270>)
 8001720:	fbb2 f2f3 	udiv	r2, r2, r3
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <USART_voidInit+0x274>)
 8001726:	fba3 1302 	umull	r1, r3, r3, r2
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2164      	movs	r1, #100	; 0x64
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]

	if( Local_u32Fraction > 1500 )
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800173e:	4293      	cmp	r3, r2
 8001740:	d904      	bls.n	800174c <USART_voidInit+0x50>
	{
		Local_u32Mantissa += 1 ;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
		Local_u32Fraction = 0 ;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
	}
	USART [Local_u8USARTNum] -> BRR	= ( Local_u32Mantissa << 4 ) | ( Local_u32Fraction / 100 );
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	0119      	lsls	r1, r3, #4
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <USART_voidInit+0x274>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	095a      	lsrs	r2, r3, #5
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4885      	ldr	r0, [pc, #532]	; (8001974 <USART_voidInit+0x278>)
 800175e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]


	/*Enabling the TX and RX*/
	SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_TE);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	4a82      	ldr	r2, [pc, #520]	; (8001974 <USART_voidInit+0x278>)
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	4980      	ldr	r1, [pc, #512]	; (8001974 <USART_voidInit+0x278>)
 8001774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001778:	f042 0208 	orr.w	r2, r2, #8
 800177c:	60da      	str	r2, [r3, #12]
	SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_RE);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4a7c      	ldr	r2, [pc, #496]	; (8001974 <USART_voidInit+0x278>)
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	497a      	ldr	r1, [pc, #488]	; (8001974 <USART_voidInit+0x278>)
 800178c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001790:	f042 0204 	orr.w	r2, r2, #4
 8001794:	60da      	str	r2, [r3, #12]

	/*Parity Check Enable*/
	if(USART_ptr->USART_ParityCheck == USART_ParityCheckEnabled)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7adb      	ldrb	r3, [r3, #11]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <USART_voidInit+0xbc>
	{
		SET_BIT(USART [Local_u8USARTNum] -> CR1 , USART_PCE);
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	4a74      	ldr	r2, [pc, #464]	; (8001974 <USART_voidInit+0x278>)
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4972      	ldr	r1, [pc, #456]	; (8001974 <USART_voidInit+0x278>)
 80017ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	e00b      	b.n	80017d0 <USART_voidInit+0xd4>
	}
	else
	{
		CLR_BIT(USART [Local_u8USARTNum] -> CR1 , USART_PCE);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <USART_voidInit+0x278>)
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	496b      	ldr	r1, [pc, #428]	; (8001974 <USART_voidInit+0x278>)
 80017c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ce:	60da      	str	r2, [r3, #12]
	}
	/*Even or Odd Parity  */
	if(USART_ptr->USART_Parity == USART_EvenParity )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7a5b      	ldrb	r3, [r3, #9]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10c      	bne.n	80017f2 <USART_voidInit+0xf6>
	{
		CLR_BIT(USART [Local_u8USARTNum] -> CR1, USART_PS );
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	4a66      	ldr	r2, [pc, #408]	; (8001974 <USART_voidInit+0x278>)
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4963      	ldr	r1, [pc, #396]	; (8001974 <USART_voidInit+0x278>)
 80017e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	e00f      	b.n	8001812 <USART_voidInit+0x116>
	}
	else if( USART_ptr -> USART_Parity == USART_OddParity )
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7a5b      	ldrb	r3, [r3, #9]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10b      	bne.n	8001812 <USART_voidInit+0x116>
	{
		SET_BIT(USART [Local_u8USARTNum] -> CR1, USART_PS );
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	4a5d      	ldr	r2, [pc, #372]	; (8001974 <USART_voidInit+0x278>)
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	495b      	ldr	r1, [pc, #364]	; (8001974 <USART_voidInit+0x278>)
 8001808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800180c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001810:	60da      	str	r2, [r3, #12]
	}



	/*Data length*/
	if(USART_ptr -> USART_DataLength == USART_Data8Bits)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7a1b      	ldrb	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <USART_voidInit+0x138>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR1 , USART_M );
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	4a55      	ldr	r2, [pc, #340]	; (8001974 <USART_voidInit+0x278>)
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4953      	ldr	r1, [pc, #332]	; (8001974 <USART_voidInit+0x278>)
 8001828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800182c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	e00f      	b.n	8001854 <USART_voidInit+0x158>
	}
	else if(USART_ptr -> USART_DataLength == USART_Data9Bits)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7a1b      	ldrb	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10b      	bne.n	8001854 <USART_voidInit+0x158>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR1 , USART_M );
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <USART_voidInit+0x278>)
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	494a      	ldr	r1, [pc, #296]	; (8001974 <USART_voidInit+0x278>)
 800184a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800184e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001852:	60da      	str	r2, [r3, #12]
	}


	/*Number of Stop bits*/
	if(USART_ptr -> USART_StopBits == USART_1StopBits)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7a9b      	ldrb	r3, [r3, #10]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d118      	bne.n	800188e <USART_voidInit+0x192>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	4a45      	ldr	r2, [pc, #276]	; (8001974 <USART_voidInit+0x278>)
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4942      	ldr	r1, [pc, #264]	; (8001974 <USART_voidInit+0x278>)
 800186a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800186e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001872:	611a      	str	r2, [r3, #16]
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4a3f      	ldr	r2, [pc, #252]	; (8001974 <USART_voidInit+0x278>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	493c      	ldr	r1, [pc, #240]	; (8001974 <USART_voidInit+0x278>)
 8001882:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	e055      	b.n	800193a <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_2StopBits)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7a9b      	ldrb	r3, [r3, #10]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d118      	bne.n	80018c8 <USART_voidInit+0x1cc>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	4a36      	ldr	r2, [pc, #216]	; (8001974 <USART_voidInit+0x278>)
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <USART_voidInit+0x278>)
 80018a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ac:	611a      	str	r2, [r3, #16]
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	4a30      	ldr	r2, [pc, #192]	; (8001974 <USART_voidInit+0x278>)
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	492e      	ldr	r1, [pc, #184]	; (8001974 <USART_voidInit+0x278>)
 80018bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	e038      	b.n	800193a <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_halfStopBit)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d118      	bne.n	8001902 <USART_voidInit+0x206>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	4a28      	ldr	r2, [pc, #160]	; (8001974 <USART_voidInit+0x278>)
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4925      	ldr	r1, [pc, #148]	; (8001974 <USART_voidInit+0x278>)
 80018de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018e6:	611a      	str	r2, [r3, #16]
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	4a22      	ldr	r2, [pc, #136]	; (8001974 <USART_voidInit+0x278>)
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	491f      	ldr	r1, [pc, #124]	; (8001974 <USART_voidInit+0x278>)
 80018f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	e01b      	b.n	800193a <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_three_halfsStopBits)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7a9b      	ldrb	r3, [r3, #10]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d117      	bne.n	800193a <USART_voidInit+0x23e>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <USART_voidInit+0x278>)
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4917      	ldr	r1, [pc, #92]	; (8001974 <USART_voidInit+0x278>)
 8001918:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800191c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001920:	611a      	str	r2, [r3, #16]
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <USART_voidInit+0x278>)
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	4911      	ldr	r1, [pc, #68]	; (8001974 <USART_voidInit+0x278>)
 8001930:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001938:	611a      	str	r2, [r3, #16]
	}


		/*Enable the USART*/
		SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_UE );
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <USART_voidInit+0x278>)
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	490b      	ldr	r1, [pc, #44]	; (8001974 <USART_voidInit+0x278>)
 8001948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800194c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001950:	60da      	str	r2, [r3, #12]
		/*Clear the status register*/
		USART[Local_u8USARTNum] -> SR = 0x00;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <USART_voidInit+0x278>)
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	007a1200 	.word	0x007a1200
 800196c:	2faf0800 	.word	0x2faf0800
 8001970:	51eb851f 	.word	0x51eb851f
 8001974:	080082a0 	.word	0x080082a0

08001978 <USART_voidTransmitByteSynch>:


void USART_voidTransmitByteSynch(u8	Local_u8Byte , USART_Num_t Copy_USARTNumber)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
	/*Send the Byte to the Data Register*/
	USART[Copy_USARTNumber] -> DR = Local_u8Byte;
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <USART_voidTransmitByteSynch+0x54>)
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	605a      	str	r2, [r3, #4]

	/*Wait until the transmission complete*/
	while(GET_BIT(USART[Copy_USARTNumber]-> SR , USART_TC) == 0);
 8001994:	bf00      	nop
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <USART_voidTransmitByteSynch+0x54>)
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f5      	beq.n	8001996 <USART_voidTransmitByteSynch+0x1e>

	/*Clear the transmission Complete flag*/
	CLR_BIT(USART[Copy_USARTNumber] -> SR , USART_TC);
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <USART_voidTransmitByteSynch+0x54>)
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	4905      	ldr	r1, [pc, #20]	; (80019cc <USART_voidTransmitByteSynch+0x54>)
 80019b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c0:	601a      	str	r2, [r3, #0]

}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	080082a0 	.word	0x080082a0

080019d0 <USART_voidReceiveByteSynch>:
u8 USART_voidReceiveByteSynch(USART_Num_t Copy_USARTNumber)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]

	u8 Local_u8Byte;

	/*Wait until the Receive not empty flag is raised*/
	while(GET_BIT( USART[Copy_USARTNumber] -> SR , USART_RXNE) == 0);
 80019da:	bf00      	nop
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <USART_voidReceiveByteSynch+0x50>)
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f5      	beq.n	80019dc <USART_voidReceiveByteSynch+0xc>

	/*Get the received data*/
	Local_u8Byte = USART[Copy_USARTNumber] -> DR ;
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <USART_voidReceiveByteSynch+0x50>)
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]

	/*Clear the Receive not empty flag*/
	CLR_BIT( USART[Copy_USARTNumber] -> SR , USART_RXNE);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <USART_voidReceiveByteSynch+0x50>)
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4905      	ldr	r1, [pc, #20]	; (8001a20 <USART_voidReceiveByteSynch+0x50>)
 8001a0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0e:	f022 0220 	bic.w	r2, r2, #32
 8001a12:	601a      	str	r2, [r3, #0]

	return Local_u8Byte;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]

}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	080082a0 	.word	0x080082a0

08001a24 <USART_voidSendString>:
	Copy_ptr_u8_RXArr[Local_u16Iterator] = '\0';
}


void USART_voidSendString(char *str, USART_Num_t Copy_USARTNumber)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 8001a30:	e00b      	b.n	8001a4a <USART_voidSendString+0x26>
	        USART_voidTransmitByteSynch(*str++, Copy_USARTNumber);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff9a 	bl	8001978 <USART_voidTransmitByteSynch>
	        MTIM2_voidSetBusyWait(10);
 8001a44:	200a      	movs	r0, #10
 8001a46:	f7ff fdcd 	bl	80015e4 <MTIM2_voidSetBusyWait>
	while (*str) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ef      	bne.n	8001a32 <USART_voidSendString+0xe>
	    }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <ADC1_voidSingleChannelInit>:




void ADC1_voidSingleChannelInit(u8 Copy_u8Channel)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]

	// Step 1: Configure ADC clock
	RCC->CFGR |= (2 << 14);     // Set ADC prescaler to divide by 2 (4 MHz ADC clock)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <ADC1_voidSingleChannelInit+0xac>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <ADC1_voidSingleChannelInit+0xac>)
 8001a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a70:	6053      	str	r3, [r2, #4]
	RCC->APB2ENR |= (1 << 9);   // Enable ADC1 clock
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <ADC1_voidSingleChannelInit+0xac>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <ADC1_voidSingleChannelInit+0xac>)
 8001a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7c:	6193      	str	r3, [r2, #24]

	// Step 2: Configure GPIO for ADC
	RCC->APB2ENR |= (1 << 2);   // Enable GPIOA clock
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <ADC1_voidSingleChannelInit+0xac>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <ADC1_voidSingleChannelInit+0xac>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(0xF << (0 * 4)); // Configure PA0 as analog mode
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <ADC1_voidSingleChannelInit+0xb0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <ADC1_voidSingleChannelInit+0xb0>)
 8001a90:	f023 030f 	bic.w	r3, r3, #15
 8001a94:	6013      	str	r3, [r2, #0]
	ADC1->CR2 = 0;               // Reset CR2
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = Copy_u8Channel; // Select channel
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SMPR2 |= (7 << (Copy_u8Channel * 3)); // Set sampling time to 239.5 cycles
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	2207      	movs	r2, #7
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6113      	str	r3, [r2, #16]

	ADC1->CR2 |= 1;              // Enable ADC
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(100);   // Wait for stabilization
 8001ac6:	2064      	movs	r0, #100	; 0x64
 8001ac8:	f7ff fc28 	bl	800131c <MSTK_voidSetBusyWait>

	ADC1->CR2 |= (1 << 3);       // Start calibration
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	6093      	str	r3, [r2, #8]
	while (ADC1->CR2 & (1 << 3)); // Wait for calibration
 8001ad8:	bf00      	nop
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <ADC1_voidSingleChannelInit+0x7e>

	ADC1->CR2 |= 1;              // Re-enable ADC
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6093      	str	r3, [r2, #8]
	// Choose one mode:
	// Manual trigger mode: Do not enable continuous mode
	// ADC1->CR2 |= 0;            // Ensure continuous mode is off
	// Continuous mode:
	ADC1->CR2 |= 2;              // Enable continuous conversion mode
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <ADC1_voidSingleChannelInit+0xb4>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6093      	str	r3, [r2, #8]

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40012400 	.word	0x40012400

08001b14 <ADC1_u8SingleChannelCheck>:


u8 ADC1_u8SingleChannelCheck(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
	u8 Local_u8Check = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71fb      	strb	r3, [r7, #7]


	/* Check Flag of EOC */
	if(ADC1->SR & 2)
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <ADC1_u8SingleChannelCheck+0x28>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <ADC1_u8SingleChannelCheck+0x1a>
	{
		Local_u8Check = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
	}
	return Local_u8Check;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40012400 	.word	0x40012400

08001b40 <ADC1_voidSingleChannelRX>:



void ADC1_voidSingleChannelRX(u16 * Copy_pu16Data)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	u16 Local_u16Data = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	81fb      	strh	r3, [r7, #14]

	// Check if continuous mode is disabled
	if (ADC1->SR & (1 << 4)) // Check for Overrun (OVR)
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <ADC1_voidSingleChannelRX+0x2c>
	{
		volatile u16 dummy = ADC1->DR; // Read DR to clear OVR
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	81bb      	strh	r3, [r7, #12]
		ADC1->SR &= ~(1 << 4); // Clear the OVR flag
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b66:	f023 0310 	bic.w	r3, r3, #16
 8001b6a:	6013      	str	r3, [r2, #0]
	}


	// Wait for the End of Conversion (EOC) flag
	while (!(ADC1->SR & (1 << 1)));
 8001b6c:	bf00      	nop
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f9      	beq.n	8001b6e <ADC1_voidSingleChannelRX+0x2e>

	// Clear Overrun (OVR) flag if it is set
	if (ADC1->SR & (1 << 4))
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <ADC1_voidSingleChannelRX+0x52>
	{
		ADC1->SR &= ~(1 << 4); // Clear the OVR flag
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b8c:	f023 0310 	bic.w	r3, r3, #16
 8001b90:	6013      	str	r3, [r2, #0]
	}

	// Read ADC data from the DR register
	Local_u16Data = ADC1->DR;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <ADC1_voidSingleChannelRX+0x80>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	81fb      	strh	r3, [r7, #14]

	// Scale ADC result to millivolts
	*Copy_pu16Data = (Local_u16Data * 1000) / 0xFFF;
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <ADC1_voidSingleChannelRX+0x84>)
 8001ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba8:	441a      	add	r2, r3
 8001baa:	12d2      	asrs	r2, r2, #11
 8001bac:	17db      	asrs	r3, r3, #31
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	801a      	strh	r2, [r3, #0]
//	USART_voidTransmitByteSynch('\r', USART1);
//
//	USART_voidTransmitByteSynch('D', USART1);
//	USART_voidSendNumber(Local_u16Data, USART1); // Send raw ADC value
//	USART_voidTransmitByteSynch('\r', USART1);
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40012400 	.word	0x40012400
 8001bc4:	80080081 	.word	0x80080081

08001bc8 <OS_CreateTask>:
/*Array of structures of type task */
static Task_t Global_OSTasks[NUMBER_OF_TASKS]={0};


void OS_CreateTask(u8 Copy_u8ID, u16 Copy_u16Periodicity, void (*ptr)(void),u16 Copy_u16FirstDelay)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60ba      	str	r2, [r7, #8]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	81bb      	strh	r3, [r7, #12]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
	Global_OSTasks[Copy_u8ID].u16_Periodicity=Copy_u16Periodicity;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	4910      	ldr	r1, [pc, #64]	; (8001c24 <OS_CreateTask+0x5c>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	89ba      	ldrh	r2, [r7, #12]
 8001bee:	801a      	strh	r2, [r3, #0]
	Global_OSTasks[Copy_u8ID].Funptr=ptr;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	490c      	ldr	r1, [pc, #48]	; (8001c24 <OS_CreateTask+0x5c>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3304      	adds	r3, #4
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	601a      	str	r2, [r3, #0]
	Global_OSTasks[Copy_u8ID].u16_FirstDelay=Copy_u16FirstDelay;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	4907      	ldr	r1, [pc, #28]	; (8001c24 <OS_CreateTask+0x5c>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3308      	adds	r3, #8
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	801a      	strh	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000268 	.word	0x20000268

08001c28 <OS_voidStart>:

void OS_voidStart(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	MSTK_voidClkSrcInit();
 8001c2c:	f7ff fb56 	bl	80012dc <MSTK_voidClkSrcInit>
	/*Tick =1ms*/
	/*each 1ms the interrupt will fired and enter the scheduler*/
	MSTK_u8SetCallBackFunc(OS_voidScheduler);
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <OS_voidStart+0x1c>)
 8001c32:	f7ff fbc7 	bl	80013c4 <MSTK_u8SetCallBackFunc>
	MSTK_u8SetIntervalPeriodic(1000);
 8001c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3a:	f7ff fb8d 	bl	8001358 <MSTK_u8SetIntervalPeriodic>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08001c79 	.word	0x08001c79

08001c48 <OS_voidModifyPeriodictyTask>:

void OS_voidModifyPeriodictyTask(u8 Copy_u8ID, u16 Copy_u16MPeriodicity)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	Global_OSTasks[Copy_u8ID].u16_Periodicity=Copy_u16MPeriodicity;
 8001c58:	79fa      	ldrb	r2, [r7, #7]
 8001c5a:	4906      	ldr	r1, [pc, #24]	; (8001c74 <OS_voidModifyPeriodictyTask+0x2c>)
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	88ba      	ldrh	r2, [r7, #4]
 8001c68:	801a      	strh	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000268 	.word	0x20000268

08001c78 <OS_voidScheduler>:

void OS_voidScheduler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	static volatile u16 Local_u16TickCounts = 0; // Tick counter

	// Increment tick count (every 1 ms interrupt)
	Local_u16TickCounts++;
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <OS_voidScheduler+0xc0>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <OS_voidScheduler+0xc0>)
 8001c8a:	801a      	strh	r2, [r3, #0]

	for (u8 i = 0; i < NUMBER_OF_TASKS; i++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	e04a      	b.n	8001d28 <OS_voidScheduler+0xb0>
	{
		if (Global_OSTasks[i].u16_FirstDelay > 0)
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	4929      	ldr	r1, [pc, #164]	; (8001d3c <OS_voidScheduler+0xc4>)
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <OS_voidScheduler+0x5a>
		{
			Global_OSTasks[i].u16_FirstDelay--; // Decrement delay
 8001ca8:	79fa      	ldrb	r2, [r7, #7]
 8001caa:	4924      	ldr	r1, [pc, #144]	; (8001d3c <OS_voidScheduler+0xc4>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	491f      	ldr	r1, [pc, #124]	; (8001d3c <OS_voidScheduler+0xc4>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3308      	adds	r3, #8
 8001ccc:	4602      	mov	r2, r0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e027      	b.n	8001d22 <OS_voidScheduler+0xaa>
		}
		else
		{
			// Execute task when its periodicity matches the tick count
			if ((Local_u16TickCounts % Global_OSTasks[i].u16_Periodicity) == 0)
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <OS_voidScheduler+0xc0>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	79f9      	ldrb	r1, [r7, #7]
 8001cda:	4818      	ldr	r0, [pc, #96]	; (8001d3c <OS_voidScheduler+0xc4>)
 8001cdc:	460b      	mov	r3, r1
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	440b      	add	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4403      	add	r3, r0
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d114      	bne.n	8001d22 <OS_voidScheduler+0xaa>
			{
				if (Global_OSTasks[i].Funptr != NULL)
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	4910      	ldr	r1, [pc, #64]	; (8001d3c <OS_voidScheduler+0xc4>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	3304      	adds	r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <OS_voidScheduler+0xaa>
				{
					Global_OSTasks[i].Funptr(); // Execute task
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	490a      	ldr	r1, [pc, #40]	; (8001d3c <OS_voidScheduler+0xc4>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4798      	blx	r3
	for (u8 i = 0; i < NUMBER_OF_TASKS; i++)
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	3301      	adds	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d9b1      	bls.n	8001c92 <OS_voidScheduler+0x1a>
				}
			}
		}
	}
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000028c 	.word	0x2000028c
 8001d3c:	20000268 	.word	0x20000268

08001d40 <HTEMP_f32GetTemp>:




f32 HTEMP_f32GetTemp(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	static u16 Local_u16ADCValue = 0;
	f32 Local_f32Temperature = 0.0;
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]

	// Check if the sensor is enabled

		// Check if the ADC conversion is complete
		if (ADC1_u8SingleChannelCheck())  // Check EOC (End of Conversion) flag
 8001d4c:	f7ff fee2 	bl	8001b14 <ADC1_u8SingleChannelCheck>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d01a      	beq.n	8001d8c <HTEMP_f32GetTemp+0x4c>
		{
			ADC1_voidSingleChannelRX(&Local_u16ADCValue);  // Read ADC data
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <HTEMP_f32GetTemp+0x58>)
 8001d58:	f7ff fef2 	bl	8001b40 <ADC1_voidSingleChannelRX>

			// Convert ADC value to temperature in Celsius (LM35: 1 degree = 10mV)
			// Formula: Temperature = (ADC Value * 5.0V / 4095) / 0.01V
			Local_f32Temperature = (Local_u16ADCValue * 5.0f) / 4095.0f * 100.0f;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HTEMP_f32GetTemp+0x58>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe ff85 	bl	8000c70 <__aeabi_i2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <HTEMP_f32GetTemp+0x5c>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ffd4 	bl	8000d18 <__aeabi_fmul>
 8001d70:	4603      	mov	r3, r0
 8001d72:	490b      	ldr	r1, [pc, #44]	; (8001da0 <HTEMP_f32GetTemp+0x60>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f883 	bl	8000e80 <__aeabi_fdiv>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4909      	ldr	r1, [pc, #36]	; (8001da4 <HTEMP_f32GetTemp+0x64>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ffca 	bl	8000d18 <__aeabi_fmul>
 8001d84:	4603      	mov	r3, r0
 8001d86:	607b      	str	r3, [r7, #4]

			// Return the temperature in C
			return Local_f32Temperature;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	e000      	b.n	8001d8e <HTEMP_f32GetTemp+0x4e>
		}
		else
		{
			return -1;  // ADC data not ready
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HTEMP_f32GetTemp+0x68>)
		}


}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000028e 	.word	0x2000028e
 8001d9c:	40a00000 	.word	0x40a00000
 8001da0:	457ff000 	.word	0x457ff000
 8001da4:	42c80000 	.word	0x42c80000
 8001da8:	bf800000 	.word	0xbf800000

08001dac <HLDR_f32GetReading>:

#include "LIGHT_interface.h"
#include "LIGHT_config.h"

f32 HLDR_f32GetReading(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	static u16 Local_u16ADCValue = 0; // Variable to store ADC value
	f32 Local_f32LightIntensity = 0.0; // Variable to store light intensity
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]

	// Check if the sensor is enabled

		// Check if the ADC conversion is complete
		if (ADC1_u8SingleChannelCheck())  // Check End of Conversion (EOC) flag
 8001db8:	f7ff feac 	bl	8001b14 <ADC1_u8SingleChannelCheck>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01a      	beq.n	8001df8 <HLDR_f32GetReading+0x4c>
		{
			ADC1_voidSingleChannelRX(&Local_u16ADCValue);  // Read ADC value
 8001dc2:	4810      	ldr	r0, [pc, #64]	; (8001e04 <HLDR_f32GetReading+0x58>)
 8001dc4:	f7ff febc 	bl	8001b40 <ADC1_voidSingleChannelRX>

			// Convert ADC value to light intensity (for example, using the formula for LDR)
			// You may need to adjust this formula based on your circuit
			// For simplicity, assume the voltage across the LDR is linearly related to the light intensity
			Local_f32LightIntensity = (Local_u16ADCValue * 3.3f) / 4095.0f * 100.0f; // Example conversion
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HLDR_f32GetReading+0x58>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff4f 	bl	8000c70 <__aeabi_i2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <HLDR_f32GetReading+0x5c>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe ff9e 	bl	8000d18 <__aeabi_fmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	490b      	ldr	r1, [pc, #44]	; (8001e0c <HLDR_f32GetReading+0x60>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f84d 	bl	8000e80 <__aeabi_fdiv>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4909      	ldr	r1, [pc, #36]	; (8001e10 <HLDR_f32GetReading+0x64>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff94 	bl	8000d18 <__aeabi_fmul>
 8001df0:	4603      	mov	r3, r0
 8001df2:	607b      	str	r3, [r7, #4]

			// Return the calculated light intensity
			return Local_f32LightIntensity;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	e000      	b.n	8001dfa <HLDR_f32GetReading+0x4e>
		}
		else
		{
			return -1;  // ADC data not ready
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HLDR_f32GetReading+0x68>)
		}


}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000290 	.word	0x20000290
 8001e08:	40533333 	.word	0x40533333
 8001e0c:	457ff000 	.word	0x457ff000
 8001e10:	42c80000 	.word	0x42c80000
 8001e14:	bf800000 	.word	0xbf800000

08001e18 <HRELAY_voidON>:
#include "RELAY_config.h"



void HRELAY_voidON(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	MDIO_u8WriteChannel(RELAY_PORT,RELAY_PIN, MDIO_PIN_HIGH);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2102      	movs	r1, #2
 8001e20:	2002      	movs	r0, #2
 8001e22:	f7ff f9a9 	bl	8001178 <MDIO_u8WriteChannel>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HRELAY_voidOFF>:
void HRELAY_voidOFF(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
	MDIO_u8WriteChannel(RELAY_PORT,RELAY_PIN, MDIO_PIN_LOW);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2102      	movs	r1, #2
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7ff f9a0 	bl	8001178 <MDIO_u8WriteChannel>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HRELAY_u8LastStatus>:
u8 HRELAY_u8LastStatus(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
	u8 Local_u8lastStatus = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
	MDIO_u8ReadChannel(RELAY_PORT, RELAY_PIN, &Local_u8lastStatus);
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f7ff f9f7 	bl	8001240 <MDIO_u8ReadChannel>

    return (Local_u8lastStatus > 1) ? 0 : Local_u8lastStatus;
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d801      	bhi.n	8001e5c <HRELAY_u8LastStatus+0x20>
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	e000      	b.n	8001e5e <HRELAY_u8LastStatus+0x22>
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <cJSON_GetErrorPtr+0x18>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <cJSON_GetErrorPtr+0x18>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4413      	add	r3, r2
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000294 	.word	0x20000294

08001e84 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <case_insensitive_strcmp+0x16>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e056      	b.n	8001f4c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d10d      	bne.n	8001ec2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e050      	b.n	8001f4c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e04a      	b.n	8001f4c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <case_insensitive_strcmp+0xd4>)
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d103      	bne.n	8001ee2 <case_insensitive_strcmp+0x5e>
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	f103 0220 	add.w	r2, r3, #32
 8001ee0:	e000      	b.n	8001ee4 <case_insensitive_strcmp+0x60>
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	73bb      	strb	r3, [r7, #14]
 8001eea:	7bbb      	ldrb	r3, [r7, #14]
 8001eec:	3301      	adds	r3, #1
 8001eee:	491a      	ldr	r1, [pc, #104]	; (8001f58 <case_insensitive_strcmp+0xd4>)
 8001ef0:	440b      	add	r3, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <case_insensitive_strcmp+0x7e>
 8001efc:	7bbb      	ldrb	r3, [r7, #14]
 8001efe:	3320      	adds	r3, #32
 8001f00:	e000      	b.n	8001f04 <case_insensitive_strcmp+0x80>
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d0d0      	beq.n	8001eaa <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	737b      	strb	r3, [r7, #13]
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <case_insensitive_strcmp+0xd4>)
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d103      	bne.n	8001f28 <case_insensitive_strcmp+0xa4>
 8001f20:	7b7b      	ldrb	r3, [r7, #13]
 8001f22:	f103 0220 	add.w	r2, r3, #32
 8001f26:	e000      	b.n	8001f2a <case_insensitive_strcmp+0xa6>
 8001f28:	7b7a      	ldrb	r2, [r7, #13]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	733b      	strb	r3, [r7, #12]
 8001f30:	7b3b      	ldrb	r3, [r7, #12]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4908      	ldr	r1, [pc, #32]	; (8001f58 <case_insensitive_strcmp+0xd4>)
 8001f36:	440b      	add	r3, r1
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d102      	bne.n	8001f48 <case_insensitive_strcmp+0xc4>
 8001f42:	7b3b      	ldrb	r3, [r7, #12]
 8001f44:	3320      	adds	r3, #32
 8001f46:	e000      	b.n	8001f4a <case_insensitive_strcmp+0xc6>
 8001f48:	7b3b      	ldrb	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	080082b0 	.word	0x080082b0

08001f5c <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e015      	b.n	8001fa4 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe f903 	bl	8000184 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	4798      	blx	r3
 8001f8c:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e005      	b.n	8001fa4 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f002 fba9 	bl	80046f4 <memcpy>

    return copy;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2028      	movs	r0, #40	; 0x28
 8001fba:	4798      	blx	r3
 8001fbc:	60f8      	str	r0, [r7, #12]
    if (node)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001fc4:	2228      	movs	r2, #40	; 0x28
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f002 fba1 	bl	8004710 <memset>
    }

    return node;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001fe4:	e03d      	b.n	8002062 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d108      	bne.n	800200a <cJSON_Delete+0x32>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d004      	beq.n	800200a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ffe7 	bl	8001fd8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <cJSON_Delete+0x58>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <cJSON_Delete+0x9c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6912      	ldr	r2, [r2, #16]
 8002026:	4610      	mov	r0, r2
 8002028:	4798      	blx	r3
            item->valuestring = NULL;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <cJSON_Delete+0x7e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <cJSON_Delete+0x9c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6a12      	ldr	r2, [r2, #32]
 800204c:	4610      	mov	r0, r2
 800204e:	4798      	blx	r3
            item->string = NULL;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <cJSON_Delete+0x9c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
        item = next;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1be      	bne.n	8001fe6 <cJSON_Delete+0xe>
    }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000

08002078 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800207c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
	...

08002088 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b098      	sub	sp, #96	; 0x60
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
    double number = 0;
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80020a2:	f7ff ffe9 	bl	8002078 <get_decimal_point>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <parse_number+0x36>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <parse_number+0x3a>
    {
        return false;
 80020be:	2300      	movs	r3, #0
 80020c0:	e0c6      	b.n	8002250 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020c6:	e063      	b.n	8002190 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d2:	440b      	add	r3, r1
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b45      	cmp	r3, #69	; 0x45
 80020da:	dc3d      	bgt.n	8002158 <parse_number+0xd0>
 80020dc:	2b2b      	cmp	r3, #43	; 0x2b
 80020de:	db66      	blt.n	80021ae <parse_number+0x126>
 80020e0:	3b2b      	subs	r3, #43	; 0x2b
 80020e2:	2b1a      	cmp	r3, #26
 80020e4:	d863      	bhi.n	80021ae <parse_number+0x126>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <parse_number+0x64>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	0800215d 	.word	0x0800215d
 80020f0:	080021af 	.word	0x080021af
 80020f4:	0800215d 	.word	0x0800215d
 80020f8:	0800217b 	.word	0x0800217b
 80020fc:	080021af 	.word	0x080021af
 8002100:	0800215d 	.word	0x0800215d
 8002104:	0800215d 	.word	0x0800215d
 8002108:	0800215d 	.word	0x0800215d
 800210c:	0800215d 	.word	0x0800215d
 8002110:	0800215d 	.word	0x0800215d
 8002114:	0800215d 	.word	0x0800215d
 8002118:	0800215d 	.word	0x0800215d
 800211c:	0800215d 	.word	0x0800215d
 8002120:	0800215d 	.word	0x0800215d
 8002124:	0800215d 	.word	0x0800215d
 8002128:	080021af 	.word	0x080021af
 800212c:	080021af 	.word	0x080021af
 8002130:	080021af 	.word	0x080021af
 8002134:	080021af 	.word	0x080021af
 8002138:	080021af 	.word	0x080021af
 800213c:	080021af 	.word	0x080021af
 8002140:	080021af 	.word	0x080021af
 8002144:	080021af 	.word	0x080021af
 8002148:	080021af 	.word	0x080021af
 800214c:	080021af 	.word	0x080021af
 8002150:	080021af 	.word	0x080021af
 8002154:	0800215d 	.word	0x0800215d
 8002158:	2b65      	cmp	r3, #101	; 0x65
 800215a:	d128      	bne.n	80021ae <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002166:	440b      	add	r3, r1
 8002168:	4413      	add	r3, r2
 800216a:	7819      	ldrb	r1, [r3, #0]
 800216c:	f107 0208 	add.w	r2, r7, #8
 8002170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
                break;
 8002178:	e007      	b.n	800218a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800217a:	f107 0208 	add.w	r2, r7, #8
 800217e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002180:	4413      	add	r3, r2
 8002182:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002186:	701a      	strb	r2, [r3, #0]
                break;
 8002188:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800218a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218c:	3301      	adds	r3, #1
 800218e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002192:	2b3e      	cmp	r3, #62	; 0x3e
 8002194:	d80d      	bhi.n	80021b2 <parse_number+0x12a>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <parse_number+0x12a>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a2:	441a      	add	r2, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d38d      	bcc.n	80020c8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80021ac:	e001      	b.n	80021b2 <parse_number+0x12a>
                goto loop_end;
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <parse_number+0x12c>
loop_end:
 80021b2:	bf00      	nop
    number_c_string[i] = '\0';
 80021b4:	f107 0208 	add.w	r2, r7, #8
 80021b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ba:	4413      	add	r3, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80021c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fa48 	bl	8005660 <strtod>
 80021d0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80021d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	429a      	cmp	r2, r3
 80021dc:	d101      	bne.n	80021e2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 80021de:	2300      	movs	r3, #0
 80021e0:	e036      	b.n	8002250 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021e8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80021ec:	a31a      	add	r3, pc, #104	; (adr r3, 8002258 <parse_number+0x1d0>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021f6:	f7fe fc0f 	bl	8000a18 <__aeabi_dcmpge>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002206:	615a      	str	r2, [r3, #20]
 8002208:	e015      	b.n	8002236 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <parse_number+0x1d8>)
 8002210:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002214:	f7fe fbf6 	bl	8000a04 <__aeabi_dcmple>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002224:	615a      	str	r2, [r3, #20]
 8002226:	e006      	b.n	8002236 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8002228:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800222c:	f7fe fc1e 	bl	8000a6c <__aeabi_d2iz>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2208      	movs	r2, #8
 800223a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002242:	f107 0208 	add.w	r2, r7, #8
 8002246:	1a8a      	subs	r2, r1, r2
 8002248:	441a      	add	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	609a      	str	r2, [r3, #8]
    return true;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3760      	adds	r7, #96	; 0x60
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	ffc00000 	.word	0xffc00000
 800225c:	41dfffff 	.word	0x41dfffff
 8002260:	c1e00000 	.word	0xc1e00000

08002264 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <ensure+0x20>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <ensure+0x24>
    {
        return NULL;
 8002284:	2300      	movs	r3, #0
 8002286:	e083      	b.n	8002390 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <ensure+0x3c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d301      	bcc.n	80022a0 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	e077      	b.n	8002390 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da01      	bge.n	80022aa <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e072      	b.n	8002390 <ensure+0x12c>
    }

    needed += p->offset + 1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	3301      	adds	r3, #1
 80022b4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d805      	bhi.n	80022cc <ensure+0x68>
    {
        return p->buffer + p->offset;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	e061      	b.n	8002390 <ensure+0x12c>
    }

    if (p->noalloc) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <ensure+0x74>
        return NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e05b      	b.n	8002390 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d308      	bcc.n	80022f2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db03      	blt.n	80022ee <ensure+0x8a>
        {
            newsize = INT_MAX;
 80022e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	e004      	b.n	80022f8 <ensure+0x94>
        }
        else
        {
            return NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e04e      	b.n	8002390 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d018      	beq.n	8002332 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	4610      	mov	r0, r2
 800230c:	4798      	blx	r3
 800230e:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d132      	bne.n	800237c <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4610      	mov	r0, r2
 8002320:	4798      	blx	r3
            p->length = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

            return NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	e02e      	b.n	8002390 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	4798      	blx	r3
 800233a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4610      	mov	r0, r2
 800234c:	4798      	blx	r3
            p->length = 0;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

            return NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	e018      	b.n	8002390 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	3301      	adds	r3, #1
 8002368:	461a      	mov	r2, r3
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f002 f9c2 	bl	80046f4 <memcpy>
        p->hooks.deallocate(p->buffer);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4610      	mov	r0, r2
 800237a:	4798      	blx	r3
    }
    p->length = newsize;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4413      	add	r3, r2
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d013      	beq.n	80023d2 <update_offset+0x3a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00f      	beq.n	80023d2 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689c      	ldr	r4, [r3, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7fd fede 	bl	8000184 <strlen>
 80023c8:	4603      	mov	r3, r0
 80023ca:	18e2      	adds	r2, r4, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e000      	b.n	80023d4 <update_offset+0x3c>
        return;
 80023d2:	bf00      	nop
}
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
	...

080023dc <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80023dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023e0:	b08a      	sub	sp, #40	; 0x28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80023e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800240c:	f7fe fb0e 	bl	8000a2c <__aeabi_dcmpgt>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <compare_double+0x44>
 8002416:	69bc      	ldr	r4, [r7, #24]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800241e:	e003      	b.n	8002428 <compare_double+0x4c>
 8002420:	693c      	ldr	r4, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002428:	e9c7 4508 	strd	r4, r5, [r7, #32]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800242c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002430:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002434:	f7fd feb2 	bl	800019c <__aeabi_dsub>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4690      	mov	r8, r2
 800243e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <compare_double+0x9c>)
 8002448:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800244c:	f7fe f85e 	bl	800050c <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	2101      	movs	r1, #1
 8002456:	460c      	mov	r4, r1
 8002458:	4640      	mov	r0, r8
 800245a:	4649      	mov	r1, r9
 800245c:	f7fe fad2 	bl	8000a04 <__aeabi_dcmple>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <compare_double+0x8e>
 8002466:	2300      	movs	r3, #0
 8002468:	461c      	mov	r4, r3
 800246a:	b2e3      	uxtb	r3, r4
}
 800246c:	4618      	mov	r0, r3
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002476:	bf00      	nop
 8002478:	3cb00000 	.word	0x3cb00000

0800247c <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247e:	b093      	sub	sp, #76	; 0x4c
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002490:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
 80024b0:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 80024b2:	f7ff fde1 	bl	8002078 <get_decimal_point>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <print_number+0x56>
    {
        return false;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e0b0      	b.n	8002634 <print_number+0x1b8>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80024d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024da:	f7fe fab1 	bl	8000a40 <__aeabi_dcmpun>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d121      	bne.n	8002528 <print_number+0xac>
 80024e4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024ec:	2301      	movs	r3, #1
 80024ee:	461e      	mov	r6, r3
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	4b51      	ldr	r3, [pc, #324]	; (800263c <print_number+0x1c0>)
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fe faa1 	bl	8000a40 <__aeabi_dcmpun>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <print_number+0xa0>
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <print_number+0x1c0>)
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fe fa79 	bl	8000a04 <__aeabi_dcmple>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <print_number+0xa0>
 8002518:	2300      	movs	r3, #0
 800251a:	461e      	mov	r6, r3
 800251c:	b2f3      	uxtb	r3, r6
 800251e:	f083 0301 	eor.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4944      	ldr	r1, [pc, #272]	; (8002640 <print_number+0x1c4>)
 800252e:	4618      	mov	r0, r3
 8002530:	f002 f9ea 	bl	8004908 <siprintf>
 8002534:	6478      	str	r0, [r7, #68]	; 0x44
 8002536:	e03b      	b.n	80025b0 <print_number+0x134>
    }
    else if(d == (double)item->valueint)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd ff7b 	bl	8000438 <__aeabi_i2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800254a:	f7fe fa47 	bl	80009dc <__aeabi_dcmpeq>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4939      	ldr	r1, [pc, #228]	; (8002644 <print_number+0x1c8>)
 800255e:	4618      	mov	r0, r3
 8002560:	f002 f9d2 	bl	8004908 <siprintf>
 8002564:	6478      	str	r0, [r7, #68]	; 0x44
 8002566:	e023      	b.n	80025b0 <print_number+0x134>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8002568:	f107 0014 	add.w	r0, r7, #20
 800256c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002570:	4935      	ldr	r1, [pc, #212]	; (8002648 <print_number+0x1cc>)
 8002572:	f002 f9c9 	bl	8004908 <siprintf>
 8002576:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8002578:	f107 0208 	add.w	r2, r7, #8
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4932      	ldr	r1, [pc, #200]	; (800264c <print_number+0x1d0>)
 8002582:	4618      	mov	r0, r3
 8002584:	f002 f9e0 	bl	8004948 <siscanf>
 8002588:	4603      	mov	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <print_number+0x124>
 800258e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002592:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002596:	f7ff ff21 	bl	80023dc <compare_double>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <print_number+0x134>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80025a0:	f107 0014 	add.w	r0, r7, #20
 80025a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025a8:	4929      	ldr	r1, [pc, #164]	; (8002650 <print_number+0x1d4>)
 80025aa:	f002 f9ad 	bl	8004908 <siprintf>
 80025ae:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db02      	blt.n	80025bc <print_number+0x140>
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	2b19      	cmp	r3, #25
 80025ba:	dd01      	ble.n	80025c0 <print_number+0x144>
    {
        return false;
 80025bc:	2300      	movs	r3, #0
 80025be:	e039      	b.n	8002634 <print_number+0x1b8>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	3301      	adds	r3, #1
 80025c4:	4619      	mov	r1, r3
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f7ff fe4c 	bl	8002264 <ensure>
 80025cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <print_number+0x15c>
    {
        return false;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e02d      	b.n	8002634 <print_number+0x1b8>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
 80025dc:	e01a      	b.n	8002614 <print_number+0x198>
    {
        if (number_buffer[i] == decimal_point)
 80025de:	f107 0214 	add.w	r2, r7, #20
 80025e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d105      	bne.n	80025fc <print_number+0x180>
        {
            output_pointer[i] = '.';
 80025f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f4:	4413      	add	r3, r2
 80025f6:	222e      	movs	r2, #46	; 0x2e
 80025f8:	701a      	strb	r2, [r3, #0]
            continue;
 80025fa:	e008      	b.n	800260e <print_number+0x192>
        }

        output_pointer[i] = number_buffer[i];
 80025fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002600:	4413      	add	r3, r2
 8002602:	f107 0114 	add.w	r1, r7, #20
 8002606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002608:	440a      	add	r2, r1
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800260e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002610:	3301      	adds	r3, #1
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
 8002614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002618:	429a      	cmp	r2, r3
 800261a:	d3e0      	bcc.n	80025de <print_number+0x162>
    }
    output_pointer[i] = '\0';
 800261c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800261e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002620:	4413      	add	r3, r2
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262c:	441a      	add	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]

    return true;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	374c      	adds	r7, #76	; 0x4c
 8002638:	46bd      	mov	sp, r7
 800263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263c:	7fefffff 	.word	0x7fefffff
 8002640:	08008144 	.word	0x08008144
 8002644:	0800814c 	.word	0x0800814c
 8002648:	08008150 	.word	0x08008150
 800264c:	08008158 	.word	0x08008158
 8002650:	0800815c 	.word	0x0800815c

08002654 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e04c      	b.n	8002704 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b2f      	cmp	r3, #47	; 0x2f
 8002674:	d90f      	bls.n	8002696 <parse_hex4+0x42>
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b39      	cmp	r3, #57	; 0x39
 8002680:	d809      	bhi.n	8002696 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	3b30      	subs	r3, #48	; 0x30
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e02d      	b.n	80026f2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d90f      	bls.n	80026c2 <parse_hex4+0x6e>
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b46      	cmp	r3, #70	; 0x46
 80026ac:	d809      	bhi.n	80026c2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	3b37      	subs	r3, #55	; 0x37
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e017      	b.n	80026f2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b60      	cmp	r3, #96	; 0x60
 80026cc:	d90f      	bls.n	80026ee <parse_hex4+0x9a>
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b66      	cmp	r3, #102	; 0x66
 80026d8:	d809      	bhi.n	80026ee <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	3b57      	subs	r3, #87	; 0x57
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	e001      	b.n	80026f2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e00c      	b.n	800270c <parse_hex4+0xb8>
        }

        if (i < 3)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d802      	bhi.n	80026fe <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3301      	adds	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d9af      	bls.n	800266a <parse_hex4+0x16>
        }
    }

    return h;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
	...

08002718 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b05      	cmp	r3, #5
 8002750:	f340 80b7 	ble.w	80028c2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	3302      	adds	r3, #2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff7b 	bl	8002654 <parse_hex4>
 800275e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002766:	d304      	bcc.n	8002772 <utf16_literal_to_utf8+0x5a>
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800276e:	f0c0 80aa 	bcc.w	80028c6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002778:	d337      	bcc.n	80027ea <utf16_literal_to_utf8+0xd2>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002780:	d233      	bcs.n	80027ea <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	3306      	adds	r3, #6
 8002786:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800278c:	230c      	movs	r3, #12
 800278e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b05      	cmp	r3, #5
 800279a:	f340 8096 	ble.w	80028ca <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b5c      	cmp	r3, #92	; 0x5c
 80027a4:	f040 8093 	bne.w	80028ce <utf16_literal_to_utf8+0x1b6>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b75      	cmp	r3, #117	; 0x75
 80027b0:	f040 808d 	bne.w	80028ce <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3302      	adds	r3, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff4b 	bl	8002654 <parse_hex4>
 80027be:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80027c6:	f0c0 8084 	bcc.w	80028d2 <utf16_literal_to_utf8+0x1ba>
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80027d0:	d27f      	bcs.n	80028d2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	029a      	lsls	r2, r3, #10
 80027d6:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <utf16_literal_to_utf8+0x1cc>)
 80027d8:	4013      	ands	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80027e8:	e004      	b.n	80027f4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80027ea:	2306      	movs	r3, #6
 80027ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	2b7f      	cmp	r3, #127	; 0x7f
 80027f8:	d803      	bhi.n	8002802 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002800:	e01f      	b.n	8002842 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002808:	d206      	bcs.n	8002818 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800280a:	2302      	movs	r3, #2
 800280c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8002810:	23c0      	movs	r3, #192	; 0xc0
 8002812:	f887 3020 	strb.w	r3, [r7, #32]
 8002816:	e014      	b.n	8002842 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d206      	bcs.n	800282e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8002820:	2303      	movs	r3, #3
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8002826:	23e0      	movs	r3, #224	; 0xe0
 8002828:	f887 3020 	strb.w	r3, [r7, #32]
 800282c:	e009      	b.n	8002842 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002834:	d24f      	bcs.n	80028d6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8002836:	2304      	movs	r3, #4
 8002838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800283c:	23f0      	movs	r3, #240	; 0xf0
 800283e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002846:	3b01      	subs	r3, #1
 8002848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800284c:	e015      	b.n	800287a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002856:	b2da      	uxtb	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002860:	440b      	add	r3, r1
 8002862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002874:	3b01      	subs	r3, #1
 8002876:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800287a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8002882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002886:	2b01      	cmp	r3, #1
 8002888:	d909      	bls.n	800289e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	b2d9      	uxtb	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002896:	430a      	orrs	r2, r1
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028b6:	441a      	add	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80028bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028c0:	e00b      	b.n	80028da <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80028c2:	bf00      	nop
 80028c4:	e008      	b.n	80028d8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80028c6:	bf00      	nop
 80028c8:	e006      	b.n	80028d8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80028ca:	bf00      	nop
 80028cc:	e004      	b.n	80028d8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80028ce:	bf00      	nop
 80028d0:	e002      	b.n	80028d8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80028d6:	bf00      	nop

fail:
    return 0;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3728      	adds	r7, #40	; 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	000ffc00 	.word	0x000ffc00

080028e8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	3301      	adds	r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b22      	cmp	r3, #34	; 0x22
 8002924:	f040 8102 	bne.w	8002b2c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002930:	e017      	b.n	8002962 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b5c      	cmp	r3, #92	; 0x5c
 8002938:	d110      	bne.n	800295c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	f080 80f0 	bcs.w	8002b30 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	3301      	adds	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
                input_end++;
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	3301      	adds	r3, #1
 800295a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	3301      	adds	r3, #1
 8002960:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a3a      	ldr	r2, [r7, #32]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	461a      	mov	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d203      	bcs.n	800297c <parse_string+0x94>
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b22      	cmp	r3, #34	; 0x22
 800297a:	d1da      	bne.n	8002932 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	461a      	mov	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	f080 80d2 	bcs.w	8002b34 <parse_string+0x24c>
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b22      	cmp	r3, #34	; 0x22
 8002996:	f040 80cd 	bne.w	8002b34 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4413      	add	r3, r2
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	3201      	adds	r2, #1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4798      	blx	r3
 80029bc:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80b9 	beq.w	8002b38 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80029ca:	e093      	b.n	8002af4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b5c      	cmp	r3, #92	; 0x5c
 80029d2:	d008      	beq.n	80029e6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80029d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d6:	1c53      	adds	r3, r2, #1
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1c59      	adds	r1, r3, #1
 80029de:	60f9      	str	r1, [r7, #12]
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e086      	b.n	8002af4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80029ea:	6a3a      	ldr	r2, [r7, #32]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f340 80a3 	ble.w	8002b3c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	3301      	adds	r3, #1
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b75      	cmp	r3, #117	; 0x75
 80029fe:	f300 809f 	bgt.w	8002b40 <parse_string+0x258>
 8002a02:	2b5c      	cmp	r3, #92	; 0x5c
 8002a04:	da04      	bge.n	8002a10 <parse_string+0x128>
 8002a06:	2b22      	cmp	r3, #34	; 0x22
 8002a08:	d05c      	beq.n	8002ac4 <parse_string+0x1dc>
 8002a0a:	2b2f      	cmp	r3, #47	; 0x2f
 8002a0c:	d05a      	beq.n	8002ac4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8002a0e:	e097      	b.n	8002b40 <parse_string+0x258>
            switch (input_pointer[1])
 8002a10:	3b5c      	subs	r3, #92	; 0x5c
 8002a12:	2b19      	cmp	r3, #25
 8002a14:	f200 8094 	bhi.w	8002b40 <parse_string+0x258>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <parse_string+0x138>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002ac5 	.word	0x08002ac5
 8002a24:	08002b41 	.word	0x08002b41
 8002a28:	08002b41 	.word	0x08002b41
 8002a2c:	08002b41 	.word	0x08002b41
 8002a30:	08002b41 	.word	0x08002b41
 8002a34:	08002b41 	.word	0x08002b41
 8002a38:	08002a89 	.word	0x08002a89
 8002a3c:	08002b41 	.word	0x08002b41
 8002a40:	08002b41 	.word	0x08002b41
 8002a44:	08002b41 	.word	0x08002b41
 8002a48:	08002a95 	.word	0x08002a95
 8002a4c:	08002b41 	.word	0x08002b41
 8002a50:	08002b41 	.word	0x08002b41
 8002a54:	08002b41 	.word	0x08002b41
 8002a58:	08002b41 	.word	0x08002b41
 8002a5c:	08002b41 	.word	0x08002b41
 8002a60:	08002b41 	.word	0x08002b41
 8002a64:	08002b41 	.word	0x08002b41
 8002a68:	08002aa1 	.word	0x08002aa1
 8002a6c:	08002b41 	.word	0x08002b41
 8002a70:	08002b41 	.word	0x08002b41
 8002a74:	08002b41 	.word	0x08002b41
 8002a78:	08002aad 	.word	0x08002aad
 8002a7c:	08002b41 	.word	0x08002b41
 8002a80:	08002ab9 	.word	0x08002ab9
 8002a84:	08002ad3 	.word	0x08002ad3
                    *output_pointer++ = '\b';
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	60fa      	str	r2, [r7, #12]
 8002a8e:	2208      	movs	r2, #8
 8002a90:	701a      	strb	r2, [r3, #0]
                    break;
 8002a92:	e02b      	b.n	8002aec <parse_string+0x204>
                    *output_pointer++ = '\f';
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60fa      	str	r2, [r7, #12]
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	701a      	strb	r2, [r3, #0]
                    break;
 8002a9e:	e025      	b.n	8002aec <parse_string+0x204>
                    *output_pointer++ = '\n';
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	60fa      	str	r2, [r7, #12]
 8002aa6:	220a      	movs	r2, #10
 8002aa8:	701a      	strb	r2, [r3, #0]
                    break;
 8002aaa:	e01f      	b.n	8002aec <parse_string+0x204>
                    *output_pointer++ = '\r';
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	60fa      	str	r2, [r7, #12]
 8002ab2:	220d      	movs	r2, #13
 8002ab4:	701a      	strb	r2, [r3, #0]
                    break;
 8002ab6:	e019      	b.n	8002aec <parse_string+0x204>
                    *output_pointer++ = '\t';
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	60fa      	str	r2, [r7, #12]
 8002abe:	2209      	movs	r2, #9
 8002ac0:	701a      	strb	r2, [r3, #0]
                    break;
 8002ac2:	e013      	b.n	8002aec <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	60fa      	str	r2, [r7, #12]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	7852      	ldrb	r2, [r2, #1]
 8002ace:	701a      	strb	r2, [r3, #0]
                    break;
 8002ad0:	e00c      	b.n	8002aec <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6a39      	ldr	r1, [r7, #32]
 8002ada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002adc:	f7ff fe1c 	bl	8002718 <utf16_literal_to_utf8>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02c      	beq.n	8002b44 <parse_string+0x25c>
                    break;
 8002aea:	bf00      	nop
            }
            input_pointer += sequence_length;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	4413      	add	r3, r2
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f4ff af67 	bcc.w	80029cc <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2210      	movs	r2, #16
 8002b08:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a3a      	ldr	r2, [r7, #32]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	609a      	str	r2, [r3, #8]

    return true;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e020      	b.n	8002b6e <parse_string+0x286>
        goto fail;
 8002b2c:	bf00      	nop
 8002b2e:	e00a      	b.n	8002b46 <parse_string+0x25e>
                    goto fail;
 8002b30:	bf00      	nop
 8002b32:	e008      	b.n	8002b46 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8002b34:	bf00      	nop
 8002b36:	e006      	b.n	8002b46 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8002b38:	bf00      	nop
 8002b3a:	e004      	b.n	8002b46 <parse_string+0x25e>
                goto fail;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <parse_string+0x25e>
                    goto fail;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <parse_string+0x25e>
                        goto fail;
 8002b44:	bf00      	nop

fail:
    if (output != NULL)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <parse_string+0x270>
    {
        input_buffer->hooks.deallocate(output);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	69f8      	ldr	r0, [r7, #28]
 8002b52:	4798      	blx	r3
        output = NULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <parse_string+0x284>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	609a      	str	r2, [r3, #8]
    }

    return false;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop

08002b78 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <print_string_ptr+0x28>
    {
        return false;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e110      	b.n	8002dc2 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d111      	bne.n	8002bca <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8002ba6:	2103      	movs	r1, #3
 8002ba8:	6838      	ldr	r0, [r7, #0]
 8002baa:	f7ff fb5b 	bl	8002264 <ensure>
 8002bae:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <print_string_ptr+0x42>
        {
            return false;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e103      	b.n	8002dc2 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4a83      	ldr	r2, [pc, #524]	; (8002dcc <print_string_ptr+0x254>)
 8002bbe:	8811      	ldrh	r1, [r2, #0]
 8002bc0:	7892      	ldrb	r2, [r2, #2]
 8002bc2:	8019      	strh	r1, [r3, #0]
 8002bc4:	709a      	strb	r2, [r3, #2]

        return true;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0fb      	b.n	8002dc2 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e023      	b.n	8002c18 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b22      	cmp	r3, #34	; 0x22
 8002bd6:	dc0e      	bgt.n	8002bf6 <print_string_ptr+0x7e>
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	db12      	blt.n	8002c02 <print_string_ptr+0x8a>
 8002bdc:	3b08      	subs	r3, #8
 8002bde:	2201      	movs	r2, #1
 8002be0:	409a      	lsls	r2, r3
 8002be2:	4b7b      	ldr	r3, [pc, #492]	; (8002dd0 <print_string_ptr+0x258>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <print_string_ptr+0x82>
 8002bf4:	e005      	b.n	8002c02 <print_string_ptr+0x8a>
 8002bf6:	2b5c      	cmp	r3, #92	; 0x5c
 8002bf8:	d103      	bne.n	8002c02 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
                break;
 8002c00:	e007      	b.n	8002c12 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b1f      	cmp	r3, #31
 8002c08:	d802      	bhi.n	8002c10 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3305      	adds	r3, #5
 8002c0e:	617b      	str	r3, [r7, #20]
                }
                break;
 8002c10:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1d7      	bne.n	8002bd0 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3303      	adds	r3, #3
 8002c32:	4619      	mov	r1, r3
 8002c34:	6838      	ldr	r0, [r7, #0]
 8002c36:	f7ff fb15 	bl	8002264 <ensure>
 8002c3a:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <print_string_ptr+0xce>
    {
        return false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e0bd      	b.n	8002dc2 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d117      	bne.n	8002c7c <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2222      	movs	r2, #34	; 0x22
 8002c50:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	3301      	adds	r3, #1
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fd4a 	bl	80046f4 <memcpy>
        output[output_length + 1] = '\"';
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3301      	adds	r3, #1
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	2222      	movs	r2, #34	; 0x22
 8002c6a:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3302      	adds	r3, #2
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]

        return true;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0a2      	b.n	8002dc2 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2222      	movs	r2, #34	; 0x22
 8002c80:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e087      	b.n	8002d9e <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b1f      	cmp	r3, #31
 8002c94:	d90c      	bls.n	8002cb0 <print_string_ptr+0x138>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b22      	cmp	r3, #34	; 0x22
 8002c9c:	d008      	beq.n	8002cb0 <print_string_ptr+0x138>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b5c      	cmp	r3, #92	; 0x5c
 8002ca4:	d004      	beq.n	8002cb0 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e070      	b.n	8002d92 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	61ba      	str	r2, [r7, #24]
 8002cb6:	225c      	movs	r2, #92	; 0x5c
 8002cb8:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b22      	cmp	r3, #34	; 0x22
 8002cc0:	dc3e      	bgt.n	8002d40 <print_string_ptr+0x1c8>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	db5a      	blt.n	8002d7c <print_string_ptr+0x204>
 8002cc6:	3b08      	subs	r3, #8
 8002cc8:	2b1a      	cmp	r3, #26
 8002cca:	d857      	bhi.n	8002d7c <print_string_ptr+0x204>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <print_string_ptr+0x15c>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002d55 	.word	0x08002d55
 8002cd8:	08002d75 	.word	0x08002d75
 8002cdc:	08002d65 	.word	0x08002d65
 8002ce0:	08002d7d 	.word	0x08002d7d
 8002ce4:	08002d5d 	.word	0x08002d5d
 8002ce8:	08002d6d 	.word	0x08002d6d
 8002cec:	08002d7d 	.word	0x08002d7d
 8002cf0:	08002d7d 	.word	0x08002d7d
 8002cf4:	08002d7d 	.word	0x08002d7d
 8002cf8:	08002d7d 	.word	0x08002d7d
 8002cfc:	08002d7d 	.word	0x08002d7d
 8002d00:	08002d7d 	.word	0x08002d7d
 8002d04:	08002d7d 	.word	0x08002d7d
 8002d08:	08002d7d 	.word	0x08002d7d
 8002d0c:	08002d7d 	.word	0x08002d7d
 8002d10:	08002d7d 	.word	0x08002d7d
 8002d14:	08002d7d 	.word	0x08002d7d
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002d7d 	.word	0x08002d7d
 8002d20:	08002d7d 	.word	0x08002d7d
 8002d24:	08002d7d 	.word	0x08002d7d
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002d7d 	.word	0x08002d7d
 8002d30:	08002d7d 	.word	0x08002d7d
 8002d34:	08002d7d 	.word	0x08002d7d
 8002d38:	08002d7d 	.word	0x08002d7d
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	2b5c      	cmp	r3, #92	; 0x5c
 8002d42:	d11b      	bne.n	8002d7c <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	225c      	movs	r2, #92	; 0x5c
 8002d48:	701a      	strb	r2, [r3, #0]
                    break;
 8002d4a:	e022      	b.n	8002d92 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2222      	movs	r2, #34	; 0x22
 8002d50:	701a      	strb	r2, [r3, #0]
                    break;
 8002d52:	e01e      	b.n	8002d92 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2262      	movs	r2, #98	; 0x62
 8002d58:	701a      	strb	r2, [r3, #0]
                    break;
 8002d5a:	e01a      	b.n	8002d92 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2266      	movs	r2, #102	; 0x66
 8002d60:	701a      	strb	r2, [r3, #0]
                    break;
 8002d62:	e016      	b.n	8002d92 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	226e      	movs	r2, #110	; 0x6e
 8002d68:	701a      	strb	r2, [r3, #0]
                    break;
 8002d6a:	e012      	b.n	8002d92 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2272      	movs	r2, #114	; 0x72
 8002d70:	701a      	strb	r2, [r3, #0]
                    break;
 8002d72:	e00e      	b.n	8002d92 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2274      	movs	r2, #116	; 0x74
 8002d78:	701a      	strb	r2, [r3, #0]
                    break;
 8002d7a:	e00a      	b.n	8002d92 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4914      	ldr	r1, [pc, #80]	; (8002dd4 <print_string_ptr+0x25c>)
 8002d84:	69b8      	ldr	r0, [r7, #24]
 8002d86:	f001 fdbf 	bl	8004908 <siprintf>
                    output_pointer += 4;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	61bb      	str	r3, [r7, #24]
                    break;
 8002d90:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f47f af73 	bne.w	8002c8e <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	2222      	movs	r2, #34	; 0x22
 8002db2:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3302      	adds	r3, #2
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]

    return true;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	08008164 	.word	0x08008164
 8002dd0:	04000037 	.word	0x04000037
 8002dd4:	08008168 	.word	0x08008168

08002dd8 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	6839      	ldr	r1, [r7, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fec5 	bl	8002b78 <print_string_ptr>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <buffer_skip_whitespace+0x16>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e02c      	b.n	8002e6c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <buffer_skip_whitespace+0x2c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d306      	bcc.n	8002e32 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	e021      	b.n	8002e6c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <buffer_skip_whitespace+0x5c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d207      	bcs.n	8002e54 <buffer_skip_whitespace+0x5c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d9e9      	bls.n	8002e28 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d104      	bne.n	8002e6a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	1e5a      	subs	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <skip_utf8_bom+0x1e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <skip_utf8_bom+0x1e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <skip_utf8_bom+0x22>
    {
        return NULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e01c      	b.n	8002ed4 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <skip_utf8_bom+0x5a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	1d1a      	adds	r2, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d211      	bcs.n	8002ed2 <skip_utf8_bom+0x5a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4908      	ldr	r1, [pc, #32]	; (8002edc <skip_utf8_bom+0x64>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fdb2 	bl	8004a26 <strncmp>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	1cda      	adds	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002ed2:	687b      	ldr	r3, [r7, #4]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	08008170 	.word	0x08008170

08002ee0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e00c      	b.n	8002f10 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7fd f944 	bl	8000184 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	3301      	adds	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	6979      	ldr	r1, [r7, #20]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f805 	bl	8002f18 <cJSON_ParseWithLengthOpts>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08e      	sub	sp, #56	; 0x38
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002f26:	f107 0318 	add.w	r3, r7, #24
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]
 8002f36:	615a      	str	r2, [r3, #20]
 8002f38:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <cJSON_ParseWithLengthOpts+0x12c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002f44:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <cJSON_ParseWithLengthOpts+0x12c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d042      	beq.n	8002fd6 <cJSON_ParseWithLengthOpts+0xbe>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03f      	beq.n	8002fd6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8002f62:	4a39      	ldr	r2, [pc, #228]	; (8003048 <cJSON_ParseWithLengthOpts+0x130>)
 8002f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f68:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002f6e:	4836      	ldr	r0, [pc, #216]	; (8003048 <cJSON_ParseWithLengthOpts+0x130>)
 8002f70:	f7ff f81c 	bl	8001fac <cJSON_New_Item>
 8002f74:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d02e      	beq.n	8002fda <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002f7c:	f107 0318 	add.w	r3, r7, #24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff79 	bl	8002e78 <skip_utf8_bom>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff35 	bl	8002df8 <buffer_skip_whitespace>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4619      	mov	r1, r3
 8002f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f94:	f000 f902 	bl	800319c <parse_value>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01f      	beq.n	8002fde <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002fa4:	f107 0318 	add.w	r3, r7, #24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff25 	bl	8002df8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d215      	bcs.n	8002fe2 <cJSON_ParseWithLengthOpts+0xca>
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	e031      	b.n	800303a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002fd6:	bf00      	nop
 8002fd8:	e004      	b.n	8002fe4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002fe2:	bf00      	nop

fail:
    if (item != NULL)
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002fea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fec:	f7fe fff4 	bl	8001fd8 <cJSON_Delete>
    }

    if (value != NULL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	429a      	cmp	r2, r3
 8003004:	d202      	bcs.n	800300c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e005      	b.n	8003018 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b01      	subs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	441a      	add	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <cJSON_ParseWithLengthOpts+0x12c>)
 800302a:	461a      	mov	r2, r3
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003034:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3738      	adds	r7, #56	; 0x38
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000294 	.word	0x20000294
 8003048:	20000000 	.word	0x20000000

0800304c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff41 	bl	8002ee0 <cJSON_ParseWithOpts>
 800305e:	4603      	mov	r3, r0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08e      	sub	sp, #56	; 0x38
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	2224      	movs	r2, #36	; 0x24
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f001 fb45 	bl	8004710 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3b      	ldr	r2, [pc, #236]	; (8003178 <print+0x110>)
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	4610      	mov	r0, r2
 8003090:	4798      	blx	r3
 8003092:	4603      	mov	r3, r0
 8003094:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <print+0x110>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d042      	beq.n	8003138 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80030b2:	f107 0310 	add.w	r3, r7, #16
 80030b6:	4619      	mov	r1, r3
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f95b 	bl	8003374 <print_value>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d03b      	beq.n	800313c <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f965 	bl	8002398 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	6938      	ldr	r0, [r7, #16]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	3201      	adds	r2, #1
 80030e0:	4611      	mov	r1, r2
 80030e2:	4798      	blx	r3
 80030e4:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d029      	beq.n	8003140 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e020      	b.n	8003134 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	3201      	adds	r2, #1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4798      	blx	r3
 80030fe:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01e      	beq.n	8003144 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8003106:	6939      	ldr	r1, [r7, #16]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	4293      	cmp	r3, r2
 8003110:	bf28      	it	cs
 8003112:	4613      	movcs	r3, r2
 8003114:	461a      	mov	r2, r3
 8003116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003118:	f001 faec 	bl	80046f4 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003120:	4413      	add	r3, r2
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4610      	mov	r0, r2
 800312e:	4798      	blx	r3
        buffer->buffer = NULL;
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	e01a      	b.n	800316e <print+0x106>
        goto fail;
 8003138:	bf00      	nop
 800313a:	e004      	b.n	8003146 <print+0xde>
        goto fail;
 800313c:	bf00      	nop
 800313e:	e002      	b.n	8003146 <print+0xde>
            goto fail;
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <print+0xde>
            goto fail;
 8003144:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4610      	mov	r0, r2
 8003154:	4798      	blx	r3
        buffer->buffer = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <print+0x104>
    {
        hooks->deallocate(printed);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003166:	4798      	blx	r3
        printed = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    return NULL;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3738      	adds	r7, #56	; 0x38
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	080082ac 	.word	0x080082ac

0800317c <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <cJSON_PrintUnformatted+0x1c>)
 8003186:	2100      	movs	r1, #0
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff6d 	bl	8003068 <print>
 800318e:	4603      	mov	r3, r0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000000 	.word	0x20000000

0800319c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <parse_value+0x18>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <parse_value+0x1c>
    {
        return false; /* no input */
 80031b4:	2300      	movs	r3, #0
 80031b6:	e0d2      	b.n	800335e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <parse_value+0x5e>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d816      	bhi.n	80031fa <parse_value+0x5e>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	2204      	movs	r2, #4
 80031d8:	4963      	ldr	r1, [pc, #396]	; (8003368 <parse_value+0x1cc>)
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 fc23 	bl	8004a26 <strncmp>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	1d1a      	adds	r2, r3, #4
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	609a      	str	r2, [r3, #8]
        return true;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0b1      	b.n	800335e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01d      	beq.n	800323c <parse_value+0xa0>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	1d5a      	adds	r2, r3, #5
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d816      	bhi.n	800323c <parse_value+0xa0>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4413      	add	r3, r2
 8003218:	2205      	movs	r2, #5
 800321a:	4954      	ldr	r1, [pc, #336]	; (800336c <parse_value+0x1d0>)
 800321c:	4618      	mov	r0, r3
 800321e:	f001 fc02 	bl	8004a26 <strncmp>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	1d5a      	adds	r2, r3, #5
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	609a      	str	r2, [r3, #8]
        return true;
 8003238:	2301      	movs	r3, #1
 800323a:	e090      	b.n	800335e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d020      	beq.n	8003284 <parse_value+0xe8>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d819      	bhi.n	8003284 <parse_value+0xe8>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4413      	add	r3, r2
 800325a:	2204      	movs	r2, #4
 800325c:	4944      	ldr	r1, [pc, #272]	; (8003370 <parse_value+0x1d4>)
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fbe1 	bl	8004a26 <strncmp>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	609a      	str	r2, [r3, #8]
        return true;
 8003280:	2301      	movs	r3, #1
 8003282:	e06c      	b.n	800335e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <parse_value+0x116>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d20d      	bcs.n	80032b2 <parse_value+0x116>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b22      	cmp	r3, #34	; 0x22
 80032a4:	d105      	bne.n	80032b2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80032a6:	6839      	ldr	r1, [r7, #0]
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fb1d 	bl	80028e8 <parse_string>
 80032ae:	4603      	mov	r3, r0
 80032b0:	e055      	b.n	800335e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <parse_value+0x164>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d21d      	bcs.n	8003300 <parse_value+0x164>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b2d      	cmp	r3, #45	; 0x2d
 80032d2:	d00f      	beq.n	80032f4 <parse_value+0x158>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b2f      	cmp	r3, #47	; 0x2f
 80032e2:	d90d      	bls.n	8003300 <parse_value+0x164>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4413      	add	r3, r2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b39      	cmp	r3, #57	; 0x39
 80032f2:	d805      	bhi.n	8003300 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fec6 	bl	8002088 <parse_number>
 80032fc:	4603      	mov	r3, r0
 80032fe:	e02e      	b.n	800335e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d013      	beq.n	800332e <parse_value+0x192>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20d      	bcs.n	800332e <parse_value+0x192>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b5b      	cmp	r3, #91	; 0x5b
 8003320:	d105      	bne.n	800332e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f909 	bl	800353c <parse_array>
 800332a:	4603      	mov	r3, r0
 800332c:	e017      	b.n	800335e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <parse_value+0x1c0>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d20d      	bcs.n	800335c <parse_value+0x1c0>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b7b      	cmp	r3, #123	; 0x7b
 800334e:	d105      	bne.n	800335c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8003350:	6839      	ldr	r1, [r7, #0]
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa3c 	bl	80037d0 <parse_object>
 8003358:	4603      	mov	r3, r0
 800335a:	e000      	b.n	800335e <parse_value+0x1c2>
    }

    return false;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	08008144 	.word	0x08008144
 800336c:	08008174 	.word	0x08008174
 8003370:	0800817c 	.word	0x0800817c

08003374 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <print_value+0x1a>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <print_value+0x1e>
    {
        return false;
 800338e:	2300      	movs	r3, #0
 8003390:	e0c9      	b.n	8003526 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b80      	cmp	r3, #128	; 0x80
 800339a:	f000 808e 	beq.w	80034ba <print_value+0x146>
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	f300 80c0 	bgt.w	8003524 <print_value+0x1b0>
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	dc49      	bgt.n	800343c <print_value+0xc8>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f340 80bb 	ble.w	8003524 <print_value+0x1b0>
 80033ae:	3b01      	subs	r3, #1
 80033b0:	2b1f      	cmp	r3, #31
 80033b2:	f200 80b7 	bhi.w	8003524 <print_value+0x1b0>
 80033b6:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <print_value+0x48>)
 80033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033bc:	08003467 	.word	0x08003467
 80033c0:	0800348b 	.word	0x0800348b
 80033c4:	08003525 	.word	0x08003525
 80033c8:	08003443 	.word	0x08003443
 80033cc:	08003525 	.word	0x08003525
 80033d0:	08003525 	.word	0x08003525
 80033d4:	08003525 	.word	0x08003525
 80033d8:	080034af 	.word	0x080034af
 80033dc:	08003525 	.word	0x08003525
 80033e0:	08003525 	.word	0x08003525
 80033e4:	08003525 	.word	0x08003525
 80033e8:	08003525 	.word	0x08003525
 80033ec:	08003525 	.word	0x08003525
 80033f0:	08003525 	.word	0x08003525
 80033f4:	08003525 	.word	0x08003525
 80033f8:	08003501 	.word	0x08003501
 80033fc:	08003525 	.word	0x08003525
 8003400:	08003525 	.word	0x08003525
 8003404:	08003525 	.word	0x08003525
 8003408:	08003525 	.word	0x08003525
 800340c:	08003525 	.word	0x08003525
 8003410:	08003525 	.word	0x08003525
 8003414:	08003525 	.word	0x08003525
 8003418:	08003525 	.word	0x08003525
 800341c:	08003525 	.word	0x08003525
 8003420:	08003525 	.word	0x08003525
 8003424:	08003525 	.word	0x08003525
 8003428:	08003525 	.word	0x08003525
 800342c:	08003525 	.word	0x08003525
 8003430:	08003525 	.word	0x08003525
 8003434:	08003525 	.word	0x08003525
 8003438:	0800350d 	.word	0x0800350d
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d06b      	beq.n	8003518 <print_value+0x1a4>
 8003440:	e070      	b.n	8003524 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8003442:	2105      	movs	r1, #5
 8003444:	6838      	ldr	r0, [r7, #0]
 8003446:	f7fe ff0d 	bl	8002264 <ensure>
 800344a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <print_value+0xe2>
            {
                return false;
 8003452:	2300      	movs	r3, #0
 8003454:	e067      	b.n	8003526 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a35      	ldr	r2, [pc, #212]	; (8003530 <print_value+0x1bc>)
 800345a:	6810      	ldr	r0, [r2, #0]
 800345c:	6018      	str	r0, [r3, #0]
 800345e:	7912      	ldrb	r2, [r2, #4]
 8003460:	711a      	strb	r2, [r3, #4]
            return true;
 8003462:	2301      	movs	r3, #1
 8003464:	e05f      	b.n	8003526 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8003466:	2106      	movs	r1, #6
 8003468:	6838      	ldr	r0, [r7, #0]
 800346a:	f7fe fefb 	bl	8002264 <ensure>
 800346e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <print_value+0x106>
            {
                return false;
 8003476:	2300      	movs	r3, #0
 8003478:	e055      	b.n	8003526 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <print_value+0x1c0>)
 800347e:	6810      	ldr	r0, [r2, #0]
 8003480:	6018      	str	r0, [r3, #0]
 8003482:	8892      	ldrh	r2, [r2, #4]
 8003484:	809a      	strh	r2, [r3, #4]
            return true;
 8003486:	2301      	movs	r3, #1
 8003488:	e04d      	b.n	8003526 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800348a:	2105      	movs	r1, #5
 800348c:	6838      	ldr	r0, [r7, #0]
 800348e:	f7fe fee9 	bl	8002264 <ensure>
 8003492:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <print_value+0x12a>
            {
                return false;
 800349a:	2300      	movs	r3, #0
 800349c:	e043      	b.n	8003526 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <print_value+0x1c4>)
 80034a2:	6810      	ldr	r0, [r2, #0]
 80034a4:	6018      	str	r0, [r3, #0]
 80034a6:	7912      	ldrb	r2, [r2, #4]
 80034a8:	711a      	strb	r2, [r3, #4]
            return true;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e03b      	b.n	8003526 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80034ae:	6839      	ldr	r1, [r7, #0]
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fe ffe3 	bl	800247c <print_number>
 80034b6:	4603      	mov	r3, r0
 80034b8:	e035      	b.n	8003526 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <print_value+0x156>
            {
                return false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e02d      	b.n	8003526 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fc fe58 	bl	8000184 <strlen>
 80034d4:	4603      	mov	r3, r0
 80034d6:	3301      	adds	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	f7fe fec1 	bl	8002264 <ensure>
 80034e2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <print_value+0x17a>
            {
                return false;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e01b      	b.n	8003526 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4619      	mov	r1, r3
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f001 f8fc 	bl	80046f4 <memcpy>
            return true;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e012      	b.n	8003526 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fc68 	bl	8002dd8 <print_string>
 8003508:	4603      	mov	r3, r0
 800350a:	e00c      	b.n	8003526 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8d8 	bl	80036c4 <print_array>
 8003514:	4603      	mov	r3, r0
 8003516:	e006      	b.n	8003526 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa64 	bl	80039e8 <print_object>
 8003520:	4603      	mov	r3, r0
 8003522:	e000      	b.n	8003526 <print_value+0x1b2>

        default:
            return false;
 8003524:	2300      	movs	r3, #0
    }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	08008144 	.word	0x08008144
 8003534:	08008174 	.word	0x08008174
 8003538:	0800817c 	.word	0x0800817c

0800353c <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003556:	d301      	bcc.n	800355c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8003558:	2300      	movs	r3, #0
 800355a:	e0af      	b.n	80036bc <parse_array+0x180>
    }
    input_buffer->depth++;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b5b      	cmp	r3, #91	; 0x5b
 8003574:	f040 8094 	bne.w	80036a0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003582:	6838      	ldr	r0, [r7, #0]
 8003584:	f7ff fc38 	bl	8002df8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <parse_array+0x6e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	d207      	bcs.n	80035aa <parse_array+0x6e>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b5d      	cmp	r3, #93	; 0x5d
 80035a8:	d061      	beq.n	800366e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <parse_array+0x80>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d305      	bcc.n	80035c8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	1e5a      	subs	r2, r3, #1
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	609a      	str	r2, [r3, #8]
        goto fail;
 80035c6:	e072      	b.n	80036ae <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3310      	adds	r3, #16
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fce8 	bl	8001fac <cJSON_New_Item>
 80035dc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d05f      	beq.n	80036a4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e007      	b.n	8003604 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f7ff fbf2 	bl	8002df8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	6938      	ldr	r0, [r7, #16]
 8003618:	f7ff fdc0 	bl	800319c <parse_value>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d042      	beq.n	80036a8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f7ff fbe8 	bl	8002df8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <parse_array+0x10e>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d207      	bcs.n	800364a <parse_array+0x10e>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b2c      	cmp	r3, #44	; 0x2c
 8003648:	d0c3      	beq.n	80035d2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d02d      	beq.n	80036ac <parse_array+0x170>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d227      	bcs.n	80036ac <parse_array+0x170>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4413      	add	r3, r2
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b5d      	cmp	r3, #93	; 0x5d
 800366a:	d11f      	bne.n	80036ac <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800366c:	e000      	b.n	8003670 <parse_array+0x134>
        goto success;
 800366e:	bf00      	nop
    input_buffer->depth--;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	1e5a      	subs	r2, r3, #1
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <parse_array+0x14a>
        head->prev = current_item;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	609a      	str	r2, [r3, #8]

    return true;
 800369c:	2301      	movs	r3, #1
 800369e:	e00d      	b.n	80036bc <parse_array+0x180>
        goto fail;
 80036a0:	bf00      	nop
 80036a2:	e004      	b.n	80036ae <parse_array+0x172>
            goto fail; /* allocation failure */
 80036a4:	bf00      	nop
 80036a6:	e002      	b.n	80036ae <parse_array+0x172>
            goto fail; /* failed to parse value */
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <parse_array+0x172>
        goto fail; /* expected end of array */
 80036ac:	bf00      	nop

fail:
    if (head != NULL)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f7fe fc8f 	bl	8001fd8 <cJSON_Delete>
    }

    return false;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <print_array+0x22>
    {
        return false;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e070      	b.n	80037c8 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80036e6:	2101      	movs	r1, #1
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f7fe fdbb 	bl	8002264 <ensure>
 80036ee:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <print_array+0x36>
    {
        return false;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e066      	b.n	80037c8 <print_array+0x104>
    }

    *output_pointer = '[';
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	225b      	movs	r2, #91	; 0x5b
 80036fe:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8003714:	e03d      	b.n	8003792 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8003716:	6839      	ldr	r1, [r7, #0]
 8003718:	6938      	ldr	r0, [r7, #16]
 800371a:	f7ff fe2b 	bl	8003374 <print_value>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <print_array+0x64>
        {
            return false;
 8003724:	2300      	movs	r3, #0
 8003726:	e04f      	b.n	80037c8 <print_array+0x104>
        }
        update_offset(output_buffer);
 8003728:	6838      	ldr	r0, [r7, #0]
 800372a:	f7fe fe35 	bl	8002398 <update_offset>
        if (current_element->next)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02a      	beq.n	800378c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <print_array+0x7e>
 800373e:	2302      	movs	r3, #2
 8003740:	e000      	b.n	8003744 <print_array+0x80>
 8003742:	2301      	movs	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3301      	adds	r3, #1
 800374a:	4619      	mov	r1, r3
 800374c:	6838      	ldr	r0, [r7, #0]
 800374e:	f7fe fd89 	bl	8002264 <ensure>
 8003752:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <print_array+0x9a>
            {
                return false;
 800375a:	2300      	movs	r3, #0
 800375c:	e034      	b.n	80037c8 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	617a      	str	r2, [r7, #20]
 8003764:	222c      	movs	r2, #44	; 0x2c
 8003766:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	617a      	str	r2, [r7, #20]
 8003776:	2220      	movs	r2, #32
 8003778:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	441a      	add	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1be      	bne.n	8003716 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8003798:	2102      	movs	r1, #2
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f7fe fd62 	bl	8002264 <ensure>
 80037a0:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <print_array+0xe8>
    {
        return false;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e00d      	b.n	80037c8 <print_array+0x104>
    }
    *output_pointer++ = ']';
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	617a      	str	r2, [r7, #20]
 80037b2:	225d      	movs	r2, #93	; 0x5d
 80037b4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	60da      	str	r2, [r3, #12]

    return true;
 80037c6:	2301      	movs	r3, #1
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ea:	d301      	bcc.n	80037f0 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80037ec:	2300      	movs	r3, #0
 80037ee:	e0f7      	b.n	80039e0 <parse_object+0x210>
    }
    input_buffer->depth++;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80db 	beq.w	80039b8 <parse_object+0x1e8>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	f080 80d4 	bcs.w	80039b8 <parse_object+0x1e8>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4413      	add	r3, r2
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b7b      	cmp	r3, #123	; 0x7b
 800381e:	f040 80cb 	bne.w	80039b8 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f7ff fae3 	bl	8002df8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <parse_object+0x86>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d208      	bcs.n	8003856 <parse_object+0x86>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b7d      	cmp	r3, #125	; 0x7d
 8003852:	f000 8098 	beq.w	8003986 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <parse_object+0x98>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d305      	bcc.n	8003874 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	609a      	str	r2, [r3, #8]
        goto fail;
 8003872:	e0ae      	b.n	80039d2 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	3310      	adds	r3, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fb92 	bl	8001fac <cJSON_New_Item>
 8003888:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8095 	beq.w	80039bc <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e007      	b.n	80038b2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8083 	beq.w	80039c0 <parse_object+0x1f0>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d27b      	bcs.n	80039c0 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80038d2:	6838      	ldr	r0, [r7, #0]
 80038d4:	f7ff fa90 	bl	8002df8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6938      	ldr	r0, [r7, #16]
 80038dc:	f7ff f804 	bl	80028e8 <parse_string>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d06e      	beq.n	80039c4 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	f7ff fa86 	bl	8002df8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d063      	beq.n	80039c8 <parse_object+0x1f8>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d25d      	bcs.n	80039c8 <parse_object+0x1f8>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4413      	add	r3, r2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b3a      	cmp	r3, #58	; 0x3a
 800391a:	d155      	bne.n	80039c8 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f7ff fa66 	bl	8002df8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	6938      	ldr	r0, [r7, #16]
 8003930:	f7ff fc34 	bl	800319c <parse_value>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d048      	beq.n	80039cc <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f7ff fa5c 	bl	8002df8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <parse_object+0x192>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	429a      	cmp	r2, r3
 8003950:	d207      	bcs.n	8003962 <parse_object+0x192>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b2c      	cmp	r3, #44	; 0x2c
 8003960:	d08d      	beq.n	800387e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d033      	beq.n	80039d0 <parse_object+0x200>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	d22d      	bcs.n	80039d0 <parse_object+0x200>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b7d      	cmp	r3, #125	; 0x7d
 8003982:	d125      	bne.n	80039d0 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8003984:	e000      	b.n	8003988 <parse_object+0x1b8>
        goto success; /* empty object */
 8003986:	bf00      	nop
    input_buffer->depth--;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <parse_object+0x1ce>
        head->prev = current_item;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	60da      	str	r2, [r3, #12]
    item->child = head;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	609a      	str	r2, [r3, #8]
    return true;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e013      	b.n	80039e0 <parse_object+0x210>
        goto fail; /* not an object */
 80039b8:	bf00      	nop
 80039ba:	e00a      	b.n	80039d2 <parse_object+0x202>
            goto fail; /* allocation failure */
 80039bc:	bf00      	nop
 80039be:	e008      	b.n	80039d2 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 80039c0:	bf00      	nop
 80039c2:	e006      	b.n	80039d2 <parse_object+0x202>
            goto fail; /* failed to parse name */
 80039c4:	bf00      	nop
 80039c6:	e004      	b.n	80039d2 <parse_object+0x202>
            goto fail; /* invalid object */
 80039c8:	bf00      	nop
 80039ca:	e002      	b.n	80039d2 <parse_object+0x202>
            goto fail; /* failed to parse value */
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <parse_object+0x202>
        goto fail; /* expected end of object */
 80039d0:	bf00      	nop

fail:
    if (head != NULL)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <parse_object+0x20e>
    {
        cJSON_Delete(head);
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f7fe fafd 	bl	8001fd8 <cJSON_Delete>
    }

    return false;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <print_object+0x22>
    {
        return false;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e108      	b.n	8003c1c <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <print_object+0x2e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e000      	b.n	8003a18 <print_object+0x30>
 8003a16:	2301      	movs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6838      	ldr	r0, [r7, #0]
 8003a22:	f7fe fc1f 	bl	8002264 <ensure>
 8003a26:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <print_object+0x4a>
    {
        return false;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e0f4      	b.n	8003c1c <print_object+0x234>
    }

    *output_pointer++ = '{';
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	61fa      	str	r2, [r7, #28]
 8003a38:	227b      	movs	r2, #123	; 0x7b
 8003a3a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	61fa      	str	r2, [r7, #28]
 8003a54:	220a      	movs	r2, #10
 8003a56:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	441a      	add	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	609a      	str	r2, [r3, #8]

    while (current_item)
 8003a64:	e0a0      	b.n	8003ba8 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d022      	beq.n	8003ab4 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4619      	mov	r1, r3
 8003a74:	6838      	ldr	r0, [r7, #0]
 8003a76:	f7fe fbf5 	bl	8002264 <ensure>
 8003a7a:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <print_object+0x9e>
            {
                return false;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e0ca      	b.n	8003c1c <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e007      	b.n	8003a9c <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	61fa      	str	r2, [r7, #28]
 8003a92:	2209      	movs	r2, #9
 8003a94:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3f2      	bcc.n	8003a8c <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	441a      	add	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f85c 	bl	8002b78 <print_string_ptr>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <print_object+0xe2>
        {
            return false;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e0a8      	b.n	8003c1c <print_object+0x234>
        }
        update_offset(output_buffer);
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f7fe fc64 	bl	8002398 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <print_object+0xf4>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e000      	b.n	8003ade <print_object+0xf6>
 8003adc:	2301      	movs	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	f7fe fbbe 	bl	8002264 <ensure>
 8003ae8:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <print_object+0x10c>
        {
            return false;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e093      	b.n	8003c1c <print_object+0x234>
        }
        *output_pointer++ = ':';
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	223a      	movs	r2, #58	; 0x3a
 8003afc:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	61fa      	str	r2, [r7, #28]
 8003b0c:	2209      	movs	r2, #9
 8003b0e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	441a      	add	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8003b1c:	6839      	ldr	r1, [r7, #0]
 8003b1e:	69b8      	ldr	r0, [r7, #24]
 8003b20:	f7ff fc28 	bl	8003374 <print_value>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <print_object+0x146>
        {
            return false;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e076      	b.n	8003c1c <print_object+0x234>
        }
        update_offset(output_buffer);
 8003b2e:	6838      	ldr	r0, [r7, #0]
 8003b30:	f7fe fc32 	bl	8002398 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <print_object+0x158>
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	e000      	b.n	8003b42 <print_object+0x15a>
 8003b40:	2200      	movs	r2, #0
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <print_object+0x166>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <print_object+0x168>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	4413      	add	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	f7fe fb82 	bl	8002264 <ensure>
 8003b60:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <print_object+0x184>
        {
            return false;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e057      	b.n	8003c1c <print_object+0x234>
        }
        if (current_item->next)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <print_object+0x196>
        {
            *output_pointer++ = ',';
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	222c      	movs	r2, #44	; 0x2c
 8003b7c:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	61fa      	str	r2, [r7, #28]
 8003b8c:	220a      	movs	r2, #10
 8003b8e:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f47f af5b 	bne.w	8003a66 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <print_object+0x1d8>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <print_object+0x1da>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6838      	ldr	r0, [r7, #0]
 8003bc6:	f7fe fb4d 	bl	8002264 <ensure>
 8003bca:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <print_object+0x1ee>
    {
        return false;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e022      	b.n	8003c1c <print_object+0x234>
    }
    if (output_buffer->format)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d010      	beq.n	8003c00 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e007      	b.n	8003bf4 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	61fa      	str	r2, [r7, #28]
 8003bea:	2209      	movs	r2, #9
 8003bec:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3f1      	bcc.n	8003be4 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	61fa      	str	r2, [r7, #28]
 8003c06:	227d      	movs	r2, #125	; 0x7d
 8003c08:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	60da      	str	r2, [r3, #12]

    return true;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <get_object_item+0x1c>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <get_object_item+0x20>
    {
        return NULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e033      	b.n	8003cac <get_object_item+0x88>
    }

    current_element = object->child;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d017      	beq.n	8003c80 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003c50:	e002      	b.n	8003c58 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01c      	beq.n	8003c98 <get_object_item+0x74>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <get_object_item+0x74>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68b8      	ldr	r0, [r7, #8]
 8003c6e:	f7fc fa7f 	bl	8000170 <strcmp>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ec      	bne.n	8003c52 <get_object_item+0x2e>
 8003c78:	e00e      	b.n	8003c98 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <get_object_item+0x74>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68b8      	ldr	r0, [r7, #8]
 8003c8e:	f7fe f8f9 	bl	8001e84 <case_insensitive_strcmp>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <get_object_item+0x82>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <get_object_item+0x86>
        return NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <get_object_item+0x88>
    }

    return current_element;
 8003caa:	697b      	ldr	r3, [r7, #20]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ffae 	bl	8003c24 <get_object_item>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <add_item_to_array+0x22>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <add_item_to_array+0x22>
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d101      	bne.n	8003d18 <add_item_to_array+0x26>
    {
        return false;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e01e      	b.n	8003d56 <add_item_to_array+0x64>
    }

    child = array->child;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e00d      	b.n	8003d54 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ffc3 	bl	8003cd2 <suffix_object>
            array->child->prev = item;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8003d54:	2301      	movs	r3, #1
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8003d66:	687b      	ldr	r3, [r7, #4]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <add_item_to_object+0x30>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <add_item_to_object+0x30>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <add_item_to_object+0x30>
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d101      	bne.n	8003da6 <add_item_to_object+0x34>
    {
        return false;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e036      	b.n	8003e14 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8003dac:	68b8      	ldr	r0, [r7, #8]
 8003dae:	f7ff ffd6 	bl	8003d5e <cast_away_const>
 8003db2:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e00e      	b.n	8003dde <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	68b8      	ldr	r0, [r7, #8]
 8003dc4:	f7fe f8ca 	bl	8001f5c <cJSON_strdup>
 8003dc8:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <add_item_to_object+0x62>
        {
            return false;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e01f      	b.n	8003e14 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ddc:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <add_item_to_object+0x8c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6a12      	ldr	r2, [r2, #32]
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4798      	blx	r3
    }

    item->string = new_key;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff ff70 	bl	8003cf2 <add_item_to_array>
 8003e12:	4603      	mov	r3, r0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <cJSON_AddStringToObject>:
    cJSON_Delete(number_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f819 	bl	8003e60 <cJSON_CreateString>
 8003e2e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8003e30:	2300      	movs	r3, #0
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <cJSON_AddStringToObject+0x40>)
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff ff99 	bl	8003d72 <add_item_to_object>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e003      	b.n	8003e52 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7fe f8c4 	bl	8001fd8 <cJSON_Delete>
    return NULL;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000000 	.word	0x20000000

08003e60 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003e68:	480f      	ldr	r0, [pc, #60]	; (8003ea8 <cJSON_CreateString+0x48>)
 8003e6a:	f7fe f89f 	bl	8001fac <cJSON_New_Item>
 8003e6e:	60f8      	str	r0, [r7, #12]
    if(item)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8003e7c:	490a      	ldr	r1, [pc, #40]	; (8003ea8 <cJSON_CreateString+0x48>)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe f86c 	bl	8001f5c <cJSON_strdup>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7fe f8a0 	bl	8001fd8 <cJSON_Delete>
            return NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000

08003eac <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003eb2:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <cJSON_CreateObject+0x24>)
 8003eb4:	f7fe f87a 	bl	8001fac <cJSON_New_Item>
 8003eb8:	6078      	str	r0, [r7, #4]
    if (item)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2240      	movs	r2, #64	; 0x40
 8003ec4:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003ec6:	687b      	ldr	r3, [r7, #4]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000000 	.word	0x20000000

08003ed4 <main>:
char* IntToStr(u8 data) ;
unsigned int string_to_unsigned_int(char *str) ;


int main(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8003eda:	f7fd f8c5 	bl	8001068 <RCC_voidInitSysClock>
	MSTK_voidClkSrcInit();
 8003ede:	f7fd f9fd 	bl	80012dc <MSTK_voidClkSrcInit>
	RCC_voidEnableClock(RCC_GPIOA,RCC_APB2);
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f7fd f8d5 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_GPIOB,RCC_APB2);
 8003eea:	2102      	movs	r1, #2
 8003eec:	2003      	movs	r0, #3
 8003eee:	f7fd f8d1 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_GPIOC,RCC_APB2);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	2004      	movs	r0, #4
 8003ef6:	f7fd f8cd 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_ADC1, RCC_APB2);
 8003efa:	2102      	movs	r1, #2
 8003efc:	2009      	movs	r0, #9
 8003efe:	f7fd f8c9 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_TIM2, RCC_APB1);
 8003f02:	2101      	movs	r1, #1
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fd f8c5 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_TIM3, RCC_APB1);
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f7fd f8c1 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_AFIO, RCC_APB2);
 8003f12:	2102      	movs	r1, #2
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7fd f8bd 	bl	8001094 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_USART1, RCC_APB2);
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	200e      	movs	r0, #14
 8003f1e:	f7fd f8b9 	bl	8001094 <RCC_voidEnableClock>

	PORT_voidInit();
 8003f22:	f7fd f8f9 	bl	8001118 <PORT_voidInit>
	MTIM2_voidInit();
 8003f26:	f7fd faf1 	bl	800150c <MTIM2_voidInit>
	MTIM3_voidInit();
 8003f2a:	f7fd fb2b 	bl	8001584 <MTIM3_voidInit>


	USART_config_t usart={
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <main+0xa8>)
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.USART_DataLength=USART_Data8Bits,
			.USART_StopBits= USART_1StopBits,
			.USART_Parity=USART_EvenParity,
			.USART_ParityCheck = USART_ParityCheckDisabled};

	USART_voidInit(&usart);
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fbde 	bl	80016fc <USART_voidInit>

	ADC1_voidSingleChannelInit(0);
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7fd fd8b 	bl	8001a5c <ADC1_voidSingleChannelInit>

	OS_CreateTask(0, 500, send_and_parse_json, 0);
 8003f46:	2300      	movs	r3, #0
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <main+0xac>)
 8003f4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f4e:	2000      	movs	r0, #0
 8003f50:	f7fd fe3a 	bl	8001bc8 <OS_CreateTask>
	OS_CreateTask(1,5000,ReadTemp,500);
 8003f54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <main+0xb0>)
 8003f5a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f7fd fe32 	bl	8001bc8 <OS_CreateTask>
	OS_CreateTask(2,2000,ReadLight,1000);
 8003f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f68:	4a07      	ldr	r2, [pc, #28]	; (8003f88 <main+0xb4>)
 8003f6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f6e:	2002      	movs	r0, #2
 8003f70:	f7fd fe2a 	bl	8001bc8 <OS_CreateTask>
	OS_voidStart();
 8003f74:	f7fd fe58 	bl	8001c28 <OS_voidStart>
	while(1)
 8003f78:	e7fe      	b.n	8003f78 <main+0xa4>
 8003f7a:	bf00      	nop
 8003f7c:	080081a4 	.word	0x080081a4
 8003f80:	080040ad 	.word	0x080040ad
 8003f84:	08003f8d 	.word	0x08003f8d
 8003f88:	08003fd5 	.word	0x08003fd5

08003f8c <ReadTemp>:
}



void ReadTemp(void)
{
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
	if(TEMP_ENA)
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <ReadTemp+0x3c>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d014      	beq.n	8003fc2 <ReadTemp+0x36>
		reply_json_data(NS, TEMP, IntToStr(HTEMP_f32GetTemp()));
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <ReadTemp+0x40>)
 8003f9a:	681c      	ldr	r4, [r3, #0]
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <ReadTemp+0x44>)
 8003f9e:	681d      	ldr	r5, [r3, #0]
 8003fa0:	f7fd fece 	bl	8001d40 <HTEMP_f32GetTemp>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd f806 	bl	8000fb8 <__aeabi_f2uiz>
 8003fac:	4603      	mov	r3, r0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fa33 	bl	800441c <IntToStr>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f000 f82d 	bl	800401c <reply_json_data>
}
 8003fc2:	bf00      	nop
 8003fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000029c 	.word	0x2000029c
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	20000014 	.word	0x20000014

08003fd4 <ReadLight>:
void ReadLight(void)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
	if(LIGHT_ENA)
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <ReadLight+0x3c>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d014      	beq.n	800400a <ReadLight+0x36>
		reply_json_data(NS, LIGHT, IntToStr(HLDR_f32GetReading()));
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <ReadLight+0x40>)
 8003fe2:	681c      	ldr	r4, [r3, #0]
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <ReadLight+0x44>)
 8003fe6:	685d      	ldr	r5, [r3, #4]
 8003fe8:	f7fd fee0 	bl	8001dac <HLDR_f32GetReading>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc ffe2 	bl	8000fb8 <__aeabi_f2uiz>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fa0f 	bl	800441c <IntToStr>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	4629      	mov	r1, r5
 8004004:	4620      	mov	r0, r4
 8004006:	f000 f809 	bl	800401c <reply_json_data>
}
 800400a:	bf00      	nop
 800400c:	bdb0      	pop	{r4, r5, r7, pc}
 800400e:	bf00      	nop
 8004010:	2000029d 	.word	0x2000029d
 8004014:	2000000c 	.word	0x2000000c
 8004018:	20000014 	.word	0x20000014

0800401c <reply_json_data>:
void reply_json_data(char *copy_nodeType,char *copy_nodeID, char *copy_data)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
	cJSON *json = cJSON_CreateObject();
 8004028:	f7ff ff40 	bl	8003eac <cJSON_CreateObject>
 800402c:	6178      	str	r0, [r7, #20]
	if (!json) {
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <reply_json_data+0x22>
		USART_voidSendString("Error: Failed to create JSON object!\n", USART1);
 8004034:	2100      	movs	r1, #0
 8004036:	4818      	ldr	r0, [pc, #96]	; (8004098 <reply_json_data+0x7c>)
 8004038:	f7fd fcf4 	bl	8001a24 <USART_voidSendString>
		return;
 800403c:	e029      	b.n	8004092 <reply_json_data+0x76>
	}


	cJSON_AddStringToObject(json, "nodeType", copy_nodeType);
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4916      	ldr	r1, [pc, #88]	; (800409c <reply_json_data+0x80>)
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7ff feea 	bl	8003e1c <cJSON_AddStringToObject>
	cJSON_AddStringToObject(json, "nodeID", copy_nodeID);
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	4915      	ldr	r1, [pc, #84]	; (80040a0 <reply_json_data+0x84>)
 800404c:	6978      	ldr	r0, [r7, #20]
 800404e:	f7ff fee5 	bl	8003e1c <cJSON_AddStringToObject>
	cJSON_AddStringToObject(json, "data", copy_data);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4913      	ldr	r1, [pc, #76]	; (80040a4 <reply_json_data+0x88>)
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff fee0 	bl	8003e1c <cJSON_AddStringToObject>

	char *json_string = cJSON_PrintUnformatted(json); // Smaller JSON string
 800405c:	6978      	ldr	r0, [r7, #20]
 800405e:	f7ff f88d 	bl	800317c <cJSON_PrintUnformatted>
 8004062:	6138      	str	r0, [r7, #16]
	if (json_string) {
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <reply_json_data+0x68>
		USART_voidSendString(json_string, USART1);
 800406a:	2100      	movs	r1, #0
 800406c:	6938      	ldr	r0, [r7, #16]
 800406e:	f7fd fcd9 	bl	8001a24 <USART_voidSendString>
		USART_voidTransmitByteSynch('\r', USART1);
 8004072:	2100      	movs	r1, #0
 8004074:	200d      	movs	r0, #13
 8004076:	f7fd fc7f 	bl	8001978 <USART_voidTransmitByteSynch>
		USART_voidTransmitByteSynch('\n', USART1);
 800407a:	2100      	movs	r1, #0
 800407c:	200a      	movs	r0, #10
 800407e:	f7fd fc7b 	bl	8001978 <USART_voidTransmitByteSynch>
 8004082:	e003      	b.n	800408c <reply_json_data+0x70>
	} else {
		USART_voidSendString("Error: Failed to create JSON string!\n", USART1);
 8004084:	2100      	movs	r1, #0
 8004086:	4808      	ldr	r0, [pc, #32]	; (80040a8 <reply_json_data+0x8c>)
 8004088:	f7fd fccc 	bl	8001a24 <USART_voidSendString>
	}

	cJSON_Delete(json);
 800408c:	6978      	ldr	r0, [r7, #20]
 800408e:	f7fd ffa3 	bl	8001fd8 <cJSON_Delete>
}
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	080081b0 	.word	0x080081b0
 800409c:	080081d8 	.word	0x080081d8
 80040a0:	080081e4 	.word	0x080081e4
 80040a4:	080081ec 	.word	0x080081ec
 80040a8:	080081f4 	.word	0x080081f4

080040ac <send_and_parse_json>:

void send_and_parse_json() {
 80040ac:	b5b0      	push	{r4, r5, r7, lr}
 80040ae:	b0a0      	sub	sp, #128	; 0x80
 80040b0:	af00      	add	r7, sp, #0
	char received_json[100];  // Buffer to hold received JSON string
	char ch;
	int i = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Receive JSON string
	while (1) {
		ch = USART_voidReceiveByteSynch(USART1);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fd fc8a 	bl	80019d0 <USART_voidReceiveByteSynch>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		USART_voidTransmitByteSynch(ch, USART1);  // display
 80040c2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fc55 	bl	8001978 <USART_voidTransmitByteSynch>
		if (ch == '\n' || ch == '\r') {          // Stop at newline or carriage return
 80040ce:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80040d2:	2b0a      	cmp	r3, #10
 80040d4:	d003      	beq.n	80040de <send_and_parse_json+0x32>
 80040d6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80040da:	2b0d      	cmp	r3, #13
 80040dc:	d10e      	bne.n	80040fc <send_and_parse_json+0x50>
			received_json[i] = '\0';             // Null-terminate
 80040de:	463a      	mov	r2, r7
 80040e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040e2:	4413      	add	r3, r2
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
			break;
 80040e8:	bf00      	nop
		}
	}


	// Parse JSON
	cJSON *json = cJSON_Parse(received_json);
 80040ea:	463b      	mov	r3, r7
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe ffad 	bl	800304c <cJSON_Parse>
 80040f2:	6778      	str	r0, [r7, #116]	; 0x74
	if (json == NULL) {
 80040f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d130      	bne.n	800415c <send_and_parse_json+0xb0>
 80040fa:	e010      	b.n	800411e <send_and_parse_json+0x72>
		received_json[i++] = ch;
 80040fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004102:	3380      	adds	r3, #128	; 0x80
 8004104:	443b      	add	r3, r7
 8004106:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 800410a:	f803 2c80 	strb.w	r2, [r3, #-128]
		if (i >= sizeof(received_json) - 1) {    // Prevent buffer overflow
 800410e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004110:	2b62      	cmp	r3, #98	; 0x62
 8004112:	d9d0      	bls.n	80040b6 <send_and_parse_json+0xa>
			USART_voidSendString("Error: JSON too long!\n", USART1);
 8004114:	2100      	movs	r1, #0
 8004116:	480e      	ldr	r0, [pc, #56]	; (8004150 <send_and_parse_json+0xa4>)
 8004118:	f7fd fc84 	bl	8001a24 <USART_voidSendString>
			return;
 800411c:	e15c      	b.n	80043d8 <send_and_parse_json+0x32c>
		const char *error_ptr = cJSON_GetErrorPtr();
 800411e:	f7fd fea3 	bl	8001e68 <cJSON_GetErrorPtr>
 8004122:	6678      	str	r0, [r7, #100]	; 0x64
		if (error_ptr != NULL) {
 8004124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <send_and_parse_json+0x98>
			USART_voidSendString("Parse error before: ", USART1);
 800412a:	2100      	movs	r1, #0
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <send_and_parse_json+0xa8>)
 800412e:	f7fd fc79 	bl	8001a24 <USART_voidSendString>
			USART_voidSendString(error_ptr, USART1);
 8004132:	2100      	movs	r1, #0
 8004134:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004136:	f7fd fc75 	bl	8001a24 <USART_voidSendString>
			USART_voidTransmitByteSynch('\r', USART1);
 800413a:	2100      	movs	r1, #0
 800413c:	200d      	movs	r0, #13
 800413e:	f7fd fc1b 	bl	8001978 <USART_voidTransmitByteSynch>
		} else {
			USART_voidSendString("JSON Parse failed!\n", USART1);
		}
		return;
 8004142:	e149      	b.n	80043d8 <send_and_parse_json+0x32c>
			USART_voidSendString("JSON Parse failed!\n", USART1);
 8004144:	2100      	movs	r1, #0
 8004146:	4804      	ldr	r0, [pc, #16]	; (8004158 <send_and_parse_json+0xac>)
 8004148:	f7fd fc6c 	bl	8001a24 <USART_voidSendString>
		return;
 800414c:	e144      	b.n	80043d8 <send_and_parse_json+0x32c>
 800414e:	bf00      	nop
 8004150:	0800821c 	.word	0x0800821c
 8004154:	08008234 	.word	0x08008234
 8004158:	0800824c 	.word	0x0800824c
	}

	// Extract and print JSON values
	cJSON *command = cJSON_GetObjectItem(json, "command");
 800415c:	49a0      	ldr	r1, [pc, #640]	; (80043e0 <send_and_parse_json+0x334>)
 800415e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004160:	f7ff fda8 	bl	8003cb4 <cJSON_GetObjectItem>
 8004164:	6738      	str	r0, [r7, #112]	; 0x70
	cJSON *nodeID = cJSON_GetObjectItem(json, "nodeID");
 8004166:	499f      	ldr	r1, [pc, #636]	; (80043e4 <send_and_parse_json+0x338>)
 8004168:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800416a:	f7ff fda3 	bl	8003cb4 <cJSON_GetObjectItem>
 800416e:	66f8      	str	r0, [r7, #108]	; 0x6c
	cJSON *data = cJSON_GetObjectItem(json, "data");
 8004170:	499d      	ldr	r1, [pc, #628]	; (80043e8 <send_and_parse_json+0x33c>)
 8004172:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004174:	f7ff fd9e 	bl	8003cb4 <cJSON_GetObjectItem>
 8004178:	66b8      	str	r0, [r7, #104]	; 0x68

	/*RELAY*/
	if((strcmp(command->valuestring ,"ENA")==0)&&(strcmp(nodeID->valuestring ,RELAY)==0)&&(strcmp(data->valuestring ,"NULL")==0))
 800417a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	499b      	ldr	r1, [pc, #620]	; (80043ec <send_and_parse_json+0x340>)
 8004180:	4618      	mov	r0, r3
 8004182:	f7fb fff5 	bl	8000170 <strcmp>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11b      	bne.n	80041c4 <send_and_parse_json+0x118>
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a97      	ldr	r2, [pc, #604]	; (80043f0 <send_and_parse_json+0x344>)
 8004192:	6892      	ldr	r2, [r2, #8]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f7fb ffea 	bl	8000170 <strcmp>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <send_and_parse_json+0x118>
 80041a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	4993      	ldr	r1, [pc, #588]	; (80043f4 <send_and_parse_json+0x348>)
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fb ffe1 	bl	8000170 <strcmp>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <send_and_parse_json+0x118>
	{
		reply_json_data(NS, RELAY, "DONE");
 80041b4:	4b90      	ldr	r3, [pc, #576]	; (80043f8 <send_and_parse_json+0x34c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a8d      	ldr	r2, [pc, #564]	; (80043f0 <send_and_parse_json+0x344>)
 80041ba:	6891      	ldr	r1, [r2, #8]
 80041bc:	4a8f      	ldr	r2, [pc, #572]	; (80043fc <send_and_parse_json+0x350>)
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff2c 	bl	800401c <reply_json_data>
	}
	if((strcmp(command->valuestring ,"ACT")==0)&&(strcmp(nodeID->valuestring ,RELAY)==0)&&(strcmp(data->valuestring ,"1")==0))
 80041c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	498d      	ldr	r1, [pc, #564]	; (8004400 <send_and_parse_json+0x354>)
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fb ffd0 	bl	8000170 <strcmp>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d115      	bne.n	8004202 <send_and_parse_json+0x156>
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	4a85      	ldr	r2, [pc, #532]	; (80043f0 <send_and_parse_json+0x344>)
 80041dc:	6892      	ldr	r2, [r2, #8]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fb ffc5 	bl	8000170 <strcmp>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <send_and_parse_json+0x156>
 80041ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	4984      	ldr	r1, [pc, #528]	; (8004404 <send_and_parse_json+0x358>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fb ffbc 	bl	8000170 <strcmp>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <send_and_parse_json+0x156>
	{
		HRELAY_voidON();
 80041fe:	f7fd fe0b 	bl	8001e18 <HRELAY_voidON>
	}
	if((strcmp(command->valuestring ,"ACT")==0)&&(strcmp(nodeID->valuestring ,RELAY)==0)&&(strcmp(data->valuestring ,"0")==0))
 8004202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	497e      	ldr	r1, [pc, #504]	; (8004400 <send_and_parse_json+0x354>)
 8004208:	4618      	mov	r0, r3
 800420a:	f7fb ffb1 	bl	8000170 <strcmp>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d115      	bne.n	8004240 <send_and_parse_json+0x194>
 8004214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4a75      	ldr	r2, [pc, #468]	; (80043f0 <send_and_parse_json+0x344>)
 800421a:	6892      	ldr	r2, [r2, #8]
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f7fb ffa6 	bl	8000170 <strcmp>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <send_and_parse_json+0x194>
 800422a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	4976      	ldr	r1, [pc, #472]	; (8004408 <send_and_parse_json+0x35c>)
 8004230:	4618      	mov	r0, r3
 8004232:	f7fb ff9d 	bl	8000170 <strcmp>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <send_and_parse_json+0x194>
	{
		HRELAY_voidOFF();
 800423c:	f7fd fdf5 	bl	8001e2a <HRELAY_voidOFF>
	}
	if((strcmp(command->valuestring ,"STA")==0)&&(strcmp(nodeID->valuestring ,RELAY)==0)&&(strcmp(data->valuestring ,"NULL")==0))
 8004240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	4971      	ldr	r1, [pc, #452]	; (800440c <send_and_parse_json+0x360>)
 8004246:	4618      	mov	r0, r3
 8004248:	f7fb ff92 	bl	8000170 <strcmp>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d123      	bne.n	800429a <send_and_parse_json+0x1ee>
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	4a66      	ldr	r2, [pc, #408]	; (80043f0 <send_and_parse_json+0x344>)
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f7fb ff87 	bl	8000170 <strcmp>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d118      	bne.n	800429a <send_and_parse_json+0x1ee>
 8004268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	4961      	ldr	r1, [pc, #388]	; (80043f4 <send_and_parse_json+0x348>)
 800426e:	4618      	mov	r0, r3
 8004270:	f7fb ff7e 	bl	8000170 <strcmp>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <send_and_parse_json+0x1ee>
	{
		reply_json_data(NA, RELAY, IntToStr(HRELAY_u8LastStatus()));
 800427a:	4b5f      	ldr	r3, [pc, #380]	; (80043f8 <send_and_parse_json+0x34c>)
 800427c:	685c      	ldr	r4, [r3, #4]
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <send_and_parse_json+0x344>)
 8004280:	689d      	ldr	r5, [r3, #8]
 8004282:	f7fd fddb 	bl	8001e3c <HRELAY_u8LastStatus>
 8004286:	4603      	mov	r3, r0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f8c7 	bl	800441c <IntToStr>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	4629      	mov	r1, r5
 8004294:	4620      	mov	r0, r4
 8004296:	f7ff fec1 	bl	800401c <reply_json_data>
	}

	/*Temp*/
	if((strcmp(command->valuestring ,"ENA")==0)&&(strcmp(nodeID->valuestring ,TEMP)==0)&&(strcmp(data->valuestring ,"NULL")==0))
 800429a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	4953      	ldr	r1, [pc, #332]	; (80043ec <send_and_parse_json+0x340>)
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fb ff65 	bl	8000170 <strcmp>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11e      	bne.n	80042ea <send_and_parse_json+0x23e>
 80042ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4a4f      	ldr	r2, [pc, #316]	; (80043f0 <send_and_parse_json+0x344>)
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fb ff5a 	bl	8000170 <strcmp>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <send_and_parse_json+0x23e>
 80042c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	494b      	ldr	r1, [pc, #300]	; (80043f4 <send_and_parse_json+0x348>)
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fb ff51 	bl	8000170 <strcmp>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <send_and_parse_json+0x23e>
	{
		TEMP_ENA = 1 ;
 80042d4:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <send_and_parse_json+0x364>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
		reply_json_data(NS, TEMP, "DONE");
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <send_and_parse_json+0x34c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a44      	ldr	r2, [pc, #272]	; (80043f0 <send_and_parse_json+0x344>)
 80042e0:	6811      	ldr	r1, [r2, #0]
 80042e2:	4a46      	ldr	r2, [pc, #280]	; (80043fc <send_and_parse_json+0x350>)
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fe99 	bl	800401c <reply_json_data>
	}
	if((strcmp(command->valuestring ,"DUR")==0)&&(strcmp(nodeID->valuestring ,TEMP)==0))
 80042ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4949      	ldr	r1, [pc, #292]	; (8004414 <send_and_parse_json+0x368>)
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fb ff3d 	bl	8000170 <strcmp>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11c      	bne.n	8004336 <send_and_parse_json+0x28a>
 80042fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <send_and_parse_json+0x344>)
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fb ff32 	bl	8000170 <strcmp>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d111      	bne.n	8004336 <send_and_parse_json+0x28a>
	{
		OS_voidModifyPeriodictyTask(TEMP_ID, string_to_unsigned_int(data->valuestring)*1000);
 8004312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f894 	bl	8004444 <string_to_unsigned_int>
 800431c:	4603      	mov	r3, r0
 800431e:	b29b      	uxth	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	0152      	lsls	r2, r2, #5
 8004324:	1ad2      	subs	r2, r2, r3
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	b29b      	uxth	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	2001      	movs	r0, #1
 8004332:	f7fd fc89 	bl	8001c48 <OS_voidModifyPeriodictyTask>
	}


	/*Light*/
	if((strcmp(command->valuestring ,"ENA")==0)&&(strcmp(nodeID->valuestring ,LIGHT)==0)&&(strcmp(data->valuestring ,"NULL")==0))
 8004336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	492c      	ldr	r1, [pc, #176]	; (80043ec <send_and_parse_json+0x340>)
 800433c:	4618      	mov	r0, r3
 800433e:	f7fb ff17 	bl	8000170 <strcmp>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11e      	bne.n	8004386 <send_and_parse_json+0x2da>
 8004348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <send_and_parse_json+0x344>)
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f7fb ff0c 	bl	8000170 <strcmp>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d113      	bne.n	8004386 <send_and_parse_json+0x2da>
 800435e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4924      	ldr	r1, [pc, #144]	; (80043f4 <send_and_parse_json+0x348>)
 8004364:	4618      	mov	r0, r3
 8004366:	f7fb ff03 	bl	8000170 <strcmp>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <send_and_parse_json+0x2da>
	{
		LIGHT_ENA = 1 ;
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <send_and_parse_json+0x36c>)
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
		reply_json_data(NS, LIGHT, "DONE");
 8004376:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <send_and_parse_json+0x34c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <send_and_parse_json+0x344>)
 800437c:	6851      	ldr	r1, [r2, #4]
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <send_and_parse_json+0x350>)
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fe4b 	bl	800401c <reply_json_data>
	}
	if((strcmp(command->valuestring ,"DUR")==0)&&(strcmp(nodeID->valuestring ,LIGHT)==0))
 8004386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4922      	ldr	r1, [pc, #136]	; (8004414 <send_and_parse_json+0x368>)
 800438c:	4618      	mov	r0, r3
 800438e:	f7fb feef 	bl	8000170 <strcmp>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d11c      	bne.n	80043d2 <send_and_parse_json+0x326>
 8004398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <send_and_parse_json+0x344>)
 800439e:	6852      	ldr	r2, [r2, #4]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fb fee4 	bl	8000170 <strcmp>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d111      	bne.n	80043d2 <send_and_parse_json+0x326>
	{
		OS_voidModifyPeriodictyTask(LIGHT_ID, string_to_unsigned_int(data->valuestring)*1000);
 80043ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f846 	bl	8004444 <string_to_unsigned_int>
 80043b8:	4603      	mov	r3, r0
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	0152      	lsls	r2, r2, #5
 80043c0:	1ad2      	subs	r2, r2, r3
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	4619      	mov	r1, r3
 80043cc:	2002      	movs	r0, #2
 80043ce:	f7fd fc3b 	bl	8001c48 <OS_voidModifyPeriodictyTask>
	}


	cJSON_Delete(json);
 80043d2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80043d4:	f7fd fe00 	bl	8001fd8 <cJSON_Delete>
}
 80043d8:	3780      	adds	r7, #128	; 0x80
 80043da:	46bd      	mov	sp, r7
 80043dc:	bdb0      	pop	{r4, r5, r7, pc}
 80043de:	bf00      	nop
 80043e0:	08008260 	.word	0x08008260
 80043e4:	080081e4 	.word	0x080081e4
 80043e8:	080081ec 	.word	0x080081ec
 80043ec:	08008268 	.word	0x08008268
 80043f0:	20000014 	.word	0x20000014
 80043f4:	0800826c 	.word	0x0800826c
 80043f8:	2000000c 	.word	0x2000000c
 80043fc:	08008274 	.word	0x08008274
 8004400:	0800827c 	.word	0x0800827c
 8004404:	08008280 	.word	0x08008280
 8004408:	08008284 	.word	0x08008284
 800440c:	08008288 	.word	0x08008288
 8004410:	2000029c 	.word	0x2000029c
 8004414:	0800828c 	.word	0x0800828c
 8004418:	2000029d 	.word	0x2000029d

0800441c <IntToStr>:




char* IntToStr(u8 data)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
	static char intString[12]; // Static buffer for the string
	sprintf(intString, "%u", data);
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	461a      	mov	r2, r3
 800442a:	4904      	ldr	r1, [pc, #16]	; (800443c <IntToStr+0x20>)
 800442c:	4804      	ldr	r0, [pc, #16]	; (8004440 <IntToStr+0x24>)
 800442e:	f000 fa6b 	bl	8004908 <siprintf>
	return intString;
 8004432:	4b03      	ldr	r3, [pc, #12]	; (8004440 <IntToStr+0x24>)
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	08008290 	.word	0x08008290
 8004440:	200002a0 	.word	0x200002a0

08004444 <string_to_unsigned_int>:


unsigned int string_to_unsigned_int(char *str) {
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	unsigned int result = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]

	// Loop through each character of the string
	for (; str[i] != '\0'; i++) {
 8004454:	e01d      	b.n	8004492 <string_to_unsigned_int+0x4e>
		if (str[i] < '0' || str[i] > '9') {
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b2f      	cmp	r3, #47	; 0x2f
 8004460:	d905      	bls.n	800446e <string_to_unsigned_int+0x2a>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b39      	cmp	r3, #57	; 0x39
 800446c:	d901      	bls.n	8004472 <string_to_unsigned_int+0x2e>
			// Handle invalid characters (you could return an error or handle differently)
			return 0;
 800446e:	2300      	movs	r3, #0
 8004470:	e016      	b.n	80044a0 <string_to_unsigned_int+0x5c>
		}
		result = result * 10 + (str[i] - '0');  // Convert character to integer and add to result
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4619      	mov	r1, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	440b      	add	r3, r1
 8004488:	3b30      	subs	r3, #48	; 0x30
 800448a:	60fb      	str	r3, [r7, #12]
	for (; str[i] != '\0'; i++) {
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3301      	adds	r3, #1
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1db      	bne.n	8004456 <string_to_unsigned_int+0x12>
	}

	return result;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
	return 1;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <_kill>:

int _kill(int pid, int sig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044c2:	f000 f8dd 	bl	8004680 <__errno>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2216      	movs	r2, #22
 80044ca:	601a      	str	r2, [r3, #0]
	return -1;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_exit>:

void _exit (int status)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044e0:	f04f 31ff 	mov.w	r1, #4294967295
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffe7 	bl	80044b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80044ea:	e7fe      	b.n	80044ea <_exit+0x12>

080044ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	e00a      	b.n	8004514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044fe:	f3af 8000 	nop.w
 8004502:	4601      	mov	r1, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	60ba      	str	r2, [r7, #8]
 800450a:	b2ca      	uxtb	r2, r1
 800450c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	3301      	adds	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	dbf0      	blt.n	80044fe <_read+0x12>
	}

return len;
 800451c:	687b      	ldr	r3, [r7, #4]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e009      	b.n	800454c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	60ba      	str	r2, [r7, #8]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	3301      	adds	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	dbf1      	blt.n	8004538 <_write+0x12>
	}
	return len;
 8004554:	687b      	ldr	r3, [r7, #4]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_close>:

int _close(int file)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
	return -1;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004584:	605a      	str	r2, [r3, #4]
	return 0;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <_isatty>:

int _isatty(int file)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
	return 1;
 800459a:	2301      	movs	r3, #1
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
	return 0;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
	...

080045c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <_sbrk+0x5c>)
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <_sbrk+0x60>)
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <_sbrk+0x64>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <_sbrk+0x64>)
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <_sbrk+0x68>)
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <_sbrk+0x64>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d207      	bcs.n	8004600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045f0:	f000 f846 	bl	8004680 <__errno>
 80045f4:	4603      	mov	r3, r0
 80045f6:	220c      	movs	r2, #12
 80045f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	e009      	b.n	8004614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <_sbrk+0x64>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <_sbrk+0x64>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	4a05      	ldr	r2, [pc, #20]	; (8004624 <_sbrk+0x64>)
 8004610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20005000 	.word	0x20005000
 8004620:	00000400 	.word	0x00000400
 8004624:	200002ac 	.word	0x200002ac
 8004628:	200002c0 	.word	0x200002c0

0800462c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800462c:	480d      	ldr	r0, [pc, #52]	; (8004664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800462e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004634:	480c      	ldr	r0, [pc, #48]	; (8004668 <LoopForever+0x6>)
  ldr r1, =_edata
 8004636:	490d      	ldr	r1, [pc, #52]	; (800466c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <LoopForever+0xe>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800463c:	e002      	b.n	8004644 <LoopCopyDataInit>

0800463e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004642:	3304      	adds	r3, #4

08004644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004648:	d3f9      	bcc.n	800463e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800464c:	4c0a      	ldr	r4, [pc, #40]	; (8004678 <LoopForever+0x16>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004650:	e001      	b.n	8004656 <LoopFillZerobss>

08004652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004654:	3204      	adds	r2, #4

08004656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004658:	d3fb      	bcc.n	8004652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800465a:	f000 f817 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800465e:	f7ff fc39 	bl	8003ed4 <main>

08004662 <LoopForever>:

LoopForever:
    b LoopForever
 8004662:	e7fe      	b.n	8004662 <LoopForever>
  ldr   r0, =_estack
 8004664:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800466c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004670:	08008708 	.word	0x08008708
  ldr r2, =_sbss
 8004674:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8004678:	200002c0 	.word	0x200002c0

0800467c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800467c:	e7fe      	b.n	800467c <ADC1_2_IRQHandler>
	...

08004680 <__errno>:
 8004680:	4b01      	ldr	r3, [pc, #4]	; (8004688 <__errno+0x8>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000020 	.word	0x20000020

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	2600      	movs	r6, #0
 8004690:	4d0c      	ldr	r5, [pc, #48]	; (80046c4 <__libc_init_array+0x38>)
 8004692:	4c0d      	ldr	r4, [pc, #52]	; (80046c8 <__libc_init_array+0x3c>)
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	42a6      	cmp	r6, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	f003 fd3e 	bl	800811c <_init>
 80046a0:	2600      	movs	r6, #0
 80046a2:	4d0a      	ldr	r5, [pc, #40]	; (80046cc <__libc_init_array+0x40>)
 80046a4:	4c0a      	ldr	r4, [pc, #40]	; (80046d0 <__libc_init_array+0x44>)
 80046a6:	1b64      	subs	r4, r4, r5
 80046a8:	10a4      	asrs	r4, r4, #2
 80046aa:	42a6      	cmp	r6, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b4:	4798      	blx	r3
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80046be:	4798      	blx	r3
 80046c0:	3601      	adds	r6, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	08008700 	.word	0x08008700
 80046c8:	08008700 	.word	0x08008700
 80046cc:	08008700 	.word	0x08008700
 80046d0:	08008704 	.word	0x08008704

080046d4 <malloc>:
 80046d4:	4b02      	ldr	r3, [pc, #8]	; (80046e0 <malloc+0xc>)
 80046d6:	4601      	mov	r1, r0
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	f000 b889 	b.w	80047f0 <_malloc_r>
 80046de:	bf00      	nop
 80046e0:	20000020 	.word	0x20000020

080046e4 <free>:
 80046e4:	4b02      	ldr	r3, [pc, #8]	; (80046f0 <free+0xc>)
 80046e6:	4601      	mov	r1, r0
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f000 b819 	b.w	8004720 <_free_r>
 80046ee:	bf00      	nop
 80046f0:	20000020 	.word	0x20000020

080046f4 <memcpy>:
 80046f4:	440a      	add	r2, r1
 80046f6:	4291      	cmp	r1, r2
 80046f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046fc:	d100      	bne.n	8004700 <memcpy+0xc>
 80046fe:	4770      	bx	lr
 8004700:	b510      	push	{r4, lr}
 8004702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004706:	4291      	cmp	r1, r2
 8004708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800470c:	d1f9      	bne.n	8004702 <memcpy+0xe>
 800470e:	bd10      	pop	{r4, pc}

08004710 <memset>:
 8004710:	4603      	mov	r3, r0
 8004712:	4402      	add	r2, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <_free_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4605      	mov	r5, r0
 8004724:	2900      	cmp	r1, #0
 8004726:	d040      	beq.n	80047aa <_free_r+0x8a>
 8004728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472c:	1f0c      	subs	r4, r1, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfb8      	it	lt
 8004732:	18e4      	addlt	r4, r4, r3
 8004734:	f001 fb4c 	bl	8005dd0 <__malloc_lock>
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <_free_r+0x8c>)
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	b933      	cbnz	r3, 800474c <_free_r+0x2c>
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	6014      	str	r4, [r2, #0]
 8004742:	4628      	mov	r0, r5
 8004744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004748:	f001 bb48 	b.w	8005ddc <__malloc_unlock>
 800474c:	42a3      	cmp	r3, r4
 800474e:	d908      	bls.n	8004762 <_free_r+0x42>
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	1821      	adds	r1, r4, r0
 8004754:	428b      	cmp	r3, r1
 8004756:	bf01      	itttt	eq
 8004758:	6819      	ldreq	r1, [r3, #0]
 800475a:	685b      	ldreq	r3, [r3, #4]
 800475c:	1809      	addeq	r1, r1, r0
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	e7ed      	b.n	800473e <_free_r+0x1e>
 8004762:	461a      	mov	r2, r3
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b10b      	cbz	r3, 800476c <_free_r+0x4c>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d9fa      	bls.n	8004762 <_free_r+0x42>
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	1850      	adds	r0, r2, r1
 8004770:	42a0      	cmp	r0, r4
 8004772:	d10b      	bne.n	800478c <_free_r+0x6c>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4401      	add	r1, r0
 8004778:	1850      	adds	r0, r2, r1
 800477a:	4283      	cmp	r3, r0
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	d1e0      	bne.n	8004742 <_free_r+0x22>
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4401      	add	r1, r0
 8004786:	6011      	str	r1, [r2, #0]
 8004788:	6053      	str	r3, [r2, #4]
 800478a:	e7da      	b.n	8004742 <_free_r+0x22>
 800478c:	d902      	bls.n	8004794 <_free_r+0x74>
 800478e:	230c      	movs	r3, #12
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	e7d6      	b.n	8004742 <_free_r+0x22>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	1821      	adds	r1, r4, r0
 8004798:	428b      	cmp	r3, r1
 800479a:	bf01      	itttt	eq
 800479c:	6819      	ldreq	r1, [r3, #0]
 800479e:	685b      	ldreq	r3, [r3, #4]
 80047a0:	1809      	addeq	r1, r1, r0
 80047a2:	6021      	streq	r1, [r4, #0]
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	6054      	str	r4, [r2, #4]
 80047a8:	e7cb      	b.n	8004742 <_free_r+0x22>
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	200002b0 	.word	0x200002b0

080047b0 <sbrk_aligned>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4e0e      	ldr	r6, [pc, #56]	; (80047ec <sbrk_aligned+0x3c>)
 80047b4:	460c      	mov	r4, r1
 80047b6:	6831      	ldr	r1, [r6, #0]
 80047b8:	4605      	mov	r5, r0
 80047ba:	b911      	cbnz	r1, 80047c2 <sbrk_aligned+0x12>
 80047bc:	f000 f894 	bl	80048e8 <_sbrk_r>
 80047c0:	6030      	str	r0, [r6, #0]
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f88f 	bl	80048e8 <_sbrk_r>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	d00a      	beq.n	80047e4 <sbrk_aligned+0x34>
 80047ce:	1cc4      	adds	r4, r0, #3
 80047d0:	f024 0403 	bic.w	r4, r4, #3
 80047d4:	42a0      	cmp	r0, r4
 80047d6:	d007      	beq.n	80047e8 <sbrk_aligned+0x38>
 80047d8:	1a21      	subs	r1, r4, r0
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 f884 	bl	80048e8 <_sbrk_r>
 80047e0:	3001      	adds	r0, #1
 80047e2:	d101      	bne.n	80047e8 <sbrk_aligned+0x38>
 80047e4:	f04f 34ff 	mov.w	r4, #4294967295
 80047e8:	4620      	mov	r0, r4
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	200002b4 	.word	0x200002b4

080047f0 <_malloc_r>:
 80047f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f4:	1ccd      	adds	r5, r1, #3
 80047f6:	f025 0503 	bic.w	r5, r5, #3
 80047fa:	3508      	adds	r5, #8
 80047fc:	2d0c      	cmp	r5, #12
 80047fe:	bf38      	it	cc
 8004800:	250c      	movcc	r5, #12
 8004802:	2d00      	cmp	r5, #0
 8004804:	4607      	mov	r7, r0
 8004806:	db01      	blt.n	800480c <_malloc_r+0x1c>
 8004808:	42a9      	cmp	r1, r5
 800480a:	d905      	bls.n	8004818 <_malloc_r+0x28>
 800480c:	230c      	movs	r3, #12
 800480e:	2600      	movs	r6, #0
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	4630      	mov	r0, r6
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	4e2e      	ldr	r6, [pc, #184]	; (80048d4 <_malloc_r+0xe4>)
 800481a:	f001 fad9 	bl	8005dd0 <__malloc_lock>
 800481e:	6833      	ldr	r3, [r6, #0]
 8004820:	461c      	mov	r4, r3
 8004822:	bb34      	cbnz	r4, 8004872 <_malloc_r+0x82>
 8004824:	4629      	mov	r1, r5
 8004826:	4638      	mov	r0, r7
 8004828:	f7ff ffc2 	bl	80047b0 <sbrk_aligned>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	4604      	mov	r4, r0
 8004830:	d14d      	bne.n	80048ce <_malloc_r+0xde>
 8004832:	6834      	ldr	r4, [r6, #0]
 8004834:	4626      	mov	r6, r4
 8004836:	2e00      	cmp	r6, #0
 8004838:	d140      	bne.n	80048bc <_malloc_r+0xcc>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	4631      	mov	r1, r6
 800483e:	4638      	mov	r0, r7
 8004840:	eb04 0803 	add.w	r8, r4, r3
 8004844:	f000 f850 	bl	80048e8 <_sbrk_r>
 8004848:	4580      	cmp	r8, r0
 800484a:	d13a      	bne.n	80048c2 <_malloc_r+0xd2>
 800484c:	6821      	ldr	r1, [r4, #0]
 800484e:	3503      	adds	r5, #3
 8004850:	1a6d      	subs	r5, r5, r1
 8004852:	f025 0503 	bic.w	r5, r5, #3
 8004856:	3508      	adds	r5, #8
 8004858:	2d0c      	cmp	r5, #12
 800485a:	bf38      	it	cc
 800485c:	250c      	movcc	r5, #12
 800485e:	4638      	mov	r0, r7
 8004860:	4629      	mov	r1, r5
 8004862:	f7ff ffa5 	bl	80047b0 <sbrk_aligned>
 8004866:	3001      	adds	r0, #1
 8004868:	d02b      	beq.n	80048c2 <_malloc_r+0xd2>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	442b      	add	r3, r5
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	e00e      	b.n	8004890 <_malloc_r+0xa0>
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	1b52      	subs	r2, r2, r5
 8004876:	d41e      	bmi.n	80048b6 <_malloc_r+0xc6>
 8004878:	2a0b      	cmp	r2, #11
 800487a:	d916      	bls.n	80048aa <_malloc_r+0xba>
 800487c:	1961      	adds	r1, r4, r5
 800487e:	42a3      	cmp	r3, r4
 8004880:	6025      	str	r5, [r4, #0]
 8004882:	bf18      	it	ne
 8004884:	6059      	strne	r1, [r3, #4]
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	bf08      	it	eq
 800488a:	6031      	streq	r1, [r6, #0]
 800488c:	5162      	str	r2, [r4, r5]
 800488e:	604b      	str	r3, [r1, #4]
 8004890:	4638      	mov	r0, r7
 8004892:	f104 060b 	add.w	r6, r4, #11
 8004896:	f001 faa1 	bl	8005ddc <__malloc_unlock>
 800489a:	f026 0607 	bic.w	r6, r6, #7
 800489e:	1d23      	adds	r3, r4, #4
 80048a0:	1af2      	subs	r2, r6, r3
 80048a2:	d0b6      	beq.n	8004812 <_malloc_r+0x22>
 80048a4:	1b9b      	subs	r3, r3, r6
 80048a6:	50a3      	str	r3, [r4, r2]
 80048a8:	e7b3      	b.n	8004812 <_malloc_r+0x22>
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	bf0c      	ite	eq
 80048b0:	6032      	streq	r2, [r6, #0]
 80048b2:	605a      	strne	r2, [r3, #4]
 80048b4:	e7ec      	b.n	8004890 <_malloc_r+0xa0>
 80048b6:	4623      	mov	r3, r4
 80048b8:	6864      	ldr	r4, [r4, #4]
 80048ba:	e7b2      	b.n	8004822 <_malloc_r+0x32>
 80048bc:	4634      	mov	r4, r6
 80048be:	6876      	ldr	r6, [r6, #4]
 80048c0:	e7b9      	b.n	8004836 <_malloc_r+0x46>
 80048c2:	230c      	movs	r3, #12
 80048c4:	4638      	mov	r0, r7
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	f001 fa88 	bl	8005ddc <__malloc_unlock>
 80048cc:	e7a1      	b.n	8004812 <_malloc_r+0x22>
 80048ce:	6025      	str	r5, [r4, #0]
 80048d0:	e7de      	b.n	8004890 <_malloc_r+0xa0>
 80048d2:	bf00      	nop
 80048d4:	200002b0 	.word	0x200002b0

080048d8 <realloc>:
 80048d8:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <realloc+0xc>)
 80048da:	460a      	mov	r2, r1
 80048dc:	4601      	mov	r1, r0
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	f001 bf4e 	b.w	8006780 <_realloc_r>
 80048e4:	20000020 	.word	0x20000020

080048e8 <_sbrk_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	2300      	movs	r3, #0
 80048ec:	4d05      	ldr	r5, [pc, #20]	; (8004904 <_sbrk_r+0x1c>)
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	f7ff fe64 	bl	80045c0 <_sbrk>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_sbrk_r+0x1a>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_sbrk_r+0x1a>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	200002b8 	.word	0x200002b8

08004908 <siprintf>:
 8004908:	b40e      	push	{r1, r2, r3}
 800490a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800490e:	b500      	push	{lr}
 8004910:	b09c      	sub	sp, #112	; 0x70
 8004912:	ab1d      	add	r3, sp, #116	; 0x74
 8004914:	9002      	str	r0, [sp, #8]
 8004916:	9006      	str	r0, [sp, #24]
 8004918:	9107      	str	r1, [sp, #28]
 800491a:	9104      	str	r1, [sp, #16]
 800491c:	4808      	ldr	r0, [pc, #32]	; (8004940 <siprintf+0x38>)
 800491e:	4909      	ldr	r1, [pc, #36]	; (8004944 <siprintf+0x3c>)
 8004920:	f853 2b04 	ldr.w	r2, [r3], #4
 8004924:	9105      	str	r1, [sp, #20]
 8004926:	6800      	ldr	r0, [r0, #0]
 8004928:	a902      	add	r1, sp, #8
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	f001 ffb2 	bl	8006894 <_svfiprintf_r>
 8004930:	2200      	movs	r2, #0
 8004932:	9b02      	ldr	r3, [sp, #8]
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	b01c      	add	sp, #112	; 0x70
 8004938:	f85d eb04 	ldr.w	lr, [sp], #4
 800493c:	b003      	add	sp, #12
 800493e:	4770      	bx	lr
 8004940:	20000020 	.word	0x20000020
 8004944:	ffff0208 	.word	0xffff0208

08004948 <siscanf>:
 8004948:	b40e      	push	{r1, r2, r3}
 800494a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800494e:	b530      	push	{r4, r5, lr}
 8004950:	b09c      	sub	sp, #112	; 0x70
 8004952:	ac1f      	add	r4, sp, #124	; 0x7c
 8004954:	f854 5b04 	ldr.w	r5, [r4], #4
 8004958:	f8ad 2014 	strh.w	r2, [sp, #20]
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	f7fb fc10 	bl	8000184 <strlen>
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <siscanf+0x4c>)
 8004966:	9003      	str	r0, [sp, #12]
 8004968:	930b      	str	r3, [sp, #44]	; 0x2c
 800496a:	2300      	movs	r3, #0
 800496c:	930f      	str	r3, [sp, #60]	; 0x3c
 800496e:	9314      	str	r3, [sp, #80]	; 0x50
 8004970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004974:	9007      	str	r0, [sp, #28]
 8004976:	4808      	ldr	r0, [pc, #32]	; (8004998 <siscanf+0x50>)
 8004978:	f8ad 3016 	strh.w	r3, [sp, #22]
 800497c:	462a      	mov	r2, r5
 800497e:	4623      	mov	r3, r4
 8004980:	a902      	add	r1, sp, #8
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	9401      	str	r4, [sp, #4]
 8004986:	f002 f8df 	bl	8006b48 <__ssvfiscanf_r>
 800498a:	b01c      	add	sp, #112	; 0x70
 800498c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004990:	b003      	add	sp, #12
 8004992:	4770      	bx	lr
 8004994:	080049bf 	.word	0x080049bf
 8004998:	20000020 	.word	0x20000020

0800499c <__sread>:
 800499c:	b510      	push	{r4, lr}
 800499e:	460c      	mov	r4, r1
 80049a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a4:	f002 fd32 	bl	800740c <_read_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	bfab      	itete	ge
 80049ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ae:	89a3      	ldrhlt	r3, [r4, #12]
 80049b0:	181b      	addge	r3, r3, r0
 80049b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049b6:	bfac      	ite	ge
 80049b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049ba:	81a3      	strhlt	r3, [r4, #12]
 80049bc:	bd10      	pop	{r4, pc}

080049be <__seofread>:
 80049be:	2000      	movs	r0, #0
 80049c0:	4770      	bx	lr

080049c2 <__swrite>:
 80049c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c6:	461f      	mov	r7, r3
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	4605      	mov	r5, r0
 80049cc:	05db      	lsls	r3, r3, #23
 80049ce:	460c      	mov	r4, r1
 80049d0:	4616      	mov	r6, r2
 80049d2:	d505      	bpl.n	80049e0 <__swrite+0x1e>
 80049d4:	2302      	movs	r3, #2
 80049d6:	2200      	movs	r2, #0
 80049d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049dc:	f001 f9d4 	bl	8005d88 <_lseek_r>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	4632      	mov	r2, r6
 80049e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	4628      	mov	r0, r5
 80049ec:	463b      	mov	r3, r7
 80049ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049f6:	f000 be3f 	b.w	8005678 <_write_r>

080049fa <__sseek>:
 80049fa:	b510      	push	{r4, lr}
 80049fc:	460c      	mov	r4, r1
 80049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a02:	f001 f9c1 	bl	8005d88 <_lseek_r>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	bf15      	itete	ne
 8004a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a16:	81a3      	strheq	r3, [r4, #12]
 8004a18:	bf18      	it	ne
 8004a1a:	81a3      	strhne	r3, [r4, #12]
 8004a1c:	bd10      	pop	{r4, pc}

08004a1e <__sclose>:
 8004a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a22:	f000 be3b 	b.w	800569c <_close_r>

08004a26 <strncmp>:
 8004a26:	4603      	mov	r3, r0
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	b172      	cbz	r2, 8004a4a <strncmp+0x24>
 8004a2c:	3901      	subs	r1, #1
 8004a2e:	1884      	adds	r4, r0, r2
 8004a30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004a34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a38:	4290      	cmp	r0, r2
 8004a3a:	d101      	bne.n	8004a40 <strncmp+0x1a>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d101      	bne.n	8004a44 <strncmp+0x1e>
 8004a40:	1a80      	subs	r0, r0, r2
 8004a42:	bd10      	pop	{r4, pc}
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1f3      	bne.n	8004a30 <strncmp+0xa>
 8004a48:	e7fa      	b.n	8004a40 <strncmp+0x1a>
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	e7f9      	b.n	8004a42 <strncmp+0x1c>

08004a4e <sulp>:
 8004a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a52:	460f      	mov	r7, r1
 8004a54:	4690      	mov	r8, r2
 8004a56:	f001 fd37 	bl	80064c8 <__ulp>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	f1b8 0f00 	cmp.w	r8, #0
 8004a62:	d011      	beq.n	8004a88 <sulp+0x3a>
 8004a64:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004a68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dd0b      	ble.n	8004a88 <sulp+0x3a>
 8004a70:	2400      	movs	r4, #0
 8004a72:	051b      	lsls	r3, r3, #20
 8004a74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	f7fb fd44 	bl	800050c <__aeabi_dmul>
 8004a84:	4604      	mov	r4, r0
 8004a86:	460d      	mov	r5, r1
 8004a88:	4620      	mov	r0, r4
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a90 <_strtod_l>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	469b      	mov	fp, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	b09f      	sub	sp, #124	; 0x7c
 8004a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9c:	4b9e      	ldr	r3, [pc, #632]	; (8004d18 <_strtod_l+0x288>)
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	681f      	ldr	r7, [r3, #0]
 8004aa2:	460e      	mov	r6, r1
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	9215      	str	r2, [sp, #84]	; 0x54
 8004aa8:	f7fb fb6c 	bl	8000184 <strlen>
 8004aac:	f04f 0800 	mov.w	r8, #0
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	f04f 0900 	mov.w	r9, #0
 8004ab6:	9619      	str	r6, [sp, #100]	; 0x64
 8004ab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	2a2b      	cmp	r2, #43	; 0x2b
 8004abe:	d04c      	beq.n	8004b5a <_strtod_l+0xca>
 8004ac0:	d83a      	bhi.n	8004b38 <_strtod_l+0xa8>
 8004ac2:	2a0d      	cmp	r2, #13
 8004ac4:	d833      	bhi.n	8004b2e <_strtod_l+0x9e>
 8004ac6:	2a08      	cmp	r2, #8
 8004ac8:	d833      	bhi.n	8004b32 <_strtod_l+0xa2>
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	d03d      	beq.n	8004b4a <_strtod_l+0xba>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004ad4:	782b      	ldrb	r3, [r5, #0]
 8004ad6:	2b30      	cmp	r3, #48	; 0x30
 8004ad8:	f040 80aa 	bne.w	8004c30 <_strtod_l+0x1a0>
 8004adc:	786b      	ldrb	r3, [r5, #1]
 8004ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ae2:	2b58      	cmp	r3, #88	; 0x58
 8004ae4:	d166      	bne.n	8004bb4 <_strtod_l+0x124>
 8004ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae8:	4650      	mov	r0, sl
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	ab1a      	add	r3, sp, #104	; 0x68
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4a8a      	ldr	r2, [pc, #552]	; (8004d1c <_strtod_l+0x28c>)
 8004af2:	f8cd b008 	str.w	fp, [sp, #8]
 8004af6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004af8:	a919      	add	r1, sp, #100	; 0x64
 8004afa:	f000 fe47 	bl	800578c <__gethex>
 8004afe:	f010 0607 	ands.w	r6, r0, #7
 8004b02:	4604      	mov	r4, r0
 8004b04:	d005      	beq.n	8004b12 <_strtod_l+0x82>
 8004b06:	2e06      	cmp	r6, #6
 8004b08:	d129      	bne.n	8004b5e <_strtod_l+0xce>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	9519      	str	r5, [sp, #100]	; 0x64
 8004b10:	930a      	str	r3, [sp, #40]	; 0x28
 8004b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 858a 	bne.w	800562e <_strtod_l+0xb9e>
 8004b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1c:	b1d3      	cbz	r3, 8004b54 <_strtod_l+0xc4>
 8004b1e:	4642      	mov	r2, r8
 8004b20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	b01f      	add	sp, #124	; 0x7c
 8004b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2e:	2a20      	cmp	r2, #32
 8004b30:	d1cd      	bne.n	8004ace <_strtod_l+0x3e>
 8004b32:	3301      	adds	r3, #1
 8004b34:	9319      	str	r3, [sp, #100]	; 0x64
 8004b36:	e7bf      	b.n	8004ab8 <_strtod_l+0x28>
 8004b38:	2a2d      	cmp	r2, #45	; 0x2d
 8004b3a:	d1c8      	bne.n	8004ace <_strtod_l+0x3e>
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	920a      	str	r2, [sp, #40]	; 0x28
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	9219      	str	r2, [sp, #100]	; 0x64
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1c3      	bne.n	8004ad2 <_strtod_l+0x42>
 8004b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b4c:	9619      	str	r6, [sp, #100]	; 0x64
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f040 856b 	bne.w	800562a <_strtod_l+0xb9a>
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	e7e4      	b.n	8004b24 <_strtod_l+0x94>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	e7ef      	b.n	8004b3e <_strtod_l+0xae>
 8004b5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004b60:	b13a      	cbz	r2, 8004b72 <_strtod_l+0xe2>
 8004b62:	2135      	movs	r1, #53	; 0x35
 8004b64:	a81c      	add	r0, sp, #112	; 0x70
 8004b66:	f001 fdb3 	bl	80066d0 <__copybits>
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b6e:	f001 f97b 	bl	8005e68 <_Bfree>
 8004b72:	3e01      	subs	r6, #1
 8004b74:	2e04      	cmp	r6, #4
 8004b76:	d806      	bhi.n	8004b86 <_strtod_l+0xf6>
 8004b78:	e8df f006 	tbb	[pc, r6]
 8004b7c:	1714030a 	.word	0x1714030a
 8004b80:	0a          	.byte	0x0a
 8004b81:	00          	.byte	0x00
 8004b82:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004b86:	0721      	lsls	r1, r4, #28
 8004b88:	d5c3      	bpl.n	8004b12 <_strtod_l+0x82>
 8004b8a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004b8e:	e7c0      	b.n	8004b12 <_strtod_l+0x82>
 8004b90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004b92:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004b96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004ba2:	e7f0      	b.n	8004b86 <_strtod_l+0xf6>
 8004ba4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004d20 <_strtod_l+0x290>
 8004ba8:	e7ed      	b.n	8004b86 <_strtod_l+0xf6>
 8004baa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004bae:	f04f 38ff 	mov.w	r8, #4294967295
 8004bb2:	e7e8      	b.n	8004b86 <_strtod_l+0xf6>
 8004bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	9219      	str	r2, [sp, #100]	; 0x64
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	d0f9      	beq.n	8004bb4 <_strtod_l+0x124>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0a6      	beq.n	8004b12 <_strtod_l+0x82>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9307      	str	r3, [sp, #28]
 8004bc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bca:	220a      	movs	r2, #10
 8004bcc:	9308      	str	r3, [sp, #32]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	469b      	mov	fp, r3
 8004bd2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004bd6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004bd8:	7805      	ldrb	r5, [r0, #0]
 8004bda:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004bde:	b2d9      	uxtb	r1, r3
 8004be0:	2909      	cmp	r1, #9
 8004be2:	d927      	bls.n	8004c34 <_strtod_l+0x1a4>
 8004be4:	4622      	mov	r2, r4
 8004be6:	4639      	mov	r1, r7
 8004be8:	f7ff ff1d 	bl	8004a26 <strncmp>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d033      	beq.n	8004c58 <_strtod_l+0x1c8>
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	462a      	mov	r2, r5
 8004bf4:	465c      	mov	r4, fp
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	9004      	str	r0, [sp, #16]
 8004bfa:	2a65      	cmp	r2, #101	; 0x65
 8004bfc:	d001      	beq.n	8004c02 <_strtod_l+0x172>
 8004bfe:	2a45      	cmp	r2, #69	; 0x45
 8004c00:	d114      	bne.n	8004c2c <_strtod_l+0x19c>
 8004c02:	b91c      	cbnz	r4, 8004c0c <_strtod_l+0x17c>
 8004c04:	9a07      	ldr	r2, [sp, #28]
 8004c06:	4302      	orrs	r2, r0
 8004c08:	d09f      	beq.n	8004b4a <_strtod_l+0xba>
 8004c0a:	2400      	movs	r4, #0
 8004c0c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004c0e:	1c72      	adds	r2, r6, #1
 8004c10:	9219      	str	r2, [sp, #100]	; 0x64
 8004c12:	7872      	ldrb	r2, [r6, #1]
 8004c14:	2a2b      	cmp	r2, #43	; 0x2b
 8004c16:	d079      	beq.n	8004d0c <_strtod_l+0x27c>
 8004c18:	2a2d      	cmp	r2, #45	; 0x2d
 8004c1a:	f000 8083 	beq.w	8004d24 <_strtod_l+0x294>
 8004c1e:	2700      	movs	r7, #0
 8004c20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004c24:	2909      	cmp	r1, #9
 8004c26:	f240 8083 	bls.w	8004d30 <_strtod_l+0x2a0>
 8004c2a:	9619      	str	r6, [sp, #100]	; 0x64
 8004c2c:	2500      	movs	r5, #0
 8004c2e:	e09f      	b.n	8004d70 <_strtod_l+0x2e0>
 8004c30:	2300      	movs	r3, #0
 8004c32:	e7c8      	b.n	8004bc6 <_strtod_l+0x136>
 8004c34:	f1bb 0f08 	cmp.w	fp, #8
 8004c38:	bfd5      	itete	le
 8004c3a:	9906      	ldrle	r1, [sp, #24]
 8004c3c:	9905      	ldrgt	r1, [sp, #20]
 8004c3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c42:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004c46:	f100 0001 	add.w	r0, r0, #1
 8004c4a:	bfd4      	ite	le
 8004c4c:	9306      	strle	r3, [sp, #24]
 8004c4e:	9305      	strgt	r3, [sp, #20]
 8004c50:	f10b 0b01 	add.w	fp, fp, #1
 8004c54:	9019      	str	r0, [sp, #100]	; 0x64
 8004c56:	e7be      	b.n	8004bd6 <_strtod_l+0x146>
 8004c58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c5a:	191a      	adds	r2, r3, r4
 8004c5c:	9219      	str	r2, [sp, #100]	; 0x64
 8004c5e:	5d1a      	ldrb	r2, [r3, r4]
 8004c60:	f1bb 0f00 	cmp.w	fp, #0
 8004c64:	d036      	beq.n	8004cd4 <_strtod_l+0x244>
 8004c66:	465c      	mov	r4, fp
 8004c68:	9004      	str	r0, [sp, #16]
 8004c6a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d912      	bls.n	8004c98 <_strtod_l+0x208>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e7c1      	b.n	8004bfa <_strtod_l+0x16a>
 8004c76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c78:	3001      	adds	r0, #1
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	9219      	str	r2, [sp, #100]	; 0x64
 8004c7e:	785a      	ldrb	r2, [r3, #1]
 8004c80:	2a30      	cmp	r2, #48	; 0x30
 8004c82:	d0f8      	beq.n	8004c76 <_strtod_l+0x1e6>
 8004c84:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	f200 84d5 	bhi.w	8005638 <_strtod_l+0xba8>
 8004c8e:	9004      	str	r0, [sp, #16]
 8004c90:	2000      	movs	r0, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c96:	9308      	str	r3, [sp, #32]
 8004c98:	3a30      	subs	r2, #48	; 0x30
 8004c9a:	f100 0301 	add.w	r3, r0, #1
 8004c9e:	d013      	beq.n	8004cc8 <_strtod_l+0x238>
 8004ca0:	9904      	ldr	r1, [sp, #16]
 8004ca2:	1905      	adds	r5, r0, r4
 8004ca4:	4419      	add	r1, r3
 8004ca6:	9104      	str	r1, [sp, #16]
 8004ca8:	4623      	mov	r3, r4
 8004caa:	210a      	movs	r1, #10
 8004cac:	42ab      	cmp	r3, r5
 8004cae:	d113      	bne.n	8004cd8 <_strtod_l+0x248>
 8004cb0:	1823      	adds	r3, r4, r0
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	f104 0401 	add.w	r4, r4, #1
 8004cb8:	4404      	add	r4, r0
 8004cba:	dc1b      	bgt.n	8004cf4 <_strtod_l+0x264>
 8004cbc:	230a      	movs	r3, #10
 8004cbe:	9906      	ldr	r1, [sp, #24]
 8004cc0:	fb03 2301 	mla	r3, r3, r1, r2
 8004cc4:	9306      	str	r3, [sp, #24]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004cca:	4618      	mov	r0, r3
 8004ccc:	1c51      	adds	r1, r2, #1
 8004cce:	9119      	str	r1, [sp, #100]	; 0x64
 8004cd0:	7852      	ldrb	r2, [r2, #1]
 8004cd2:	e7ca      	b.n	8004c6a <_strtod_l+0x1da>
 8004cd4:	4658      	mov	r0, fp
 8004cd6:	e7d3      	b.n	8004c80 <_strtod_l+0x1f0>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	dc04      	bgt.n	8004ce6 <_strtod_l+0x256>
 8004cdc:	9f06      	ldr	r7, [sp, #24]
 8004cde:	434f      	muls	r7, r1
 8004ce0:	9706      	str	r7, [sp, #24]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	e7e2      	b.n	8004cac <_strtod_l+0x21c>
 8004ce6:	1c5f      	adds	r7, r3, #1
 8004ce8:	2f10      	cmp	r7, #16
 8004cea:	bfde      	ittt	le
 8004cec:	9f05      	ldrle	r7, [sp, #20]
 8004cee:	434f      	mulle	r7, r1
 8004cf0:	9705      	strle	r7, [sp, #20]
 8004cf2:	e7f6      	b.n	8004ce2 <_strtod_l+0x252>
 8004cf4:	2c10      	cmp	r4, #16
 8004cf6:	bfdf      	itttt	le
 8004cf8:	230a      	movle	r3, #10
 8004cfa:	9905      	ldrle	r1, [sp, #20]
 8004cfc:	fb03 2301 	mlale	r3, r3, r1, r2
 8004d00:	9305      	strle	r3, [sp, #20]
 8004d02:	e7e0      	b.n	8004cc6 <_strtod_l+0x236>
 8004d04:	2300      	movs	r3, #0
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e77b      	b.n	8004c04 <_strtod_l+0x174>
 8004d0c:	2700      	movs	r7, #0
 8004d0e:	1cb2      	adds	r2, r6, #2
 8004d10:	9219      	str	r2, [sp, #100]	; 0x64
 8004d12:	78b2      	ldrb	r2, [r6, #2]
 8004d14:	e784      	b.n	8004c20 <_strtod_l+0x190>
 8004d16:	bf00      	nop
 8004d18:	08008490 	.word	0x08008490
 8004d1c:	080083c4 	.word	0x080083c4
 8004d20:	7ff00000 	.word	0x7ff00000
 8004d24:	2701      	movs	r7, #1
 8004d26:	e7f2      	b.n	8004d0e <_strtod_l+0x27e>
 8004d28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d2a:	1c51      	adds	r1, r2, #1
 8004d2c:	9119      	str	r1, [sp, #100]	; 0x64
 8004d2e:	7852      	ldrb	r2, [r2, #1]
 8004d30:	2a30      	cmp	r2, #48	; 0x30
 8004d32:	d0f9      	beq.n	8004d28 <_strtod_l+0x298>
 8004d34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004d38:	2908      	cmp	r1, #8
 8004d3a:	f63f af77 	bhi.w	8004c2c <_strtod_l+0x19c>
 8004d3e:	f04f 0e0a 	mov.w	lr, #10
 8004d42:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004d46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d48:	9209      	str	r2, [sp, #36]	; 0x24
 8004d4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d4c:	1c51      	adds	r1, r2, #1
 8004d4e:	9119      	str	r1, [sp, #100]	; 0x64
 8004d50:	7852      	ldrb	r2, [r2, #1]
 8004d52:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004d56:	2d09      	cmp	r5, #9
 8004d58:	d935      	bls.n	8004dc6 <_strtod_l+0x336>
 8004d5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d5c:	1b49      	subs	r1, r1, r5
 8004d5e:	2908      	cmp	r1, #8
 8004d60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004d64:	dc02      	bgt.n	8004d6c <_strtod_l+0x2dc>
 8004d66:	4565      	cmp	r5, ip
 8004d68:	bfa8      	it	ge
 8004d6a:	4665      	movge	r5, ip
 8004d6c:	b107      	cbz	r7, 8004d70 <_strtod_l+0x2e0>
 8004d6e:	426d      	negs	r5, r5
 8004d70:	2c00      	cmp	r4, #0
 8004d72:	d14c      	bne.n	8004e0e <_strtod_l+0x37e>
 8004d74:	9907      	ldr	r1, [sp, #28]
 8004d76:	4301      	orrs	r1, r0
 8004d78:	f47f aecb 	bne.w	8004b12 <_strtod_l+0x82>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f aee4 	bne.w	8004b4a <_strtod_l+0xba>
 8004d82:	2a69      	cmp	r2, #105	; 0x69
 8004d84:	d026      	beq.n	8004dd4 <_strtod_l+0x344>
 8004d86:	dc23      	bgt.n	8004dd0 <_strtod_l+0x340>
 8004d88:	2a49      	cmp	r2, #73	; 0x49
 8004d8a:	d023      	beq.n	8004dd4 <_strtod_l+0x344>
 8004d8c:	2a4e      	cmp	r2, #78	; 0x4e
 8004d8e:	f47f aedc 	bne.w	8004b4a <_strtod_l+0xba>
 8004d92:	499d      	ldr	r1, [pc, #628]	; (8005008 <_strtod_l+0x578>)
 8004d94:	a819      	add	r0, sp, #100	; 0x64
 8004d96:	f000 ff47 	bl	8005c28 <__match>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f43f aed5 	beq.w	8004b4a <_strtod_l+0xba>
 8004da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b28      	cmp	r3, #40	; 0x28
 8004da6:	d12c      	bne.n	8004e02 <_strtod_l+0x372>
 8004da8:	4998      	ldr	r1, [pc, #608]	; (800500c <_strtod_l+0x57c>)
 8004daa:	aa1c      	add	r2, sp, #112	; 0x70
 8004dac:	a819      	add	r0, sp, #100	; 0x64
 8004dae:	f000 ff4f 	bl	8005c50 <__hexnan>
 8004db2:	2805      	cmp	r0, #5
 8004db4:	d125      	bne.n	8004e02 <_strtod_l+0x372>
 8004db6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004db8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004dbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004dc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004dc4:	e6a5      	b.n	8004b12 <_strtod_l+0x82>
 8004dc6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004dca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004dce:	e7bc      	b.n	8004d4a <_strtod_l+0x2ba>
 8004dd0:	2a6e      	cmp	r2, #110	; 0x6e
 8004dd2:	e7dc      	b.n	8004d8e <_strtod_l+0x2fe>
 8004dd4:	498e      	ldr	r1, [pc, #568]	; (8005010 <_strtod_l+0x580>)
 8004dd6:	a819      	add	r0, sp, #100	; 0x64
 8004dd8:	f000 ff26 	bl	8005c28 <__match>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	f43f aeb4 	beq.w	8004b4a <_strtod_l+0xba>
 8004de2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004de4:	498b      	ldr	r1, [pc, #556]	; (8005014 <_strtod_l+0x584>)
 8004de6:	3b01      	subs	r3, #1
 8004de8:	a819      	add	r0, sp, #100	; 0x64
 8004dea:	9319      	str	r3, [sp, #100]	; 0x64
 8004dec:	f000 ff1c 	bl	8005c28 <__match>
 8004df0:	b910      	cbnz	r0, 8004df8 <_strtod_l+0x368>
 8004df2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004df4:	3301      	adds	r3, #1
 8004df6:	9319      	str	r3, [sp, #100]	; 0x64
 8004df8:	f04f 0800 	mov.w	r8, #0
 8004dfc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005018 <_strtod_l+0x588>
 8004e00:	e687      	b.n	8004b12 <_strtod_l+0x82>
 8004e02:	4886      	ldr	r0, [pc, #536]	; (800501c <_strtod_l+0x58c>)
 8004e04:	f002 fb14 	bl	8007430 <nan>
 8004e08:	4680      	mov	r8, r0
 8004e0a:	4689      	mov	r9, r1
 8004e0c:	e681      	b.n	8004b12 <_strtod_l+0x82>
 8004e0e:	9b04      	ldr	r3, [sp, #16]
 8004e10:	f1bb 0f00 	cmp.w	fp, #0
 8004e14:	bf08      	it	eq
 8004e16:	46a3      	moveq	fp, r4
 8004e18:	1aeb      	subs	r3, r5, r3
 8004e1a:	2c10      	cmp	r4, #16
 8004e1c:	9806      	ldr	r0, [sp, #24]
 8004e1e:	4626      	mov	r6, r4
 8004e20:	9307      	str	r3, [sp, #28]
 8004e22:	bfa8      	it	ge
 8004e24:	2610      	movge	r6, #16
 8004e26:	f7fb faf7 	bl	8000418 <__aeabi_ui2d>
 8004e2a:	2c09      	cmp	r4, #9
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4689      	mov	r9, r1
 8004e30:	dd13      	ble.n	8004e5a <_strtod_l+0x3ca>
 8004e32:	4b7b      	ldr	r3, [pc, #492]	; (8005020 <_strtod_l+0x590>)
 8004e34:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e3c:	f7fb fb66 	bl	800050c <__aeabi_dmul>
 8004e40:	4680      	mov	r8, r0
 8004e42:	9805      	ldr	r0, [sp, #20]
 8004e44:	4689      	mov	r9, r1
 8004e46:	f7fb fae7 	bl	8000418 <__aeabi_ui2d>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4640      	mov	r0, r8
 8004e50:	4649      	mov	r1, r9
 8004e52:	f7fb f9a5 	bl	80001a0 <__adddf3>
 8004e56:	4680      	mov	r8, r0
 8004e58:	4689      	mov	r9, r1
 8004e5a:	2c0f      	cmp	r4, #15
 8004e5c:	dc36      	bgt.n	8004ecc <_strtod_l+0x43c>
 8004e5e:	9b07      	ldr	r3, [sp, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f43f ae56 	beq.w	8004b12 <_strtod_l+0x82>
 8004e66:	dd22      	ble.n	8004eae <_strtod_l+0x41e>
 8004e68:	2b16      	cmp	r3, #22
 8004e6a:	dc09      	bgt.n	8004e80 <_strtod_l+0x3f0>
 8004e6c:	496c      	ldr	r1, [pc, #432]	; (8005020 <_strtod_l+0x590>)
 8004e6e:	4642      	mov	r2, r8
 8004e70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e74:	464b      	mov	r3, r9
 8004e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e7a:	f7fb fb47 	bl	800050c <__aeabi_dmul>
 8004e7e:	e7c3      	b.n	8004e08 <_strtod_l+0x378>
 8004e80:	9a07      	ldr	r2, [sp, #28]
 8004e82:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004e86:	4293      	cmp	r3, r2
 8004e88:	db20      	blt.n	8004ecc <_strtod_l+0x43c>
 8004e8a:	4d65      	ldr	r5, [pc, #404]	; (8005020 <_strtod_l+0x590>)
 8004e8c:	f1c4 040f 	rsb	r4, r4, #15
 8004e90:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004e94:	4642      	mov	r2, r8
 8004e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	f7fb fb36 	bl	800050c <__aeabi_dmul>
 8004ea0:	9b07      	ldr	r3, [sp, #28]
 8004ea2:	1b1c      	subs	r4, r3, r4
 8004ea4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004ea8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004eac:	e7e5      	b.n	8004e7a <_strtod_l+0x3ea>
 8004eae:	9b07      	ldr	r3, [sp, #28]
 8004eb0:	3316      	adds	r3, #22
 8004eb2:	db0b      	blt.n	8004ecc <_strtod_l+0x43c>
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	1b5d      	subs	r5, r3, r5
 8004eba:	4b59      	ldr	r3, [pc, #356]	; (8005020 <_strtod_l+0x590>)
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004ec2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ec6:	f7fb fc4b 	bl	8000760 <__aeabi_ddiv>
 8004eca:	e79d      	b.n	8004e08 <_strtod_l+0x378>
 8004ecc:	9b07      	ldr	r3, [sp, #28]
 8004ece:	1ba6      	subs	r6, r4, r6
 8004ed0:	441e      	add	r6, r3
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	dd74      	ble.n	8004fc0 <_strtod_l+0x530>
 8004ed6:	f016 030f 	ands.w	r3, r6, #15
 8004eda:	d00a      	beq.n	8004ef2 <_strtod_l+0x462>
 8004edc:	4950      	ldr	r1, [pc, #320]	; (8005020 <_strtod_l+0x590>)
 8004ede:	4642      	mov	r2, r8
 8004ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee8:	464b      	mov	r3, r9
 8004eea:	f7fb fb0f 	bl	800050c <__aeabi_dmul>
 8004eee:	4680      	mov	r8, r0
 8004ef0:	4689      	mov	r9, r1
 8004ef2:	f036 060f 	bics.w	r6, r6, #15
 8004ef6:	d052      	beq.n	8004f9e <_strtod_l+0x50e>
 8004ef8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004efc:	dd27      	ble.n	8004f4e <_strtod_l+0x4be>
 8004efe:	f04f 0b00 	mov.w	fp, #0
 8004f02:	f8cd b010 	str.w	fp, [sp, #16]
 8004f06:	f8cd b020 	str.w	fp, [sp, #32]
 8004f0a:	f8cd b018 	str.w	fp, [sp, #24]
 8004f0e:	2322      	movs	r3, #34	; 0x22
 8004f10:	f04f 0800 	mov.w	r8, #0
 8004f14:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005018 <_strtod_l+0x588>
 8004f18:	f8ca 3000 	str.w	r3, [sl]
 8004f1c:	9b08      	ldr	r3, [sp, #32]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f43f adf7 	beq.w	8004b12 <_strtod_l+0x82>
 8004f24:	4650      	mov	r0, sl
 8004f26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f28:	f000 ff9e 	bl	8005e68 <_Bfree>
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	9906      	ldr	r1, [sp, #24]
 8004f30:	f000 ff9a 	bl	8005e68 <_Bfree>
 8004f34:	4650      	mov	r0, sl
 8004f36:	9904      	ldr	r1, [sp, #16]
 8004f38:	f000 ff96 	bl	8005e68 <_Bfree>
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	9908      	ldr	r1, [sp, #32]
 8004f40:	f000 ff92 	bl	8005e68 <_Bfree>
 8004f44:	4659      	mov	r1, fp
 8004f46:	4650      	mov	r0, sl
 8004f48:	f000 ff8e 	bl	8005e68 <_Bfree>
 8004f4c:	e5e1      	b.n	8004b12 <_strtod_l+0x82>
 8004f4e:	4b35      	ldr	r3, [pc, #212]	; (8005024 <_strtod_l+0x594>)
 8004f50:	4640      	mov	r0, r8
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	2300      	movs	r3, #0
 8004f56:	4649      	mov	r1, r9
 8004f58:	461f      	mov	r7, r3
 8004f5a:	1136      	asrs	r6, r6, #4
 8004f5c:	2e01      	cmp	r6, #1
 8004f5e:	dc21      	bgt.n	8004fa4 <_strtod_l+0x514>
 8004f60:	b10b      	cbz	r3, 8004f66 <_strtod_l+0x4d6>
 8004f62:	4680      	mov	r8, r0
 8004f64:	4689      	mov	r9, r1
 8004f66:	4b2f      	ldr	r3, [pc, #188]	; (8005024 <_strtod_l+0x594>)
 8004f68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004f6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004f70:	4642      	mov	r2, r8
 8004f72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f76:	464b      	mov	r3, r9
 8004f78:	f7fb fac8 	bl	800050c <__aeabi_dmul>
 8004f7c:	4b26      	ldr	r3, [pc, #152]	; (8005018 <_strtod_l+0x588>)
 8004f7e:	460a      	mov	r2, r1
 8004f80:	400b      	ands	r3, r1
 8004f82:	4929      	ldr	r1, [pc, #164]	; (8005028 <_strtod_l+0x598>)
 8004f84:	4680      	mov	r8, r0
 8004f86:	428b      	cmp	r3, r1
 8004f88:	d8b9      	bhi.n	8004efe <_strtod_l+0x46e>
 8004f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f8e:	428b      	cmp	r3, r1
 8004f90:	bf86      	itte	hi
 8004f92:	f04f 38ff 	movhi.w	r8, #4294967295
 8004f96:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800502c <_strtod_l+0x59c>
 8004f9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9305      	str	r3, [sp, #20]
 8004fa2:	e07f      	b.n	80050a4 <_strtod_l+0x614>
 8004fa4:	07f2      	lsls	r2, r6, #31
 8004fa6:	d505      	bpl.n	8004fb4 <_strtod_l+0x524>
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb faad 	bl	800050c <__aeabi_dmul>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	9a05      	ldr	r2, [sp, #20]
 8004fb6:	3701      	adds	r7, #1
 8004fb8:	3208      	adds	r2, #8
 8004fba:	1076      	asrs	r6, r6, #1
 8004fbc:	9205      	str	r2, [sp, #20]
 8004fbe:	e7cd      	b.n	8004f5c <_strtod_l+0x4cc>
 8004fc0:	d0ed      	beq.n	8004f9e <_strtod_l+0x50e>
 8004fc2:	4276      	negs	r6, r6
 8004fc4:	f016 020f 	ands.w	r2, r6, #15
 8004fc8:	d00a      	beq.n	8004fe0 <_strtod_l+0x550>
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <_strtod_l+0x590>)
 8004fcc:	4640      	mov	r0, r8
 8004fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	f7fb fbc2 	bl	8000760 <__aeabi_ddiv>
 8004fdc:	4680      	mov	r8, r0
 8004fde:	4689      	mov	r9, r1
 8004fe0:	1136      	asrs	r6, r6, #4
 8004fe2:	d0dc      	beq.n	8004f9e <_strtod_l+0x50e>
 8004fe4:	2e1f      	cmp	r6, #31
 8004fe6:	dd23      	ble.n	8005030 <_strtod_l+0x5a0>
 8004fe8:	f04f 0b00 	mov.w	fp, #0
 8004fec:	f8cd b010 	str.w	fp, [sp, #16]
 8004ff0:	f8cd b020 	str.w	fp, [sp, #32]
 8004ff4:	f8cd b018 	str.w	fp, [sp, #24]
 8004ff8:	2322      	movs	r3, #34	; 0x22
 8004ffa:	f04f 0800 	mov.w	r8, #0
 8004ffe:	f04f 0900 	mov.w	r9, #0
 8005002:	f8ca 3000 	str.w	r3, [sl]
 8005006:	e789      	b.n	8004f1c <_strtod_l+0x48c>
 8005008:	080083c1 	.word	0x080083c1
 800500c:	080083d8 	.word	0x080083d8
 8005010:	080083b8 	.word	0x080083b8
 8005014:	080083bb 	.word	0x080083bb
 8005018:	7ff00000 	.word	0x7ff00000
 800501c:	0800869d 	.word	0x0800869d
 8005020:	08008540 	.word	0x08008540
 8005024:	08008518 	.word	0x08008518
 8005028:	7ca00000 	.word	0x7ca00000
 800502c:	7fefffff 	.word	0x7fefffff
 8005030:	f016 0310 	ands.w	r3, r6, #16
 8005034:	bf18      	it	ne
 8005036:	236a      	movne	r3, #106	; 0x6a
 8005038:	4640      	mov	r0, r8
 800503a:	9305      	str	r3, [sp, #20]
 800503c:	4649      	mov	r1, r9
 800503e:	2300      	movs	r3, #0
 8005040:	4fb0      	ldr	r7, [pc, #704]	; (8005304 <_strtod_l+0x874>)
 8005042:	07f2      	lsls	r2, r6, #31
 8005044:	d504      	bpl.n	8005050 <_strtod_l+0x5c0>
 8005046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800504a:	f7fb fa5f 	bl	800050c <__aeabi_dmul>
 800504e:	2301      	movs	r3, #1
 8005050:	1076      	asrs	r6, r6, #1
 8005052:	f107 0708 	add.w	r7, r7, #8
 8005056:	d1f4      	bne.n	8005042 <_strtod_l+0x5b2>
 8005058:	b10b      	cbz	r3, 800505e <_strtod_l+0x5ce>
 800505a:	4680      	mov	r8, r0
 800505c:	4689      	mov	r9, r1
 800505e:	9b05      	ldr	r3, [sp, #20]
 8005060:	b1c3      	cbz	r3, 8005094 <_strtod_l+0x604>
 8005062:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005066:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800506a:	2b00      	cmp	r3, #0
 800506c:	4649      	mov	r1, r9
 800506e:	dd11      	ble.n	8005094 <_strtod_l+0x604>
 8005070:	2b1f      	cmp	r3, #31
 8005072:	f340 8127 	ble.w	80052c4 <_strtod_l+0x834>
 8005076:	2b34      	cmp	r3, #52	; 0x34
 8005078:	bfd8      	it	le
 800507a:	f04f 33ff 	movle.w	r3, #4294967295
 800507e:	f04f 0800 	mov.w	r8, #0
 8005082:	bfcf      	iteee	gt
 8005084:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005088:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800508c:	fa03 f202 	lslle.w	r2, r3, r2
 8005090:	ea02 0901 	andle.w	r9, r2, r1
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb fc9e 	bl	80009dc <__aeabi_dcmpeq>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d1a1      	bne.n	8004fe8 <_strtod_l+0x558>
 80050a4:	9b06      	ldr	r3, [sp, #24]
 80050a6:	465a      	mov	r2, fp
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4650      	mov	r0, sl
 80050ac:	4623      	mov	r3, r4
 80050ae:	9908      	ldr	r1, [sp, #32]
 80050b0:	f000 ff42 	bl	8005f38 <__s2b>
 80050b4:	9008      	str	r0, [sp, #32]
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f43f af21 	beq.w	8004efe <_strtod_l+0x46e>
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	f04f 0b00 	mov.w	fp, #0
 80050c2:	1b5d      	subs	r5, r3, r5
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	f8cd b010 	str.w	fp, [sp, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfb4      	ite	lt
 80050ce:	462b      	movlt	r3, r5
 80050d0:	2300      	movge	r3, #0
 80050d2:	930e      	str	r3, [sp, #56]	; 0x38
 80050d4:	9b07      	ldr	r3, [sp, #28]
 80050d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050da:	9314      	str	r3, [sp, #80]	; 0x50
 80050dc:	9b08      	ldr	r3, [sp, #32]
 80050de:	4650      	mov	r0, sl
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	f000 fe81 	bl	8005de8 <_Balloc>
 80050e6:	9006      	str	r0, [sp, #24]
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f43f af10 	beq.w	8004f0e <_strtod_l+0x47e>
 80050ee:	9b08      	ldr	r3, [sp, #32]
 80050f0:	300c      	adds	r0, #12
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	f103 010c 	add.w	r1, r3, #12
 80050f8:	3202      	adds	r2, #2
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	f7ff fafa 	bl	80046f4 <memcpy>
 8005100:	ab1c      	add	r3, sp, #112	; 0x70
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	ab1b      	add	r3, sp, #108	; 0x6c
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	4650      	mov	r0, sl
 800510e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005112:	f001 fa53 	bl	80065bc <__d2b>
 8005116:	901a      	str	r0, [sp, #104]	; 0x68
 8005118:	2800      	cmp	r0, #0
 800511a:	f43f aef8 	beq.w	8004f0e <_strtod_l+0x47e>
 800511e:	2101      	movs	r1, #1
 8005120:	4650      	mov	r0, sl
 8005122:	f000 ffa1 	bl	8006068 <__i2b>
 8005126:	4603      	mov	r3, r0
 8005128:	9004      	str	r0, [sp, #16]
 800512a:	2800      	cmp	r0, #0
 800512c:	f43f aeef 	beq.w	8004f0e <_strtod_l+0x47e>
 8005130:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005132:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005134:	2d00      	cmp	r5, #0
 8005136:	bfab      	itete	ge
 8005138:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800513a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800513c:	18ee      	addge	r6, r5, r3
 800513e:	1b5c      	sublt	r4, r3, r5
 8005140:	9b05      	ldr	r3, [sp, #20]
 8005142:	bfa8      	it	ge
 8005144:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005146:	eba5 0503 	sub.w	r5, r5, r3
 800514a:	4415      	add	r5, r2
 800514c:	4b6e      	ldr	r3, [pc, #440]	; (8005308 <_strtod_l+0x878>)
 800514e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005152:	bfb8      	it	lt
 8005154:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005156:	429d      	cmp	r5, r3
 8005158:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800515c:	f280 80c4 	bge.w	80052e8 <_strtod_l+0x858>
 8005160:	1b5b      	subs	r3, r3, r5
 8005162:	2b1f      	cmp	r3, #31
 8005164:	f04f 0701 	mov.w	r7, #1
 8005168:	eba2 0203 	sub.w	r2, r2, r3
 800516c:	f300 80b1 	bgt.w	80052d2 <_strtod_l+0x842>
 8005170:	2500      	movs	r5, #0
 8005172:	fa07 f303 	lsl.w	r3, r7, r3
 8005176:	930f      	str	r3, [sp, #60]	; 0x3c
 8005178:	18b7      	adds	r7, r6, r2
 800517a:	9b05      	ldr	r3, [sp, #20]
 800517c:	42be      	cmp	r6, r7
 800517e:	4414      	add	r4, r2
 8005180:	441c      	add	r4, r3
 8005182:	4633      	mov	r3, r6
 8005184:	bfa8      	it	ge
 8005186:	463b      	movge	r3, r7
 8005188:	42a3      	cmp	r3, r4
 800518a:	bfa8      	it	ge
 800518c:	4623      	movge	r3, r4
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfc2      	ittt	gt
 8005192:	1aff      	subgt	r7, r7, r3
 8005194:	1ae4      	subgt	r4, r4, r3
 8005196:	1af6      	subgt	r6, r6, r3
 8005198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	dd17      	ble.n	80051ce <_strtod_l+0x73e>
 800519e:	461a      	mov	r2, r3
 80051a0:	4650      	mov	r0, sl
 80051a2:	9904      	ldr	r1, [sp, #16]
 80051a4:	f001 f81e 	bl	80061e4 <__pow5mult>
 80051a8:	9004      	str	r0, [sp, #16]
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f43f aeaf 	beq.w	8004f0e <_strtod_l+0x47e>
 80051b0:	4601      	mov	r1, r0
 80051b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80051b4:	4650      	mov	r0, sl
 80051b6:	f000 ff6d 	bl	8006094 <__multiply>
 80051ba:	9009      	str	r0, [sp, #36]	; 0x24
 80051bc:	2800      	cmp	r0, #0
 80051be:	f43f aea6 	beq.w	8004f0e <_strtod_l+0x47e>
 80051c2:	4650      	mov	r0, sl
 80051c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80051c6:	f000 fe4f 	bl	8005e68 <_Bfree>
 80051ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051cc:	931a      	str	r3, [sp, #104]	; 0x68
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	f300 808e 	bgt.w	80052f0 <_strtod_l+0x860>
 80051d4:	9b07      	ldr	r3, [sp, #28]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	dd08      	ble.n	80051ec <_strtod_l+0x75c>
 80051da:	4650      	mov	r0, sl
 80051dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80051de:	9906      	ldr	r1, [sp, #24]
 80051e0:	f001 f800 	bl	80061e4 <__pow5mult>
 80051e4:	9006      	str	r0, [sp, #24]
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f43f ae91 	beq.w	8004f0e <_strtod_l+0x47e>
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	dd08      	ble.n	8005202 <_strtod_l+0x772>
 80051f0:	4622      	mov	r2, r4
 80051f2:	4650      	mov	r0, sl
 80051f4:	9906      	ldr	r1, [sp, #24]
 80051f6:	f001 f84f 	bl	8006298 <__lshift>
 80051fa:	9006      	str	r0, [sp, #24]
 80051fc:	2800      	cmp	r0, #0
 80051fe:	f43f ae86 	beq.w	8004f0e <_strtod_l+0x47e>
 8005202:	2e00      	cmp	r6, #0
 8005204:	dd08      	ble.n	8005218 <_strtod_l+0x788>
 8005206:	4632      	mov	r2, r6
 8005208:	4650      	mov	r0, sl
 800520a:	9904      	ldr	r1, [sp, #16]
 800520c:	f001 f844 	bl	8006298 <__lshift>
 8005210:	9004      	str	r0, [sp, #16]
 8005212:	2800      	cmp	r0, #0
 8005214:	f43f ae7b 	beq.w	8004f0e <_strtod_l+0x47e>
 8005218:	4650      	mov	r0, sl
 800521a:	9a06      	ldr	r2, [sp, #24]
 800521c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800521e:	f001 f8c7 	bl	80063b0 <__mdiff>
 8005222:	4683      	mov	fp, r0
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f ae72 	beq.w	8004f0e <_strtod_l+0x47e>
 800522a:	2400      	movs	r4, #0
 800522c:	68c3      	ldr	r3, [r0, #12]
 800522e:	9904      	ldr	r1, [sp, #16]
 8005230:	60c4      	str	r4, [r0, #12]
 8005232:	930b      	str	r3, [sp, #44]	; 0x2c
 8005234:	f001 f8a0 	bl	8006378 <__mcmp>
 8005238:	42a0      	cmp	r0, r4
 800523a:	da6b      	bge.n	8005314 <_strtod_l+0x884>
 800523c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523e:	ea53 0308 	orrs.w	r3, r3, r8
 8005242:	f040 8091 	bne.w	8005368 <_strtod_l+0x8d8>
 8005246:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 808c 	bne.w	8005368 <_strtod_l+0x8d8>
 8005250:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005254:	0d1b      	lsrs	r3, r3, #20
 8005256:	051b      	lsls	r3, r3, #20
 8005258:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800525c:	f240 8084 	bls.w	8005368 <_strtod_l+0x8d8>
 8005260:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005264:	b91b      	cbnz	r3, 800526e <_strtod_l+0x7de>
 8005266:	f8db 3010 	ldr.w	r3, [fp, #16]
 800526a:	2b01      	cmp	r3, #1
 800526c:	dd7c      	ble.n	8005368 <_strtod_l+0x8d8>
 800526e:	4659      	mov	r1, fp
 8005270:	2201      	movs	r2, #1
 8005272:	4650      	mov	r0, sl
 8005274:	f001 f810 	bl	8006298 <__lshift>
 8005278:	9904      	ldr	r1, [sp, #16]
 800527a:	4683      	mov	fp, r0
 800527c:	f001 f87c 	bl	8006378 <__mcmp>
 8005280:	2800      	cmp	r0, #0
 8005282:	dd71      	ble.n	8005368 <_strtod_l+0x8d8>
 8005284:	9905      	ldr	r1, [sp, #20]
 8005286:	464b      	mov	r3, r9
 8005288:	4a20      	ldr	r2, [pc, #128]	; (800530c <_strtod_l+0x87c>)
 800528a:	2900      	cmp	r1, #0
 800528c:	f000 808c 	beq.w	80053a8 <_strtod_l+0x918>
 8005290:	ea02 0109 	and.w	r1, r2, r9
 8005294:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005298:	f300 8086 	bgt.w	80053a8 <_strtod_l+0x918>
 800529c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80052a0:	f77f aeaa 	ble.w	8004ff8 <_strtod_l+0x568>
 80052a4:	4640      	mov	r0, r8
 80052a6:	4649      	mov	r1, r9
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <_strtod_l+0x880>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f7fb f92e 	bl	800050c <__aeabi_dmul>
 80052b0:	460b      	mov	r3, r1
 80052b2:	4303      	orrs	r3, r0
 80052b4:	bf08      	it	eq
 80052b6:	2322      	moveq	r3, #34	; 0x22
 80052b8:	4680      	mov	r8, r0
 80052ba:	4689      	mov	r9, r1
 80052bc:	bf08      	it	eq
 80052be:	f8ca 3000 	streq.w	r3, [sl]
 80052c2:	e62f      	b.n	8004f24 <_strtod_l+0x494>
 80052c4:	f04f 32ff 	mov.w	r2, #4294967295
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	ea03 0808 	and.w	r8, r3, r8
 80052d0:	e6e0      	b.n	8005094 <_strtod_l+0x604>
 80052d2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80052d6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80052da:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80052de:	35e2      	adds	r5, #226	; 0xe2
 80052e0:	fa07 f505 	lsl.w	r5, r7, r5
 80052e4:	970f      	str	r7, [sp, #60]	; 0x3c
 80052e6:	e747      	b.n	8005178 <_strtod_l+0x6e8>
 80052e8:	2301      	movs	r3, #1
 80052ea:	2500      	movs	r5, #0
 80052ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80052ee:	e743      	b.n	8005178 <_strtod_l+0x6e8>
 80052f0:	463a      	mov	r2, r7
 80052f2:	4650      	mov	r0, sl
 80052f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80052f6:	f000 ffcf 	bl	8006298 <__lshift>
 80052fa:	901a      	str	r0, [sp, #104]	; 0x68
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f47f af69 	bne.w	80051d4 <_strtod_l+0x744>
 8005302:	e604      	b.n	8004f0e <_strtod_l+0x47e>
 8005304:	080083f0 	.word	0x080083f0
 8005308:	fffffc02 	.word	0xfffffc02
 800530c:	7ff00000 	.word	0x7ff00000
 8005310:	39500000 	.word	0x39500000
 8005314:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005318:	d165      	bne.n	80053e6 <_strtod_l+0x956>
 800531a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800531c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005320:	b35a      	cbz	r2, 800537a <_strtod_l+0x8ea>
 8005322:	4a99      	ldr	r2, [pc, #612]	; (8005588 <_strtod_l+0xaf8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d12b      	bne.n	8005380 <_strtod_l+0x8f0>
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	4641      	mov	r1, r8
 800532c:	b303      	cbz	r3, 8005370 <_strtod_l+0x8e0>
 800532e:	464a      	mov	r2, r9
 8005330:	4b96      	ldr	r3, [pc, #600]	; (800558c <_strtod_l+0xafc>)
 8005332:	4013      	ands	r3, r2
 8005334:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	d81b      	bhi.n	8005376 <_strtod_l+0x8e6>
 800533e:	0d1b      	lsrs	r3, r3, #20
 8005340:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	4299      	cmp	r1, r3
 800534a:	d119      	bne.n	8005380 <_strtod_l+0x8f0>
 800534c:	4b90      	ldr	r3, [pc, #576]	; (8005590 <_strtod_l+0xb00>)
 800534e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005350:	429a      	cmp	r2, r3
 8005352:	d102      	bne.n	800535a <_strtod_l+0x8ca>
 8005354:	3101      	adds	r1, #1
 8005356:	f43f adda 	beq.w	8004f0e <_strtod_l+0x47e>
 800535a:	f04f 0800 	mov.w	r8, #0
 800535e:	4b8b      	ldr	r3, [pc, #556]	; (800558c <_strtod_l+0xafc>)
 8005360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005362:	401a      	ands	r2, r3
 8005364:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005368:	9b05      	ldr	r3, [sp, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d19a      	bne.n	80052a4 <_strtod_l+0x814>
 800536e:	e5d9      	b.n	8004f24 <_strtod_l+0x494>
 8005370:	f04f 33ff 	mov.w	r3, #4294967295
 8005374:	e7e8      	b.n	8005348 <_strtod_l+0x8b8>
 8005376:	4613      	mov	r3, r2
 8005378:	e7e6      	b.n	8005348 <_strtod_l+0x8b8>
 800537a:	ea53 0308 	orrs.w	r3, r3, r8
 800537e:	d081      	beq.n	8005284 <_strtod_l+0x7f4>
 8005380:	b1e5      	cbz	r5, 80053bc <_strtod_l+0x92c>
 8005382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005384:	421d      	tst	r5, r3
 8005386:	d0ef      	beq.n	8005368 <_strtod_l+0x8d8>
 8005388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	9a05      	ldr	r2, [sp, #20]
 8005390:	b1c3      	cbz	r3, 80053c4 <_strtod_l+0x934>
 8005392:	f7ff fb5c 	bl	8004a4e <sulp>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800539e:	f7fa feff 	bl	80001a0 <__adddf3>
 80053a2:	4680      	mov	r8, r0
 80053a4:	4689      	mov	r9, r1
 80053a6:	e7df      	b.n	8005368 <_strtod_l+0x8d8>
 80053a8:	4013      	ands	r3, r2
 80053aa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80053ae:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80053b2:	f04f 38ff 	mov.w	r8, #4294967295
 80053b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80053ba:	e7d5      	b.n	8005368 <_strtod_l+0x8d8>
 80053bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053be:	ea13 0f08 	tst.w	r3, r8
 80053c2:	e7e0      	b.n	8005386 <_strtod_l+0x8f6>
 80053c4:	f7ff fb43 	bl	8004a4e <sulp>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053d0:	f7fa fee4 	bl	800019c <__aeabi_dsub>
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4680      	mov	r8, r0
 80053da:	4689      	mov	r9, r1
 80053dc:	f7fb fafe 	bl	80009dc <__aeabi_dcmpeq>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d0c1      	beq.n	8005368 <_strtod_l+0x8d8>
 80053e4:	e608      	b.n	8004ff8 <_strtod_l+0x568>
 80053e6:	4658      	mov	r0, fp
 80053e8:	9904      	ldr	r1, [sp, #16]
 80053ea:	f001 f943 	bl	8006674 <__ratio>
 80053ee:	2200      	movs	r2, #0
 80053f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053f4:	4606      	mov	r6, r0
 80053f6:	460f      	mov	r7, r1
 80053f8:	f7fb fb04 	bl	8000a04 <__aeabi_dcmple>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d070      	beq.n	80054e2 <_strtod_l+0xa52>
 8005400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d042      	beq.n	800548c <_strtod_l+0x9fc>
 8005406:	2600      	movs	r6, #0
 8005408:	4f62      	ldr	r7, [pc, #392]	; (8005594 <_strtod_l+0xb04>)
 800540a:	4d62      	ldr	r5, [pc, #392]	; (8005594 <_strtod_l+0xb04>)
 800540c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800540e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005412:	0d1b      	lsrs	r3, r3, #20
 8005414:	051b      	lsls	r3, r3, #20
 8005416:	930f      	str	r3, [sp, #60]	; 0x3c
 8005418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800541a:	4b5f      	ldr	r3, [pc, #380]	; (8005598 <_strtod_l+0xb08>)
 800541c:	429a      	cmp	r2, r3
 800541e:	f040 80c3 	bne.w	80055a8 <_strtod_l+0xb18>
 8005422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005424:	4640      	mov	r0, r8
 8005426:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800542a:	4649      	mov	r1, r9
 800542c:	f001 f84c 	bl	80064c8 <__ulp>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fb f868 	bl	800050c <__aeabi_dmul>
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	f7fa feae 	bl	80001a0 <__adddf3>
 8005444:	460b      	mov	r3, r1
 8005446:	4951      	ldr	r1, [pc, #324]	; (800558c <_strtod_l+0xafc>)
 8005448:	4a54      	ldr	r2, [pc, #336]	; (800559c <_strtod_l+0xb0c>)
 800544a:	4019      	ands	r1, r3
 800544c:	4291      	cmp	r1, r2
 800544e:	4680      	mov	r8, r0
 8005450:	d95d      	bls.n	800550e <_strtod_l+0xa7e>
 8005452:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005454:	4b4e      	ldr	r3, [pc, #312]	; (8005590 <_strtod_l+0xb00>)
 8005456:	429a      	cmp	r2, r3
 8005458:	d103      	bne.n	8005462 <_strtod_l+0x9d2>
 800545a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800545c:	3301      	adds	r3, #1
 800545e:	f43f ad56 	beq.w	8004f0e <_strtod_l+0x47e>
 8005462:	f04f 38ff 	mov.w	r8, #4294967295
 8005466:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005590 <_strtod_l+0xb00>
 800546a:	4650      	mov	r0, sl
 800546c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800546e:	f000 fcfb 	bl	8005e68 <_Bfree>
 8005472:	4650      	mov	r0, sl
 8005474:	9906      	ldr	r1, [sp, #24]
 8005476:	f000 fcf7 	bl	8005e68 <_Bfree>
 800547a:	4650      	mov	r0, sl
 800547c:	9904      	ldr	r1, [sp, #16]
 800547e:	f000 fcf3 	bl	8005e68 <_Bfree>
 8005482:	4659      	mov	r1, fp
 8005484:	4650      	mov	r0, sl
 8005486:	f000 fcef 	bl	8005e68 <_Bfree>
 800548a:	e627      	b.n	80050dc <_strtod_l+0x64c>
 800548c:	f1b8 0f00 	cmp.w	r8, #0
 8005490:	d119      	bne.n	80054c6 <_strtod_l+0xa36>
 8005492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005498:	b9e3      	cbnz	r3, 80054d4 <_strtod_l+0xa44>
 800549a:	2200      	movs	r2, #0
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <_strtod_l+0xb04>)
 80054a2:	f7fb faa5 	bl	80009f0 <__aeabi_dcmplt>
 80054a6:	b9c8      	cbnz	r0, 80054dc <_strtod_l+0xa4c>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4630      	mov	r0, r6
 80054ac:	4639      	mov	r1, r7
 80054ae:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <_strtod_l+0xb10>)
 80054b0:	f7fb f82c 	bl	800050c <__aeabi_dmul>
 80054b4:	4604      	mov	r4, r0
 80054b6:	460d      	mov	r5, r1
 80054b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80054bc:	9416      	str	r4, [sp, #88]	; 0x58
 80054be:	9317      	str	r3, [sp, #92]	; 0x5c
 80054c0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80054c4:	e7a2      	b.n	800540c <_strtod_l+0x97c>
 80054c6:	f1b8 0f01 	cmp.w	r8, #1
 80054ca:	d103      	bne.n	80054d4 <_strtod_l+0xa44>
 80054cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f43f ad92 	beq.w	8004ff8 <_strtod_l+0x568>
 80054d4:	2600      	movs	r6, #0
 80054d6:	2400      	movs	r4, #0
 80054d8:	4f32      	ldr	r7, [pc, #200]	; (80055a4 <_strtod_l+0xb14>)
 80054da:	e796      	b.n	800540a <_strtod_l+0x97a>
 80054dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80054de:	4d30      	ldr	r5, [pc, #192]	; (80055a0 <_strtod_l+0xb10>)
 80054e0:	e7ea      	b.n	80054b8 <_strtod_l+0xa28>
 80054e2:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <_strtod_l+0xb10>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb f80f 	bl	800050c <__aeabi_dmul>
 80054ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f0:	4604      	mov	r4, r0
 80054f2:	460d      	mov	r5, r1
 80054f4:	b933      	cbnz	r3, 8005504 <_strtod_l+0xa74>
 80054f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054fa:	9010      	str	r0, [sp, #64]	; 0x40
 80054fc:	9311      	str	r3, [sp, #68]	; 0x44
 80054fe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005502:	e783      	b.n	800540c <_strtod_l+0x97c>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800550c:	e7f7      	b.n	80054fe <_strtod_l+0xa6e>
 800550e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1a8      	bne.n	800546a <_strtod_l+0x9da>
 8005518:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800551c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800551e:	0d1b      	lsrs	r3, r3, #20
 8005520:	051b      	lsls	r3, r3, #20
 8005522:	429a      	cmp	r2, r3
 8005524:	d1a1      	bne.n	800546a <_strtod_l+0x9da>
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	f7fb fd65 	bl	8000ff8 <__aeabi_d2lz>
 800552e:	f7fa ffbf 	bl	80004b0 <__aeabi_l2d>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4620      	mov	r0, r4
 8005538:	4629      	mov	r1, r5
 800553a:	f7fa fe2f 	bl	800019c <__aeabi_dsub>
 800553e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005544:	ea43 0308 	orr.w	r3, r3, r8
 8005548:	4313      	orrs	r3, r2
 800554a:	4604      	mov	r4, r0
 800554c:	460d      	mov	r5, r1
 800554e:	d066      	beq.n	800561e <_strtod_l+0xb8e>
 8005550:	a309      	add	r3, pc, #36	; (adr r3, 8005578 <_strtod_l+0xae8>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fb fa4b 	bl	80009f0 <__aeabi_dcmplt>
 800555a:	2800      	cmp	r0, #0
 800555c:	f47f ace2 	bne.w	8004f24 <_strtod_l+0x494>
 8005560:	a307      	add	r3, pc, #28	; (adr r3, 8005580 <_strtod_l+0xaf0>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fb fa5f 	bl	8000a2c <__aeabi_dcmpgt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f43f af7b 	beq.w	800546a <_strtod_l+0x9da>
 8005574:	e4d6      	b.n	8004f24 <_strtod_l+0x494>
 8005576:	bf00      	nop
 8005578:	94a03595 	.word	0x94a03595
 800557c:	3fdfffff 	.word	0x3fdfffff
 8005580:	35afe535 	.word	0x35afe535
 8005584:	3fe00000 	.word	0x3fe00000
 8005588:	000fffff 	.word	0x000fffff
 800558c:	7ff00000 	.word	0x7ff00000
 8005590:	7fefffff 	.word	0x7fefffff
 8005594:	3ff00000 	.word	0x3ff00000
 8005598:	7fe00000 	.word	0x7fe00000
 800559c:	7c9fffff 	.word	0x7c9fffff
 80055a0:	3fe00000 	.word	0x3fe00000
 80055a4:	bff00000 	.word	0xbff00000
 80055a8:	9b05      	ldr	r3, [sp, #20]
 80055aa:	b313      	cbz	r3, 80055f2 <_strtod_l+0xb62>
 80055ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80055b2:	d81e      	bhi.n	80055f2 <_strtod_l+0xb62>
 80055b4:	a326      	add	r3, pc, #152	; (adr r3, 8005650 <_strtod_l+0xbc0>)
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fb fa21 	bl	8000a04 <__aeabi_dcmple>
 80055c2:	b190      	cbz	r0, 80055ea <_strtod_l+0xb5a>
 80055c4:	4629      	mov	r1, r5
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7fb fa78 	bl	8000abc <__aeabi_d2uiz>
 80055cc:	2801      	cmp	r0, #1
 80055ce:	bf38      	it	cc
 80055d0:	2001      	movcc	r0, #1
 80055d2:	f7fa ff21 	bl	8000418 <__aeabi_ui2d>
 80055d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d8:	4604      	mov	r4, r0
 80055da:	460d      	mov	r5, r1
 80055dc:	b9d3      	cbnz	r3, 8005614 <_strtod_l+0xb84>
 80055de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055e2:	9012      	str	r0, [sp, #72]	; 0x48
 80055e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80055e6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80055ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055ec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80055f0:	1a9f      	subs	r7, r3, r2
 80055f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055f6:	f000 ff67 	bl	80064c8 <__ulp>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7fa ff83 	bl	800050c <__aeabi_dmul>
 8005606:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800560a:	f7fa fdc9 	bl	80001a0 <__adddf3>
 800560e:	4680      	mov	r8, r0
 8005610:	4689      	mov	r9, r1
 8005612:	e77e      	b.n	8005512 <_strtod_l+0xa82>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800561c:	e7e3      	b.n	80055e6 <_strtod_l+0xb56>
 800561e:	a30e      	add	r3, pc, #56	; (adr r3, 8005658 <_strtod_l+0xbc8>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fb f9e4 	bl	80009f0 <__aeabi_dcmplt>
 8005628:	e7a1      	b.n	800556e <_strtod_l+0xade>
 800562a:	2300      	movs	r3, #0
 800562c:	930a      	str	r3, [sp, #40]	; 0x28
 800562e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005630:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	f7ff ba71 	b.w	8004b1a <_strtod_l+0x8a>
 8005638:	2a65      	cmp	r2, #101	; 0x65
 800563a:	f43f ab63 	beq.w	8004d04 <_strtod_l+0x274>
 800563e:	2a45      	cmp	r2, #69	; 0x45
 8005640:	f43f ab60 	beq.w	8004d04 <_strtod_l+0x274>
 8005644:	2301      	movs	r3, #1
 8005646:	f7ff bb95 	b.w	8004d74 <_strtod_l+0x2e4>
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w
 8005650:	ffc00000 	.word	0xffc00000
 8005654:	41dfffff 	.word	0x41dfffff
 8005658:	94a03595 	.word	0x94a03595
 800565c:	3fcfffff 	.word	0x3fcfffff

08005660 <strtod>:
 8005660:	460a      	mov	r2, r1
 8005662:	4601      	mov	r1, r0
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <strtod+0x10>)
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <strtod+0x14>)
 8005668:	6800      	ldr	r0, [r0, #0]
 800566a:	f7ff ba11 	b.w	8004a90 <_strtod_l>
 800566e:	bf00      	nop
 8005670:	20000020 	.word	0x20000020
 8005674:	20000088 	.word	0x20000088

08005678 <_write_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	2200      	movs	r2, #0
 8005682:	4d05      	ldr	r5, [pc, #20]	; (8005698 <_write_r+0x20>)
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fe ff4d 	bl	8004526 <_write>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_write_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_write_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	200002b8 	.word	0x200002b8

0800569c <_close_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	2300      	movs	r3, #0
 80056a0:	4d05      	ldr	r5, [pc, #20]	; (80056b8 <_close_r+0x1c>)
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fe ff59 	bl	800455e <_close>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_close_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_close_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200002b8 	.word	0x200002b8

080056bc <rshift>:
 80056bc:	6903      	ldr	r3, [r0, #16]
 80056be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80056c6:	f100 0414 	add.w	r4, r0, #20
 80056ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80056ce:	dd46      	ble.n	800575e <rshift+0xa2>
 80056d0:	f011 011f 	ands.w	r1, r1, #31
 80056d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80056d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80056dc:	d10c      	bne.n	80056f8 <rshift+0x3c>
 80056de:	4629      	mov	r1, r5
 80056e0:	f100 0710 	add.w	r7, r0, #16
 80056e4:	42b1      	cmp	r1, r6
 80056e6:	d335      	bcc.n	8005754 <rshift+0x98>
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	1eea      	subs	r2, r5, #3
 80056ee:	4296      	cmp	r6, r2
 80056f0:	bf38      	it	cc
 80056f2:	2300      	movcc	r3, #0
 80056f4:	4423      	add	r3, r4
 80056f6:	e015      	b.n	8005724 <rshift+0x68>
 80056f8:	46a1      	mov	r9, r4
 80056fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80056fe:	f1c1 0820 	rsb	r8, r1, #32
 8005702:	40cf      	lsrs	r7, r1
 8005704:	f105 0e04 	add.w	lr, r5, #4
 8005708:	4576      	cmp	r6, lr
 800570a:	46f4      	mov	ip, lr
 800570c:	d816      	bhi.n	800573c <rshift+0x80>
 800570e:	1a9a      	subs	r2, r3, r2
 8005710:	0092      	lsls	r2, r2, #2
 8005712:	3a04      	subs	r2, #4
 8005714:	3501      	adds	r5, #1
 8005716:	42ae      	cmp	r6, r5
 8005718:	bf38      	it	cc
 800571a:	2200      	movcc	r2, #0
 800571c:	18a3      	adds	r3, r4, r2
 800571e:	50a7      	str	r7, [r4, r2]
 8005720:	b107      	cbz	r7, 8005724 <rshift+0x68>
 8005722:	3304      	adds	r3, #4
 8005724:	42a3      	cmp	r3, r4
 8005726:	eba3 0204 	sub.w	r2, r3, r4
 800572a:	bf08      	it	eq
 800572c:	2300      	moveq	r3, #0
 800572e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005732:	6102      	str	r2, [r0, #16]
 8005734:	bf08      	it	eq
 8005736:	6143      	streq	r3, [r0, #20]
 8005738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800573c:	f8dc c000 	ldr.w	ip, [ip]
 8005740:	fa0c fc08 	lsl.w	ip, ip, r8
 8005744:	ea4c 0707 	orr.w	r7, ip, r7
 8005748:	f849 7b04 	str.w	r7, [r9], #4
 800574c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005750:	40cf      	lsrs	r7, r1
 8005752:	e7d9      	b.n	8005708 <rshift+0x4c>
 8005754:	f851 cb04 	ldr.w	ip, [r1], #4
 8005758:	f847 cf04 	str.w	ip, [r7, #4]!
 800575c:	e7c2      	b.n	80056e4 <rshift+0x28>
 800575e:	4623      	mov	r3, r4
 8005760:	e7e0      	b.n	8005724 <rshift+0x68>

08005762 <__hexdig_fun>:
 8005762:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005766:	2b09      	cmp	r3, #9
 8005768:	d802      	bhi.n	8005770 <__hexdig_fun+0xe>
 800576a:	3820      	subs	r0, #32
 800576c:	b2c0      	uxtb	r0, r0
 800576e:	4770      	bx	lr
 8005770:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005774:	2b05      	cmp	r3, #5
 8005776:	d801      	bhi.n	800577c <__hexdig_fun+0x1a>
 8005778:	3847      	subs	r0, #71	; 0x47
 800577a:	e7f7      	b.n	800576c <__hexdig_fun+0xa>
 800577c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005780:	2b05      	cmp	r3, #5
 8005782:	d801      	bhi.n	8005788 <__hexdig_fun+0x26>
 8005784:	3827      	subs	r0, #39	; 0x27
 8005786:	e7f1      	b.n	800576c <__hexdig_fun+0xa>
 8005788:	2000      	movs	r0, #0
 800578a:	4770      	bx	lr

0800578c <__gethex>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	b08b      	sub	sp, #44	; 0x2c
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	4bb2      	ldr	r3, [pc, #712]	; (8005a60 <__gethex+0x2d4>)
 8005796:	9002      	str	r0, [sp, #8]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	468b      	mov	fp, r1
 800579c:	4618      	mov	r0, r3
 800579e:	4690      	mov	r8, r2
 80057a0:	9303      	str	r3, [sp, #12]
 80057a2:	f7fa fcef 	bl	8000184 <strlen>
 80057a6:	4682      	mov	sl, r0
 80057a8:	9b03      	ldr	r3, [sp, #12]
 80057aa:	f8db 2000 	ldr.w	r2, [fp]
 80057ae:	4403      	add	r3, r0
 80057b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80057b4:	9306      	str	r3, [sp, #24]
 80057b6:	1c93      	adds	r3, r2, #2
 80057b8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80057bc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80057c0:	32fe      	adds	r2, #254	; 0xfe
 80057c2:	18d1      	adds	r1, r2, r3
 80057c4:	461f      	mov	r7, r3
 80057c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80057ca:	9101      	str	r1, [sp, #4]
 80057cc:	2830      	cmp	r0, #48	; 0x30
 80057ce:	d0f8      	beq.n	80057c2 <__gethex+0x36>
 80057d0:	f7ff ffc7 	bl	8005762 <__hexdig_fun>
 80057d4:	4604      	mov	r4, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d13a      	bne.n	8005850 <__gethex+0xc4>
 80057da:	4652      	mov	r2, sl
 80057dc:	4638      	mov	r0, r7
 80057de:	9903      	ldr	r1, [sp, #12]
 80057e0:	f7ff f921 	bl	8004a26 <strncmp>
 80057e4:	4605      	mov	r5, r0
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d166      	bne.n	80058b8 <__gethex+0x12c>
 80057ea:	f817 000a 	ldrb.w	r0, [r7, sl]
 80057ee:	eb07 060a 	add.w	r6, r7, sl
 80057f2:	f7ff ffb6 	bl	8005762 <__hexdig_fun>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d060      	beq.n	80058bc <__gethex+0x130>
 80057fa:	4633      	mov	r3, r6
 80057fc:	7818      	ldrb	r0, [r3, #0]
 80057fe:	461f      	mov	r7, r3
 8005800:	2830      	cmp	r0, #48	; 0x30
 8005802:	f103 0301 	add.w	r3, r3, #1
 8005806:	d0f9      	beq.n	80057fc <__gethex+0x70>
 8005808:	f7ff ffab 	bl	8005762 <__hexdig_fun>
 800580c:	2301      	movs	r3, #1
 800580e:	fab0 f480 	clz	r4, r0
 8005812:	4635      	mov	r5, r6
 8005814:	0964      	lsrs	r4, r4, #5
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	463a      	mov	r2, r7
 800581a:	4616      	mov	r6, r2
 800581c:	7830      	ldrb	r0, [r6, #0]
 800581e:	3201      	adds	r2, #1
 8005820:	f7ff ff9f 	bl	8005762 <__hexdig_fun>
 8005824:	2800      	cmp	r0, #0
 8005826:	d1f8      	bne.n	800581a <__gethex+0x8e>
 8005828:	4652      	mov	r2, sl
 800582a:	4630      	mov	r0, r6
 800582c:	9903      	ldr	r1, [sp, #12]
 800582e:	f7ff f8fa 	bl	8004a26 <strncmp>
 8005832:	b980      	cbnz	r0, 8005856 <__gethex+0xca>
 8005834:	b94d      	cbnz	r5, 800584a <__gethex+0xbe>
 8005836:	eb06 050a 	add.w	r5, r6, sl
 800583a:	462a      	mov	r2, r5
 800583c:	4616      	mov	r6, r2
 800583e:	7830      	ldrb	r0, [r6, #0]
 8005840:	3201      	adds	r2, #1
 8005842:	f7ff ff8e 	bl	8005762 <__hexdig_fun>
 8005846:	2800      	cmp	r0, #0
 8005848:	d1f8      	bne.n	800583c <__gethex+0xb0>
 800584a:	1bad      	subs	r5, r5, r6
 800584c:	00ad      	lsls	r5, r5, #2
 800584e:	e004      	b.n	800585a <__gethex+0xce>
 8005850:	2400      	movs	r4, #0
 8005852:	4625      	mov	r5, r4
 8005854:	e7e0      	b.n	8005818 <__gethex+0x8c>
 8005856:	2d00      	cmp	r5, #0
 8005858:	d1f7      	bne.n	800584a <__gethex+0xbe>
 800585a:	7833      	ldrb	r3, [r6, #0]
 800585c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005860:	2b50      	cmp	r3, #80	; 0x50
 8005862:	d139      	bne.n	80058d8 <__gethex+0x14c>
 8005864:	7873      	ldrb	r3, [r6, #1]
 8005866:	2b2b      	cmp	r3, #43	; 0x2b
 8005868:	d02a      	beq.n	80058c0 <__gethex+0x134>
 800586a:	2b2d      	cmp	r3, #45	; 0x2d
 800586c:	d02c      	beq.n	80058c8 <__gethex+0x13c>
 800586e:	f04f 0900 	mov.w	r9, #0
 8005872:	1c71      	adds	r1, r6, #1
 8005874:	7808      	ldrb	r0, [r1, #0]
 8005876:	f7ff ff74 	bl	8005762 <__hexdig_fun>
 800587a:	1e43      	subs	r3, r0, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b18      	cmp	r3, #24
 8005880:	d82a      	bhi.n	80058d8 <__gethex+0x14c>
 8005882:	f1a0 0210 	sub.w	r2, r0, #16
 8005886:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800588a:	f7ff ff6a 	bl	8005762 <__hexdig_fun>
 800588e:	1e43      	subs	r3, r0, #1
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b18      	cmp	r3, #24
 8005894:	d91b      	bls.n	80058ce <__gethex+0x142>
 8005896:	f1b9 0f00 	cmp.w	r9, #0
 800589a:	d000      	beq.n	800589e <__gethex+0x112>
 800589c:	4252      	negs	r2, r2
 800589e:	4415      	add	r5, r2
 80058a0:	f8cb 1000 	str.w	r1, [fp]
 80058a4:	b1d4      	cbz	r4, 80058dc <__gethex+0x150>
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf14      	ite	ne
 80058ac:	2700      	movne	r7, #0
 80058ae:	2706      	moveq	r7, #6
 80058b0:	4638      	mov	r0, r7
 80058b2:	b00b      	add	sp, #44	; 0x2c
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	463e      	mov	r6, r7
 80058ba:	4625      	mov	r5, r4
 80058bc:	2401      	movs	r4, #1
 80058be:	e7cc      	b.n	800585a <__gethex+0xce>
 80058c0:	f04f 0900 	mov.w	r9, #0
 80058c4:	1cb1      	adds	r1, r6, #2
 80058c6:	e7d5      	b.n	8005874 <__gethex+0xe8>
 80058c8:	f04f 0901 	mov.w	r9, #1
 80058cc:	e7fa      	b.n	80058c4 <__gethex+0x138>
 80058ce:	230a      	movs	r3, #10
 80058d0:	fb03 0202 	mla	r2, r3, r2, r0
 80058d4:	3a10      	subs	r2, #16
 80058d6:	e7d6      	b.n	8005886 <__gethex+0xfa>
 80058d8:	4631      	mov	r1, r6
 80058da:	e7e1      	b.n	80058a0 <__gethex+0x114>
 80058dc:	4621      	mov	r1, r4
 80058de:	1bf3      	subs	r3, r6, r7
 80058e0:	3b01      	subs	r3, #1
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	dc0a      	bgt.n	80058fc <__gethex+0x170>
 80058e6:	9802      	ldr	r0, [sp, #8]
 80058e8:	f000 fa7e 	bl	8005de8 <_Balloc>
 80058ec:	4604      	mov	r4, r0
 80058ee:	b940      	cbnz	r0, 8005902 <__gethex+0x176>
 80058f0:	4602      	mov	r2, r0
 80058f2:	21de      	movs	r1, #222	; 0xde
 80058f4:	4b5b      	ldr	r3, [pc, #364]	; (8005a64 <__gethex+0x2d8>)
 80058f6:	485c      	ldr	r0, [pc, #368]	; (8005a68 <__gethex+0x2dc>)
 80058f8:	f001 ff10 	bl	800771c <__assert_func>
 80058fc:	3101      	adds	r1, #1
 80058fe:	105b      	asrs	r3, r3, #1
 8005900:	e7ef      	b.n	80058e2 <__gethex+0x156>
 8005902:	f04f 0b00 	mov.w	fp, #0
 8005906:	f100 0914 	add.w	r9, r0, #20
 800590a:	f1ca 0301 	rsb	r3, sl, #1
 800590e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005912:	f8cd b004 	str.w	fp, [sp, #4]
 8005916:	9308      	str	r3, [sp, #32]
 8005918:	42b7      	cmp	r7, r6
 800591a:	d33f      	bcc.n	800599c <__gethex+0x210>
 800591c:	9f04      	ldr	r7, [sp, #16]
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	f847 3b04 	str.w	r3, [r7], #4
 8005924:	eba7 0709 	sub.w	r7, r7, r9
 8005928:	10bf      	asrs	r7, r7, #2
 800592a:	6127      	str	r7, [r4, #16]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fb4d 	bl	8005fcc <__hi0bits>
 8005932:	017f      	lsls	r7, r7, #5
 8005934:	f8d8 6000 	ldr.w	r6, [r8]
 8005938:	1a3f      	subs	r7, r7, r0
 800593a:	42b7      	cmp	r7, r6
 800593c:	dd62      	ble.n	8005a04 <__gethex+0x278>
 800593e:	1bbf      	subs	r7, r7, r6
 8005940:	4639      	mov	r1, r7
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fee7 	bl	8006716 <__any_on>
 8005948:	4682      	mov	sl, r0
 800594a:	b1a8      	cbz	r0, 8005978 <__gethex+0x1ec>
 800594c:	f04f 0a01 	mov.w	sl, #1
 8005950:	1e7b      	subs	r3, r7, #1
 8005952:	1159      	asrs	r1, r3, #5
 8005954:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005958:	f003 021f 	and.w	r2, r3, #31
 800595c:	fa0a f202 	lsl.w	r2, sl, r2
 8005960:	420a      	tst	r2, r1
 8005962:	d009      	beq.n	8005978 <__gethex+0x1ec>
 8005964:	4553      	cmp	r3, sl
 8005966:	dd05      	ble.n	8005974 <__gethex+0x1e8>
 8005968:	4620      	mov	r0, r4
 800596a:	1eb9      	subs	r1, r7, #2
 800596c:	f000 fed3 	bl	8006716 <__any_on>
 8005970:	2800      	cmp	r0, #0
 8005972:	d144      	bne.n	80059fe <__gethex+0x272>
 8005974:	f04f 0a02 	mov.w	sl, #2
 8005978:	4639      	mov	r1, r7
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fe9e 	bl	80056bc <rshift>
 8005980:	443d      	add	r5, r7
 8005982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005986:	42ab      	cmp	r3, r5
 8005988:	da4a      	bge.n	8005a20 <__gethex+0x294>
 800598a:	4621      	mov	r1, r4
 800598c:	9802      	ldr	r0, [sp, #8]
 800598e:	f000 fa6b 	bl	8005e68 <_Bfree>
 8005992:	2300      	movs	r3, #0
 8005994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005996:	27a3      	movs	r7, #163	; 0xa3
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e789      	b.n	80058b0 <__gethex+0x124>
 800599c:	1e73      	subs	r3, r6, #1
 800599e:	9a06      	ldr	r2, [sp, #24]
 80059a0:	9307      	str	r3, [sp, #28]
 80059a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d019      	beq.n	80059de <__gethex+0x252>
 80059aa:	f1bb 0f20 	cmp.w	fp, #32
 80059ae:	d107      	bne.n	80059c0 <__gethex+0x234>
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	9a01      	ldr	r2, [sp, #4]
 80059b4:	f843 2b04 	str.w	r2, [r3], #4
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	2300      	movs	r3, #0
 80059bc:	469b      	mov	fp, r3
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80059c4:	f7ff fecd 	bl	8005762 <__hexdig_fun>
 80059c8:	9b01      	ldr	r3, [sp, #4]
 80059ca:	f000 000f 	and.w	r0, r0, #15
 80059ce:	fa00 f00b 	lsl.w	r0, r0, fp
 80059d2:	4303      	orrs	r3, r0
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	f10b 0b04 	add.w	fp, fp, #4
 80059da:	9b07      	ldr	r3, [sp, #28]
 80059dc:	e00d      	b.n	80059fa <__gethex+0x26e>
 80059de:	9a08      	ldr	r2, [sp, #32]
 80059e0:	1e73      	subs	r3, r6, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	42bb      	cmp	r3, r7
 80059e6:	d3e0      	bcc.n	80059aa <__gethex+0x21e>
 80059e8:	4618      	mov	r0, r3
 80059ea:	4652      	mov	r2, sl
 80059ec:	9903      	ldr	r1, [sp, #12]
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	f7ff f819 	bl	8004a26 <strncmp>
 80059f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1d7      	bne.n	80059aa <__gethex+0x21e>
 80059fa:	461e      	mov	r6, r3
 80059fc:	e78c      	b.n	8005918 <__gethex+0x18c>
 80059fe:	f04f 0a03 	mov.w	sl, #3
 8005a02:	e7b9      	b.n	8005978 <__gethex+0x1ec>
 8005a04:	da09      	bge.n	8005a1a <__gethex+0x28e>
 8005a06:	1bf7      	subs	r7, r6, r7
 8005a08:	4621      	mov	r1, r4
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	9802      	ldr	r0, [sp, #8]
 8005a0e:	f000 fc43 	bl	8006298 <__lshift>
 8005a12:	4604      	mov	r4, r0
 8005a14:	1bed      	subs	r5, r5, r7
 8005a16:	f100 0914 	add.w	r9, r0, #20
 8005a1a:	f04f 0a00 	mov.w	sl, #0
 8005a1e:	e7b0      	b.n	8005982 <__gethex+0x1f6>
 8005a20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005a24:	42a8      	cmp	r0, r5
 8005a26:	dd72      	ble.n	8005b0e <__gethex+0x382>
 8005a28:	1b45      	subs	r5, r0, r5
 8005a2a:	42ae      	cmp	r6, r5
 8005a2c:	dc35      	bgt.n	8005a9a <__gethex+0x30e>
 8005a2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d029      	beq.n	8005a8a <__gethex+0x2fe>
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d02b      	beq.n	8005a92 <__gethex+0x306>
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d11c      	bne.n	8005a78 <__gethex+0x2ec>
 8005a3e:	42ae      	cmp	r6, r5
 8005a40:	d11a      	bne.n	8005a78 <__gethex+0x2ec>
 8005a42:	2e01      	cmp	r6, #1
 8005a44:	d112      	bne.n	8005a6c <__gethex+0x2e0>
 8005a46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a4a:	9a05      	ldr	r2, [sp, #20]
 8005a4c:	2762      	movs	r7, #98	; 0x62
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	2301      	movs	r3, #1
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	f8c9 3000 	str.w	r3, [r9]
 8005a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a5a:	601c      	str	r4, [r3, #0]
 8005a5c:	e728      	b.n	80058b0 <__gethex+0x124>
 8005a5e:	bf00      	nop
 8005a60:	08008490 	.word	0x08008490
 8005a64:	08008418 	.word	0x08008418
 8005a68:	08008429 	.word	0x08008429
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	1e71      	subs	r1, r6, #1
 8005a70:	f000 fe51 	bl	8006716 <__any_on>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d1e6      	bne.n	8005a46 <__gethex+0x2ba>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	9802      	ldr	r0, [sp, #8]
 8005a7c:	f000 f9f4 	bl	8005e68 <_Bfree>
 8005a80:	2300      	movs	r3, #0
 8005a82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a84:	2750      	movs	r7, #80	; 0x50
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e712      	b.n	80058b0 <__gethex+0x124>
 8005a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f3      	bne.n	8005a78 <__gethex+0x2ec>
 8005a90:	e7d9      	b.n	8005a46 <__gethex+0x2ba>
 8005a92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1d6      	bne.n	8005a46 <__gethex+0x2ba>
 8005a98:	e7ee      	b.n	8005a78 <__gethex+0x2ec>
 8005a9a:	1e6f      	subs	r7, r5, #1
 8005a9c:	f1ba 0f00 	cmp.w	sl, #0
 8005aa0:	d132      	bne.n	8005b08 <__gethex+0x37c>
 8005aa2:	b127      	cbz	r7, 8005aae <__gethex+0x322>
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fe35 	bl	8006716 <__any_on>
 8005aac:	4682      	mov	sl, r0
 8005aae:	2101      	movs	r1, #1
 8005ab0:	117b      	asrs	r3, r7, #5
 8005ab2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005ab6:	f007 071f 	and.w	r7, r7, #31
 8005aba:	fa01 f707 	lsl.w	r7, r1, r7
 8005abe:	421f      	tst	r7, r3
 8005ac0:	f04f 0702 	mov.w	r7, #2
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	bf18      	it	ne
 8005aca:	f04a 0a02 	orrne.w	sl, sl, #2
 8005ace:	1b76      	subs	r6, r6, r5
 8005ad0:	f7ff fdf4 	bl	80056bc <rshift>
 8005ad4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005ad8:	f1ba 0f00 	cmp.w	sl, #0
 8005adc:	d048      	beq.n	8005b70 <__gethex+0x3e4>
 8005ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d015      	beq.n	8005b12 <__gethex+0x386>
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d017      	beq.n	8005b1a <__gethex+0x38e>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d109      	bne.n	8005b02 <__gethex+0x376>
 8005aee:	f01a 0f02 	tst.w	sl, #2
 8005af2:	d006      	beq.n	8005b02 <__gethex+0x376>
 8005af4:	f8d9 0000 	ldr.w	r0, [r9]
 8005af8:	ea4a 0a00 	orr.w	sl, sl, r0
 8005afc:	f01a 0f01 	tst.w	sl, #1
 8005b00:	d10e      	bne.n	8005b20 <__gethex+0x394>
 8005b02:	f047 0710 	orr.w	r7, r7, #16
 8005b06:	e033      	b.n	8005b70 <__gethex+0x3e4>
 8005b08:	f04f 0a01 	mov.w	sl, #1
 8005b0c:	e7cf      	b.n	8005aae <__gethex+0x322>
 8005b0e:	2701      	movs	r7, #1
 8005b10:	e7e2      	b.n	8005ad8 <__gethex+0x34c>
 8005b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b14:	f1c3 0301 	rsb	r3, r3, #1
 8005b18:	9315      	str	r3, [sp, #84]	; 0x54
 8005b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <__gethex+0x376>
 8005b20:	f04f 0c00 	mov.w	ip, #0
 8005b24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b28:	f104 0314 	add.w	r3, r4, #20
 8005b2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005b30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005b3e:	d01c      	beq.n	8005b7a <__gethex+0x3ee>
 8005b40:	3201      	adds	r2, #1
 8005b42:	6002      	str	r2, [r0, #0]
 8005b44:	2f02      	cmp	r7, #2
 8005b46:	f104 0314 	add.w	r3, r4, #20
 8005b4a:	d13d      	bne.n	8005bc8 <__gethex+0x43c>
 8005b4c:	f8d8 2000 	ldr.w	r2, [r8]
 8005b50:	3a01      	subs	r2, #1
 8005b52:	42b2      	cmp	r2, r6
 8005b54:	d10a      	bne.n	8005b6c <__gethex+0x3e0>
 8005b56:	2201      	movs	r2, #1
 8005b58:	1171      	asrs	r1, r6, #5
 8005b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b5e:	f006 061f 	and.w	r6, r6, #31
 8005b62:	fa02 f606 	lsl.w	r6, r2, r6
 8005b66:	421e      	tst	r6, r3
 8005b68:	bf18      	it	ne
 8005b6a:	4617      	movne	r7, r2
 8005b6c:	f047 0720 	orr.w	r7, r7, #32
 8005b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b72:	601c      	str	r4, [r3, #0]
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	601d      	str	r5, [r3, #0]
 8005b78:	e69a      	b.n	80058b0 <__gethex+0x124>
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005b80:	d8d8      	bhi.n	8005b34 <__gethex+0x3a8>
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	459b      	cmp	fp, r3
 8005b86:	db17      	blt.n	8005bb8 <__gethex+0x42c>
 8005b88:	6861      	ldr	r1, [r4, #4]
 8005b8a:	9802      	ldr	r0, [sp, #8]
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	f000 f92b 	bl	8005de8 <_Balloc>
 8005b92:	4681      	mov	r9, r0
 8005b94:	b918      	cbnz	r0, 8005b9e <__gethex+0x412>
 8005b96:	4602      	mov	r2, r0
 8005b98:	2184      	movs	r1, #132	; 0x84
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <__gethex+0x474>)
 8005b9c:	e6ab      	b.n	80058f6 <__gethex+0x16a>
 8005b9e:	6922      	ldr	r2, [r4, #16]
 8005ba0:	f104 010c 	add.w	r1, r4, #12
 8005ba4:	3202      	adds	r2, #2
 8005ba6:	0092      	lsls	r2, r2, #2
 8005ba8:	300c      	adds	r0, #12
 8005baa:	f7fe fda3 	bl	80046f4 <memcpy>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	9802      	ldr	r0, [sp, #8]
 8005bb2:	f000 f959 	bl	8005e68 <_Bfree>
 8005bb6:	464c      	mov	r4, r9
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	6122      	str	r2, [r4, #16]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bc4:	615a      	str	r2, [r3, #20]
 8005bc6:	e7bd      	b.n	8005b44 <__gethex+0x3b8>
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	455a      	cmp	r2, fp
 8005bcc:	dd0b      	ble.n	8005be6 <__gethex+0x45a>
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff fd73 	bl	80056bc <rshift>
 8005bd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bda:	3501      	adds	r5, #1
 8005bdc:	42ab      	cmp	r3, r5
 8005bde:	f6ff aed4 	blt.w	800598a <__gethex+0x1fe>
 8005be2:	2701      	movs	r7, #1
 8005be4:	e7c2      	b.n	8005b6c <__gethex+0x3e0>
 8005be6:	f016 061f 	ands.w	r6, r6, #31
 8005bea:	d0fa      	beq.n	8005be2 <__gethex+0x456>
 8005bec:	4453      	add	r3, sl
 8005bee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005bf2:	f000 f9eb 	bl	8005fcc <__hi0bits>
 8005bf6:	f1c6 0620 	rsb	r6, r6, #32
 8005bfa:	42b0      	cmp	r0, r6
 8005bfc:	dbe7      	blt.n	8005bce <__gethex+0x442>
 8005bfe:	e7f0      	b.n	8005be2 <__gethex+0x456>
 8005c00:	08008418 	.word	0x08008418

08005c04 <L_shift>:
 8005c04:	f1c2 0208 	rsb	r2, r2, #8
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	b570      	push	{r4, r5, r6, lr}
 8005c0c:	f1c2 0620 	rsb	r6, r2, #32
 8005c10:	6843      	ldr	r3, [r0, #4]
 8005c12:	6804      	ldr	r4, [r0, #0]
 8005c14:	fa03 f506 	lsl.w	r5, r3, r6
 8005c18:	432c      	orrs	r4, r5
 8005c1a:	40d3      	lsrs	r3, r2
 8005c1c:	6004      	str	r4, [r0, #0]
 8005c1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c22:	4288      	cmp	r0, r1
 8005c24:	d3f4      	bcc.n	8005c10 <L_shift+0xc>
 8005c26:	bd70      	pop	{r4, r5, r6, pc}

08005c28 <__match>:
 8005c28:	b530      	push	{r4, r5, lr}
 8005c2a:	6803      	ldr	r3, [r0, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c32:	b914      	cbnz	r4, 8005c3a <__match+0x12>
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	2001      	movs	r0, #1
 8005c38:	bd30      	pop	{r4, r5, pc}
 8005c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005c42:	2d19      	cmp	r5, #25
 8005c44:	bf98      	it	ls
 8005c46:	3220      	addls	r2, #32
 8005c48:	42a2      	cmp	r2, r4
 8005c4a:	d0f0      	beq.n	8005c2e <__match+0x6>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e7f3      	b.n	8005c38 <__match+0x10>

08005c50 <__hexnan>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	2500      	movs	r5, #0
 8005c56:	680b      	ldr	r3, [r1, #0]
 8005c58:	4682      	mov	sl, r0
 8005c5a:	115e      	asrs	r6, r3, #5
 8005c5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005c60:	f013 031f 	ands.w	r3, r3, #31
 8005c64:	bf18      	it	ne
 8005c66:	3604      	addne	r6, #4
 8005c68:	1f37      	subs	r7, r6, #4
 8005c6a:	46b9      	mov	r9, r7
 8005c6c:	463c      	mov	r4, r7
 8005c6e:	46ab      	mov	fp, r5
 8005c70:	b087      	sub	sp, #28
 8005c72:	4690      	mov	r8, r2
 8005c74:	6802      	ldr	r2, [r0, #0]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	f846 5c04 	str.w	r5, [r6, #-4]
 8005c7c:	9502      	str	r5, [sp, #8]
 8005c7e:	7851      	ldrb	r1, [r2, #1]
 8005c80:	1c53      	adds	r3, r2, #1
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	b341      	cbz	r1, 8005cd8 <__hexnan+0x88>
 8005c86:	4608      	mov	r0, r1
 8005c88:	9205      	str	r2, [sp, #20]
 8005c8a:	9104      	str	r1, [sp, #16]
 8005c8c:	f7ff fd69 	bl	8005762 <__hexdig_fun>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d14f      	bne.n	8005d34 <__hexnan+0xe4>
 8005c94:	9904      	ldr	r1, [sp, #16]
 8005c96:	9a05      	ldr	r2, [sp, #20]
 8005c98:	2920      	cmp	r1, #32
 8005c9a:	d818      	bhi.n	8005cce <__hexnan+0x7e>
 8005c9c:	9b02      	ldr	r3, [sp, #8]
 8005c9e:	459b      	cmp	fp, r3
 8005ca0:	dd13      	ble.n	8005cca <__hexnan+0x7a>
 8005ca2:	454c      	cmp	r4, r9
 8005ca4:	d206      	bcs.n	8005cb4 <__hexnan+0x64>
 8005ca6:	2d07      	cmp	r5, #7
 8005ca8:	dc04      	bgt.n	8005cb4 <__hexnan+0x64>
 8005caa:	462a      	mov	r2, r5
 8005cac:	4649      	mov	r1, r9
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff ffa8 	bl	8005c04 <L_shift>
 8005cb4:	4544      	cmp	r4, r8
 8005cb6:	d950      	bls.n	8005d5a <__hexnan+0x10a>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f1a4 0904 	sub.w	r9, r4, #4
 8005cbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8005cc2:	461d      	mov	r5, r3
 8005cc4:	464c      	mov	r4, r9
 8005cc6:	f8cd b008 	str.w	fp, [sp, #8]
 8005cca:	9a03      	ldr	r2, [sp, #12]
 8005ccc:	e7d7      	b.n	8005c7e <__hexnan+0x2e>
 8005cce:	2929      	cmp	r1, #41	; 0x29
 8005cd0:	d156      	bne.n	8005d80 <__hexnan+0x130>
 8005cd2:	3202      	adds	r2, #2
 8005cd4:	f8ca 2000 	str.w	r2, [sl]
 8005cd8:	f1bb 0f00 	cmp.w	fp, #0
 8005cdc:	d050      	beq.n	8005d80 <__hexnan+0x130>
 8005cde:	454c      	cmp	r4, r9
 8005ce0:	d206      	bcs.n	8005cf0 <__hexnan+0xa0>
 8005ce2:	2d07      	cmp	r5, #7
 8005ce4:	dc04      	bgt.n	8005cf0 <__hexnan+0xa0>
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4620      	mov	r0, r4
 8005cec:	f7ff ff8a 	bl	8005c04 <L_shift>
 8005cf0:	4544      	cmp	r4, r8
 8005cf2:	d934      	bls.n	8005d5e <__hexnan+0x10e>
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	f1a8 0204 	sub.w	r2, r8, #4
 8005cfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8005cfe:	429f      	cmp	r7, r3
 8005d00:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d04:	d2f9      	bcs.n	8005cfa <__hexnan+0xaa>
 8005d06:	1b3b      	subs	r3, r7, r4
 8005d08:	f023 0303 	bic.w	r3, r3, #3
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	3401      	adds	r4, #1
 8005d10:	3e03      	subs	r6, #3
 8005d12:	42b4      	cmp	r4, r6
 8005d14:	bf88      	it	hi
 8005d16:	2304      	movhi	r3, #4
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4443      	add	r3, r8
 8005d1c:	f843 2b04 	str.w	r2, [r3], #4
 8005d20:	429f      	cmp	r7, r3
 8005d22:	d2fb      	bcs.n	8005d1c <__hexnan+0xcc>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	b91b      	cbnz	r3, 8005d30 <__hexnan+0xe0>
 8005d28:	4547      	cmp	r7, r8
 8005d2a:	d127      	bne.n	8005d7c <__hexnan+0x12c>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	2005      	movs	r0, #5
 8005d32:	e026      	b.n	8005d82 <__hexnan+0x132>
 8005d34:	3501      	adds	r5, #1
 8005d36:	2d08      	cmp	r5, #8
 8005d38:	f10b 0b01 	add.w	fp, fp, #1
 8005d3c:	dd06      	ble.n	8005d4c <__hexnan+0xfc>
 8005d3e:	4544      	cmp	r4, r8
 8005d40:	d9c3      	bls.n	8005cca <__hexnan+0x7a>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2501      	movs	r5, #1
 8005d46:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d4a:	3c04      	subs	r4, #4
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	f000 000f 	and.w	r0, r0, #15
 8005d52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	e7b7      	b.n	8005cca <__hexnan+0x7a>
 8005d5a:	2508      	movs	r5, #8
 8005d5c:	e7b5      	b.n	8005cca <__hexnan+0x7a>
 8005d5e:	9b01      	ldr	r3, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0df      	beq.n	8005d24 <__hexnan+0xd4>
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	f1c3 0320 	rsb	r3, r3, #32
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005d74:	401a      	ands	r2, r3
 8005d76:	f846 2c04 	str.w	r2, [r6, #-4]
 8005d7a:	e7d3      	b.n	8005d24 <__hexnan+0xd4>
 8005d7c:	3f04      	subs	r7, #4
 8005d7e:	e7d1      	b.n	8005d24 <__hexnan+0xd4>
 8005d80:	2004      	movs	r0, #4
 8005d82:	b007      	add	sp, #28
 8005d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d88 <_lseek_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	2200      	movs	r2, #0
 8005d92:	4d05      	ldr	r5, [pc, #20]	; (8005da8 <_lseek_r+0x20>)
 8005d94:	602a      	str	r2, [r5, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f7fe fc05 	bl	80045a6 <_lseek>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_lseek_r+0x1e>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_lseek_r+0x1e>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	200002b8 	.word	0x200002b8

08005dac <__ascii_mbtowc>:
 8005dac:	b082      	sub	sp, #8
 8005dae:	b901      	cbnz	r1, 8005db2 <__ascii_mbtowc+0x6>
 8005db0:	a901      	add	r1, sp, #4
 8005db2:	b142      	cbz	r2, 8005dc6 <__ascii_mbtowc+0x1a>
 8005db4:	b14b      	cbz	r3, 8005dca <__ascii_mbtowc+0x1e>
 8005db6:	7813      	ldrb	r3, [r2, #0]
 8005db8:	600b      	str	r3, [r1, #0]
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	1e10      	subs	r0, r2, #0
 8005dbe:	bf18      	it	ne
 8005dc0:	2001      	movne	r0, #1
 8005dc2:	b002      	add	sp, #8
 8005dc4:	4770      	bx	lr
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	e7fb      	b.n	8005dc2 <__ascii_mbtowc+0x16>
 8005dca:	f06f 0001 	mvn.w	r0, #1
 8005dce:	e7f8      	b.n	8005dc2 <__ascii_mbtowc+0x16>

08005dd0 <__malloc_lock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__malloc_lock+0x8>)
 8005dd2:	f001 be87 	b.w	8007ae4 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	200002bc 	.word	0x200002bc

08005ddc <__malloc_unlock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__malloc_unlock+0x8>)
 8005dde:	f001 be82 	b.w	8007ae6 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	200002bc 	.word	0x200002bc

08005de8 <_Balloc>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	b976      	cbnz	r6, 8005e10 <_Balloc+0x28>
 8005df2:	2010      	movs	r0, #16
 8005df4:	f7fe fc6e 	bl	80046d4 <malloc>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6260      	str	r0, [r4, #36]	; 0x24
 8005dfc:	b920      	cbnz	r0, 8005e08 <_Balloc+0x20>
 8005dfe:	2166      	movs	r1, #102	; 0x66
 8005e00:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <_Balloc+0x78>)
 8005e02:	4818      	ldr	r0, [pc, #96]	; (8005e64 <_Balloc+0x7c>)
 8005e04:	f001 fc8a 	bl	800771c <__assert_func>
 8005e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e0c:	6006      	str	r6, [r0, #0]
 8005e0e:	60c6      	str	r6, [r0, #12]
 8005e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e12:	68f3      	ldr	r3, [r6, #12]
 8005e14:	b183      	cbz	r3, 8005e38 <_Balloc+0x50>
 8005e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e1e:	b9b8      	cbnz	r0, 8005e50 <_Balloc+0x68>
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f605 	lsl.w	r6, r1, r5
 8005e26:	1d72      	adds	r2, r6, #5
 8005e28:	4620      	mov	r0, r4
 8005e2a:	0092      	lsls	r2, r2, #2
 8005e2c:	f000 fc94 	bl	8006758 <_calloc_r>
 8005e30:	b160      	cbz	r0, 8005e4c <_Balloc+0x64>
 8005e32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e36:	e00e      	b.n	8005e56 <_Balloc+0x6e>
 8005e38:	2221      	movs	r2, #33	; 0x21
 8005e3a:	2104      	movs	r1, #4
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fc8b 	bl	8006758 <_calloc_r>
 8005e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e44:	60f0      	str	r0, [r6, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e4      	bne.n	8005e16 <_Balloc+0x2e>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	6802      	ldr	r2, [r0, #0]
 8005e52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e56:	2300      	movs	r3, #0
 8005e58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e5c:	e7f7      	b.n	8005e4e <_Balloc+0x66>
 8005e5e:	bf00      	nop
 8005e60:	080084a4 	.word	0x080084a4
 8005e64:	080084bb 	.word	0x080084bb

08005e68 <_Bfree>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	b976      	cbnz	r6, 8005e90 <_Bfree+0x28>
 8005e72:	2010      	movs	r0, #16
 8005e74:	f7fe fc2e 	bl	80046d4 <malloc>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6268      	str	r0, [r5, #36]	; 0x24
 8005e7c:	b920      	cbnz	r0, 8005e88 <_Bfree+0x20>
 8005e7e:	218a      	movs	r1, #138	; 0x8a
 8005e80:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <_Bfree+0x3c>)
 8005e82:	4809      	ldr	r0, [pc, #36]	; (8005ea8 <_Bfree+0x40>)
 8005e84:	f001 fc4a 	bl	800771c <__assert_func>
 8005e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e8c:	6006      	str	r6, [r0, #0]
 8005e8e:	60c6      	str	r6, [r0, #12]
 8005e90:	b13c      	cbz	r4, 8005ea2 <_Bfree+0x3a>
 8005e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e94:	6862      	ldr	r2, [r4, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e9c:	6021      	str	r1, [r4, #0]
 8005e9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	080084a4 	.word	0x080084a4
 8005ea8:	080084bb 	.word	0x080084bb

08005eac <__multadd>:
 8005eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	461e      	mov	r6, r3
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	690d      	ldr	r5, [r1, #16]
 8005eba:	f101 0c14 	add.w	ip, r1, #20
 8005ebe:	f8dc 3000 	ldr.w	r3, [ip]
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	b299      	uxth	r1, r3
 8005ec6:	fb02 6101 	mla	r1, r2, r1, r6
 8005eca:	0c1e      	lsrs	r6, r3, #16
 8005ecc:	0c0b      	lsrs	r3, r1, #16
 8005ece:	fb02 3306 	mla	r3, r2, r6, r3
 8005ed2:	b289      	uxth	r1, r1
 8005ed4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ed8:	4285      	cmp	r5, r0
 8005eda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ede:	f84c 1b04 	str.w	r1, [ip], #4
 8005ee2:	dcec      	bgt.n	8005ebe <__multadd+0x12>
 8005ee4:	b30e      	cbz	r6, 8005f2a <__multadd+0x7e>
 8005ee6:	68a3      	ldr	r3, [r4, #8]
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	dc19      	bgt.n	8005f20 <__multadd+0x74>
 8005eec:	6861      	ldr	r1, [r4, #4]
 8005eee:	4638      	mov	r0, r7
 8005ef0:	3101      	adds	r1, #1
 8005ef2:	f7ff ff79 	bl	8005de8 <_Balloc>
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	b928      	cbnz	r0, 8005f06 <__multadd+0x5a>
 8005efa:	4602      	mov	r2, r0
 8005efc:	21b5      	movs	r1, #181	; 0xb5
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <__multadd+0x84>)
 8005f00:	480c      	ldr	r0, [pc, #48]	; (8005f34 <__multadd+0x88>)
 8005f02:	f001 fc0b 	bl	800771c <__assert_func>
 8005f06:	6922      	ldr	r2, [r4, #16]
 8005f08:	f104 010c 	add.w	r1, r4, #12
 8005f0c:	3202      	adds	r2, #2
 8005f0e:	0092      	lsls	r2, r2, #2
 8005f10:	300c      	adds	r0, #12
 8005f12:	f7fe fbef 	bl	80046f4 <memcpy>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f7ff ffa5 	bl	8005e68 <_Bfree>
 8005f1e:	4644      	mov	r4, r8
 8005f20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f24:	3501      	adds	r5, #1
 8005f26:	615e      	str	r6, [r3, #20]
 8005f28:	6125      	str	r5, [r4, #16]
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f30:	08008418 	.word	0x08008418
 8005f34:	080084bb 	.word	0x080084bb

08005f38 <__s2b>:
 8005f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	2209      	movs	r2, #9
 8005f40:	461f      	mov	r7, r3
 8005f42:	3308      	adds	r3, #8
 8005f44:	460c      	mov	r4, r1
 8005f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2100      	movs	r1, #0
 8005f50:	429a      	cmp	r2, r3
 8005f52:	db09      	blt.n	8005f68 <__s2b+0x30>
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff ff47 	bl	8005de8 <_Balloc>
 8005f5a:	b940      	cbnz	r0, 8005f6e <__s2b+0x36>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	21ce      	movs	r1, #206	; 0xce
 8005f60:	4b18      	ldr	r3, [pc, #96]	; (8005fc4 <__s2b+0x8c>)
 8005f62:	4819      	ldr	r0, [pc, #100]	; (8005fc8 <__s2b+0x90>)
 8005f64:	f001 fbda 	bl	800771c <__assert_func>
 8005f68:	0052      	lsls	r2, r2, #1
 8005f6a:	3101      	adds	r1, #1
 8005f6c:	e7f0      	b.n	8005f50 <__s2b+0x18>
 8005f6e:	9b08      	ldr	r3, [sp, #32]
 8005f70:	2d09      	cmp	r5, #9
 8005f72:	6143      	str	r3, [r0, #20]
 8005f74:	f04f 0301 	mov.w	r3, #1
 8005f78:	6103      	str	r3, [r0, #16]
 8005f7a:	dd16      	ble.n	8005faa <__s2b+0x72>
 8005f7c:	f104 0909 	add.w	r9, r4, #9
 8005f80:	46c8      	mov	r8, r9
 8005f82:	442c      	add	r4, r5
 8005f84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f88:	4601      	mov	r1, r0
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	3b30      	subs	r3, #48	; 0x30
 8005f90:	f7ff ff8c 	bl	8005eac <__multadd>
 8005f94:	45a0      	cmp	r8, r4
 8005f96:	d1f5      	bne.n	8005f84 <__s2b+0x4c>
 8005f98:	f1a5 0408 	sub.w	r4, r5, #8
 8005f9c:	444c      	add	r4, r9
 8005f9e:	1b2d      	subs	r5, r5, r4
 8005fa0:	1963      	adds	r3, r4, r5
 8005fa2:	42bb      	cmp	r3, r7
 8005fa4:	db04      	blt.n	8005fb0 <__s2b+0x78>
 8005fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005faa:	2509      	movs	r5, #9
 8005fac:	340a      	adds	r4, #10
 8005fae:	e7f6      	b.n	8005f9e <__s2b+0x66>
 8005fb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	220a      	movs	r2, #10
 8005fb8:	4630      	mov	r0, r6
 8005fba:	3b30      	subs	r3, #48	; 0x30
 8005fbc:	f7ff ff76 	bl	8005eac <__multadd>
 8005fc0:	e7ee      	b.n	8005fa0 <__s2b+0x68>
 8005fc2:	bf00      	nop
 8005fc4:	08008418 	.word	0x08008418
 8005fc8:	080084bb 	.word	0x080084bb

08005fcc <__hi0bits>:
 8005fcc:	0c02      	lsrs	r2, r0, #16
 8005fce:	0412      	lsls	r2, r2, #16
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	b9ca      	cbnz	r2, 8006008 <__hi0bits+0x3c>
 8005fd4:	0403      	lsls	r3, r0, #16
 8005fd6:	2010      	movs	r0, #16
 8005fd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fdc:	bf04      	itt	eq
 8005fde:	021b      	lsleq	r3, r3, #8
 8005fe0:	3008      	addeq	r0, #8
 8005fe2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005fe6:	bf04      	itt	eq
 8005fe8:	011b      	lsleq	r3, r3, #4
 8005fea:	3004      	addeq	r0, #4
 8005fec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ff0:	bf04      	itt	eq
 8005ff2:	009b      	lsleq	r3, r3, #2
 8005ff4:	3002      	addeq	r0, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	db05      	blt.n	8006006 <__hi0bits+0x3a>
 8005ffa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ffe:	f100 0001 	add.w	r0, r0, #1
 8006002:	bf08      	it	eq
 8006004:	2020      	moveq	r0, #32
 8006006:	4770      	bx	lr
 8006008:	2000      	movs	r0, #0
 800600a:	e7e5      	b.n	8005fd8 <__hi0bits+0xc>

0800600c <__lo0bits>:
 800600c:	6803      	ldr	r3, [r0, #0]
 800600e:	4602      	mov	r2, r0
 8006010:	f013 0007 	ands.w	r0, r3, #7
 8006014:	d00b      	beq.n	800602e <__lo0bits+0x22>
 8006016:	07d9      	lsls	r1, r3, #31
 8006018:	d421      	bmi.n	800605e <__lo0bits+0x52>
 800601a:	0798      	lsls	r0, r3, #30
 800601c:	bf49      	itett	mi
 800601e:	085b      	lsrmi	r3, r3, #1
 8006020:	089b      	lsrpl	r3, r3, #2
 8006022:	2001      	movmi	r0, #1
 8006024:	6013      	strmi	r3, [r2, #0]
 8006026:	bf5c      	itt	pl
 8006028:	2002      	movpl	r0, #2
 800602a:	6013      	strpl	r3, [r2, #0]
 800602c:	4770      	bx	lr
 800602e:	b299      	uxth	r1, r3
 8006030:	b909      	cbnz	r1, 8006036 <__lo0bits+0x2a>
 8006032:	2010      	movs	r0, #16
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	b2d9      	uxtb	r1, r3
 8006038:	b909      	cbnz	r1, 800603e <__lo0bits+0x32>
 800603a:	3008      	adds	r0, #8
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	0719      	lsls	r1, r3, #28
 8006040:	bf04      	itt	eq
 8006042:	091b      	lsreq	r3, r3, #4
 8006044:	3004      	addeq	r0, #4
 8006046:	0799      	lsls	r1, r3, #30
 8006048:	bf04      	itt	eq
 800604a:	089b      	lsreq	r3, r3, #2
 800604c:	3002      	addeq	r0, #2
 800604e:	07d9      	lsls	r1, r3, #31
 8006050:	d403      	bmi.n	800605a <__lo0bits+0x4e>
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	f100 0001 	add.w	r0, r0, #1
 8006058:	d003      	beq.n	8006062 <__lo0bits+0x56>
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4770      	bx	lr
 800605e:	2000      	movs	r0, #0
 8006060:	4770      	bx	lr
 8006062:	2020      	movs	r0, #32
 8006064:	4770      	bx	lr
	...

08006068 <__i2b>:
 8006068:	b510      	push	{r4, lr}
 800606a:	460c      	mov	r4, r1
 800606c:	2101      	movs	r1, #1
 800606e:	f7ff febb 	bl	8005de8 <_Balloc>
 8006072:	4602      	mov	r2, r0
 8006074:	b928      	cbnz	r0, 8006082 <__i2b+0x1a>
 8006076:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800607a:	4b04      	ldr	r3, [pc, #16]	; (800608c <__i2b+0x24>)
 800607c:	4804      	ldr	r0, [pc, #16]	; (8006090 <__i2b+0x28>)
 800607e:	f001 fb4d 	bl	800771c <__assert_func>
 8006082:	2301      	movs	r3, #1
 8006084:	6144      	str	r4, [r0, #20]
 8006086:	6103      	str	r3, [r0, #16]
 8006088:	bd10      	pop	{r4, pc}
 800608a:	bf00      	nop
 800608c:	08008418 	.word	0x08008418
 8006090:	080084bb 	.word	0x080084bb

08006094 <__multiply>:
 8006094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	4691      	mov	r9, r2
 800609a:	690a      	ldr	r2, [r1, #16]
 800609c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060a0:	460c      	mov	r4, r1
 80060a2:	429a      	cmp	r2, r3
 80060a4:	bfbe      	ittt	lt
 80060a6:	460b      	movlt	r3, r1
 80060a8:	464c      	movlt	r4, r9
 80060aa:	4699      	movlt	r9, r3
 80060ac:	6927      	ldr	r7, [r4, #16]
 80060ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	eb07 060a 	add.w	r6, r7, sl
 80060ba:	42b3      	cmp	r3, r6
 80060bc:	b085      	sub	sp, #20
 80060be:	bfb8      	it	lt
 80060c0:	3101      	addlt	r1, #1
 80060c2:	f7ff fe91 	bl	8005de8 <_Balloc>
 80060c6:	b930      	cbnz	r0, 80060d6 <__multiply+0x42>
 80060c8:	4602      	mov	r2, r0
 80060ca:	f240 115d 	movw	r1, #349	; 0x15d
 80060ce:	4b43      	ldr	r3, [pc, #268]	; (80061dc <__multiply+0x148>)
 80060d0:	4843      	ldr	r0, [pc, #268]	; (80061e0 <__multiply+0x14c>)
 80060d2:	f001 fb23 	bl	800771c <__assert_func>
 80060d6:	f100 0514 	add.w	r5, r0, #20
 80060da:	462b      	mov	r3, r5
 80060dc:	2200      	movs	r2, #0
 80060de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060e2:	4543      	cmp	r3, r8
 80060e4:	d321      	bcc.n	800612a <__multiply+0x96>
 80060e6:	f104 0314 	add.w	r3, r4, #20
 80060ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060ee:	f109 0314 	add.w	r3, r9, #20
 80060f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060f6:	9202      	str	r2, [sp, #8]
 80060f8:	1b3a      	subs	r2, r7, r4
 80060fa:	3a15      	subs	r2, #21
 80060fc:	f022 0203 	bic.w	r2, r2, #3
 8006100:	3204      	adds	r2, #4
 8006102:	f104 0115 	add.w	r1, r4, #21
 8006106:	428f      	cmp	r7, r1
 8006108:	bf38      	it	cc
 800610a:	2204      	movcc	r2, #4
 800610c:	9201      	str	r2, [sp, #4]
 800610e:	9a02      	ldr	r2, [sp, #8]
 8006110:	9303      	str	r3, [sp, #12]
 8006112:	429a      	cmp	r2, r3
 8006114:	d80c      	bhi.n	8006130 <__multiply+0x9c>
 8006116:	2e00      	cmp	r6, #0
 8006118:	dd03      	ble.n	8006122 <__multiply+0x8e>
 800611a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800611e:	2b00      	cmp	r3, #0
 8006120:	d059      	beq.n	80061d6 <__multiply+0x142>
 8006122:	6106      	str	r6, [r0, #16]
 8006124:	b005      	add	sp, #20
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	f843 2b04 	str.w	r2, [r3], #4
 800612e:	e7d8      	b.n	80060e2 <__multiply+0x4e>
 8006130:	f8b3 a000 	ldrh.w	sl, [r3]
 8006134:	f1ba 0f00 	cmp.w	sl, #0
 8006138:	d023      	beq.n	8006182 <__multiply+0xee>
 800613a:	46a9      	mov	r9, r5
 800613c:	f04f 0c00 	mov.w	ip, #0
 8006140:	f104 0e14 	add.w	lr, r4, #20
 8006144:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006148:	f8d9 1000 	ldr.w	r1, [r9]
 800614c:	fa1f fb82 	uxth.w	fp, r2
 8006150:	b289      	uxth	r1, r1
 8006152:	fb0a 110b 	mla	r1, sl, fp, r1
 8006156:	4461      	add	r1, ip
 8006158:	f8d9 c000 	ldr.w	ip, [r9]
 800615c:	0c12      	lsrs	r2, r2, #16
 800615e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006162:	fb0a c202 	mla	r2, sl, r2, ip
 8006166:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800616a:	b289      	uxth	r1, r1
 800616c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006170:	4577      	cmp	r7, lr
 8006172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006176:	f849 1b04 	str.w	r1, [r9], #4
 800617a:	d8e3      	bhi.n	8006144 <__multiply+0xb0>
 800617c:	9a01      	ldr	r2, [sp, #4]
 800617e:	f845 c002 	str.w	ip, [r5, r2]
 8006182:	9a03      	ldr	r2, [sp, #12]
 8006184:	3304      	adds	r3, #4
 8006186:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800618a:	f1b9 0f00 	cmp.w	r9, #0
 800618e:	d020      	beq.n	80061d2 <__multiply+0x13e>
 8006190:	46ae      	mov	lr, r5
 8006192:	f04f 0a00 	mov.w	sl, #0
 8006196:	6829      	ldr	r1, [r5, #0]
 8006198:	f104 0c14 	add.w	ip, r4, #20
 800619c:	f8bc b000 	ldrh.w	fp, [ip]
 80061a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061a4:	b289      	uxth	r1, r1
 80061a6:	fb09 220b 	mla	r2, r9, fp, r2
 80061aa:	4492      	add	sl, r2
 80061ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061b0:	f84e 1b04 	str.w	r1, [lr], #4
 80061b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061b8:	f8be 1000 	ldrh.w	r1, [lr]
 80061bc:	0c12      	lsrs	r2, r2, #16
 80061be:	fb09 1102 	mla	r1, r9, r2, r1
 80061c2:	4567      	cmp	r7, ip
 80061c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061cc:	d8e6      	bhi.n	800619c <__multiply+0x108>
 80061ce:	9a01      	ldr	r2, [sp, #4]
 80061d0:	50a9      	str	r1, [r5, r2]
 80061d2:	3504      	adds	r5, #4
 80061d4:	e79b      	b.n	800610e <__multiply+0x7a>
 80061d6:	3e01      	subs	r6, #1
 80061d8:	e79d      	b.n	8006116 <__multiply+0x82>
 80061da:	bf00      	nop
 80061dc:	08008418 	.word	0x08008418
 80061e0:	080084bb 	.word	0x080084bb

080061e4 <__pow5mult>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	4615      	mov	r5, r2
 80061ea:	f012 0203 	ands.w	r2, r2, #3
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	d007      	beq.n	8006204 <__pow5mult+0x20>
 80061f4:	4c25      	ldr	r4, [pc, #148]	; (800628c <__pow5mult+0xa8>)
 80061f6:	3a01      	subs	r2, #1
 80061f8:	2300      	movs	r3, #0
 80061fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061fe:	f7ff fe55 	bl	8005eac <__multadd>
 8006202:	4607      	mov	r7, r0
 8006204:	10ad      	asrs	r5, r5, #2
 8006206:	d03d      	beq.n	8006284 <__pow5mult+0xa0>
 8006208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800620a:	b97c      	cbnz	r4, 800622c <__pow5mult+0x48>
 800620c:	2010      	movs	r0, #16
 800620e:	f7fe fa61 	bl	80046d4 <malloc>
 8006212:	4602      	mov	r2, r0
 8006214:	6270      	str	r0, [r6, #36]	; 0x24
 8006216:	b928      	cbnz	r0, 8006224 <__pow5mult+0x40>
 8006218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <__pow5mult+0xac>)
 800621e:	481d      	ldr	r0, [pc, #116]	; (8006294 <__pow5mult+0xb0>)
 8006220:	f001 fa7c 	bl	800771c <__assert_func>
 8006224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006228:	6004      	str	r4, [r0, #0]
 800622a:	60c4      	str	r4, [r0, #12]
 800622c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006234:	b94c      	cbnz	r4, 800624a <__pow5mult+0x66>
 8006236:	f240 2171 	movw	r1, #625	; 0x271
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff14 	bl	8006068 <__i2b>
 8006240:	2300      	movs	r3, #0
 8006242:	4604      	mov	r4, r0
 8006244:	f8c8 0008 	str.w	r0, [r8, #8]
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	f04f 0900 	mov.w	r9, #0
 800624e:	07eb      	lsls	r3, r5, #31
 8006250:	d50a      	bpl.n	8006268 <__pow5mult+0x84>
 8006252:	4639      	mov	r1, r7
 8006254:	4622      	mov	r2, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff ff1c 	bl	8006094 <__multiply>
 800625c:	4680      	mov	r8, r0
 800625e:	4639      	mov	r1, r7
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff fe01 	bl	8005e68 <_Bfree>
 8006266:	4647      	mov	r7, r8
 8006268:	106d      	asrs	r5, r5, #1
 800626a:	d00b      	beq.n	8006284 <__pow5mult+0xa0>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	b938      	cbnz	r0, 8006280 <__pow5mult+0x9c>
 8006270:	4622      	mov	r2, r4
 8006272:	4621      	mov	r1, r4
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff ff0d 	bl	8006094 <__multiply>
 800627a:	6020      	str	r0, [r4, #0]
 800627c:	f8c0 9000 	str.w	r9, [r0]
 8006280:	4604      	mov	r4, r0
 8006282:	e7e4      	b.n	800624e <__pow5mult+0x6a>
 8006284:	4638      	mov	r0, r7
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	bf00      	nop
 800628c:	08008608 	.word	0x08008608
 8006290:	080084a4 	.word	0x080084a4
 8006294:	080084bb 	.word	0x080084bb

08006298 <__lshift>:
 8006298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	460c      	mov	r4, r1
 800629e:	4607      	mov	r7, r0
 80062a0:	4691      	mov	r9, r2
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6849      	ldr	r1, [r1, #4]
 80062a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062b0:	f108 0601 	add.w	r6, r8, #1
 80062b4:	42b3      	cmp	r3, r6
 80062b6:	db0b      	blt.n	80062d0 <__lshift+0x38>
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff fd95 	bl	8005de8 <_Balloc>
 80062be:	4605      	mov	r5, r0
 80062c0:	b948      	cbnz	r0, 80062d6 <__lshift+0x3e>
 80062c2:	4602      	mov	r2, r0
 80062c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062c8:	4b29      	ldr	r3, [pc, #164]	; (8006370 <__lshift+0xd8>)
 80062ca:	482a      	ldr	r0, [pc, #168]	; (8006374 <__lshift+0xdc>)
 80062cc:	f001 fa26 	bl	800771c <__assert_func>
 80062d0:	3101      	adds	r1, #1
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	e7ee      	b.n	80062b4 <__lshift+0x1c>
 80062d6:	2300      	movs	r3, #0
 80062d8:	f100 0114 	add.w	r1, r0, #20
 80062dc:	f100 0210 	add.w	r2, r0, #16
 80062e0:	4618      	mov	r0, r3
 80062e2:	4553      	cmp	r3, sl
 80062e4:	db37      	blt.n	8006356 <__lshift+0xbe>
 80062e6:	6920      	ldr	r0, [r4, #16]
 80062e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062ec:	f104 0314 	add.w	r3, r4, #20
 80062f0:	f019 091f 	ands.w	r9, r9, #31
 80062f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062fc:	d02f      	beq.n	800635e <__lshift+0xc6>
 80062fe:	468a      	mov	sl, r1
 8006300:	f04f 0c00 	mov.w	ip, #0
 8006304:	f1c9 0e20 	rsb	lr, r9, #32
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	fa02 f209 	lsl.w	r2, r2, r9
 800630e:	ea42 020c 	orr.w	r2, r2, ip
 8006312:	f84a 2b04 	str.w	r2, [sl], #4
 8006316:	f853 2b04 	ldr.w	r2, [r3], #4
 800631a:	4298      	cmp	r0, r3
 800631c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006320:	d8f2      	bhi.n	8006308 <__lshift+0x70>
 8006322:	1b03      	subs	r3, r0, r4
 8006324:	3b15      	subs	r3, #21
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	3304      	adds	r3, #4
 800632c:	f104 0215 	add.w	r2, r4, #21
 8006330:	4290      	cmp	r0, r2
 8006332:	bf38      	it	cc
 8006334:	2304      	movcc	r3, #4
 8006336:	f841 c003 	str.w	ip, [r1, r3]
 800633a:	f1bc 0f00 	cmp.w	ip, #0
 800633e:	d001      	beq.n	8006344 <__lshift+0xac>
 8006340:	f108 0602 	add.w	r6, r8, #2
 8006344:	3e01      	subs	r6, #1
 8006346:	4638      	mov	r0, r7
 8006348:	4621      	mov	r1, r4
 800634a:	612e      	str	r6, [r5, #16]
 800634c:	f7ff fd8c 	bl	8005e68 <_Bfree>
 8006350:	4628      	mov	r0, r5
 8006352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006356:	f842 0f04 	str.w	r0, [r2, #4]!
 800635a:	3301      	adds	r3, #1
 800635c:	e7c1      	b.n	80062e2 <__lshift+0x4a>
 800635e:	3904      	subs	r1, #4
 8006360:	f853 2b04 	ldr.w	r2, [r3], #4
 8006364:	4298      	cmp	r0, r3
 8006366:	f841 2f04 	str.w	r2, [r1, #4]!
 800636a:	d8f9      	bhi.n	8006360 <__lshift+0xc8>
 800636c:	e7ea      	b.n	8006344 <__lshift+0xac>
 800636e:	bf00      	nop
 8006370:	08008418 	.word	0x08008418
 8006374:	080084bb 	.word	0x080084bb

08006378 <__mcmp>:
 8006378:	4603      	mov	r3, r0
 800637a:	690a      	ldr	r2, [r1, #16]
 800637c:	6900      	ldr	r0, [r0, #16]
 800637e:	b530      	push	{r4, r5, lr}
 8006380:	1a80      	subs	r0, r0, r2
 8006382:	d10d      	bne.n	80063a0 <__mcmp+0x28>
 8006384:	3314      	adds	r3, #20
 8006386:	3114      	adds	r1, #20
 8006388:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800638c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006390:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006394:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006398:	4295      	cmp	r5, r2
 800639a:	d002      	beq.n	80063a2 <__mcmp+0x2a>
 800639c:	d304      	bcc.n	80063a8 <__mcmp+0x30>
 800639e:	2001      	movs	r0, #1
 80063a0:	bd30      	pop	{r4, r5, pc}
 80063a2:	42a3      	cmp	r3, r4
 80063a4:	d3f4      	bcc.n	8006390 <__mcmp+0x18>
 80063a6:	e7fb      	b.n	80063a0 <__mcmp+0x28>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	e7f8      	b.n	80063a0 <__mcmp+0x28>
	...

080063b0 <__mdiff>:
 80063b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	460d      	mov	r5, r1
 80063b6:	4607      	mov	r7, r0
 80063b8:	4611      	mov	r1, r2
 80063ba:	4628      	mov	r0, r5
 80063bc:	4614      	mov	r4, r2
 80063be:	f7ff ffdb 	bl	8006378 <__mcmp>
 80063c2:	1e06      	subs	r6, r0, #0
 80063c4:	d111      	bne.n	80063ea <__mdiff+0x3a>
 80063c6:	4631      	mov	r1, r6
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff fd0d 	bl	8005de8 <_Balloc>
 80063ce:	4602      	mov	r2, r0
 80063d0:	b928      	cbnz	r0, 80063de <__mdiff+0x2e>
 80063d2:	f240 2132 	movw	r1, #562	; 0x232
 80063d6:	4b3a      	ldr	r3, [pc, #232]	; (80064c0 <__mdiff+0x110>)
 80063d8:	483a      	ldr	r0, [pc, #232]	; (80064c4 <__mdiff+0x114>)
 80063da:	f001 f99f 	bl	800771c <__assert_func>
 80063de:	2301      	movs	r3, #1
 80063e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80063e4:	4610      	mov	r0, r2
 80063e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	bfa4      	itt	ge
 80063ec:	4623      	movge	r3, r4
 80063ee:	462c      	movge	r4, r5
 80063f0:	4638      	mov	r0, r7
 80063f2:	6861      	ldr	r1, [r4, #4]
 80063f4:	bfa6      	itte	ge
 80063f6:	461d      	movge	r5, r3
 80063f8:	2600      	movge	r6, #0
 80063fa:	2601      	movlt	r6, #1
 80063fc:	f7ff fcf4 	bl	8005de8 <_Balloc>
 8006400:	4602      	mov	r2, r0
 8006402:	b918      	cbnz	r0, 800640c <__mdiff+0x5c>
 8006404:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006408:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <__mdiff+0x110>)
 800640a:	e7e5      	b.n	80063d8 <__mdiff+0x28>
 800640c:	f102 0814 	add.w	r8, r2, #20
 8006410:	46c2      	mov	sl, r8
 8006412:	f04f 0c00 	mov.w	ip, #0
 8006416:	6927      	ldr	r7, [r4, #16]
 8006418:	60c6      	str	r6, [r0, #12]
 800641a:	692e      	ldr	r6, [r5, #16]
 800641c:	f104 0014 	add.w	r0, r4, #20
 8006420:	f105 0914 	add.w	r9, r5, #20
 8006424:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006428:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800642c:	3410      	adds	r4, #16
 800642e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006432:	f859 3b04 	ldr.w	r3, [r9], #4
 8006436:	fa1f f18b 	uxth.w	r1, fp
 800643a:	448c      	add	ip, r1
 800643c:	b299      	uxth	r1, r3
 800643e:	0c1b      	lsrs	r3, r3, #16
 8006440:	ebac 0101 	sub.w	r1, ip, r1
 8006444:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006448:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800644c:	b289      	uxth	r1, r1
 800644e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006452:	454e      	cmp	r6, r9
 8006454:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006458:	f84a 3b04 	str.w	r3, [sl], #4
 800645c:	d8e7      	bhi.n	800642e <__mdiff+0x7e>
 800645e:	1b73      	subs	r3, r6, r5
 8006460:	3b15      	subs	r3, #21
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	3515      	adds	r5, #21
 8006468:	3304      	adds	r3, #4
 800646a:	42ae      	cmp	r6, r5
 800646c:	bf38      	it	cc
 800646e:	2304      	movcc	r3, #4
 8006470:	4418      	add	r0, r3
 8006472:	4443      	add	r3, r8
 8006474:	461e      	mov	r6, r3
 8006476:	4605      	mov	r5, r0
 8006478:	4575      	cmp	r5, lr
 800647a:	d30e      	bcc.n	800649a <__mdiff+0xea>
 800647c:	f10e 0103 	add.w	r1, lr, #3
 8006480:	1a09      	subs	r1, r1, r0
 8006482:	f021 0103 	bic.w	r1, r1, #3
 8006486:	3803      	subs	r0, #3
 8006488:	4586      	cmp	lr, r0
 800648a:	bf38      	it	cc
 800648c:	2100      	movcc	r1, #0
 800648e:	4419      	add	r1, r3
 8006490:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006494:	b18b      	cbz	r3, 80064ba <__mdiff+0x10a>
 8006496:	6117      	str	r7, [r2, #16]
 8006498:	e7a4      	b.n	80063e4 <__mdiff+0x34>
 800649a:	f855 8b04 	ldr.w	r8, [r5], #4
 800649e:	fa1f f188 	uxth.w	r1, r8
 80064a2:	4461      	add	r1, ip
 80064a4:	140c      	asrs	r4, r1, #16
 80064a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064aa:	b289      	uxth	r1, r1
 80064ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80064b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80064b4:	f846 1b04 	str.w	r1, [r6], #4
 80064b8:	e7de      	b.n	8006478 <__mdiff+0xc8>
 80064ba:	3f01      	subs	r7, #1
 80064bc:	e7e8      	b.n	8006490 <__mdiff+0xe0>
 80064be:	bf00      	nop
 80064c0:	08008418 	.word	0x08008418
 80064c4:	080084bb 	.word	0x080084bb

080064c8 <__ulp>:
 80064c8:	4b11      	ldr	r3, [pc, #68]	; (8006510 <__ulp+0x48>)
 80064ca:	400b      	ands	r3, r1
 80064cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dd02      	ble.n	80064da <__ulp+0x12>
 80064d4:	2000      	movs	r0, #0
 80064d6:	4619      	mov	r1, r3
 80064d8:	4770      	bx	lr
 80064da:	425b      	negs	r3, r3
 80064dc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80064e0:	f04f 0000 	mov.w	r0, #0
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064ec:	da04      	bge.n	80064f8 <__ulp+0x30>
 80064ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064f2:	fa43 f102 	asr.w	r1, r3, r2
 80064f6:	4770      	bx	lr
 80064f8:	f1a2 0314 	sub.w	r3, r2, #20
 80064fc:	2b1e      	cmp	r3, #30
 80064fe:	bfd6      	itet	le
 8006500:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006504:	2301      	movgt	r3, #1
 8006506:	fa22 f303 	lsrle.w	r3, r2, r3
 800650a:	4618      	mov	r0, r3
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	7ff00000 	.word	0x7ff00000

08006514 <__b2d>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	6907      	ldr	r7, [r0, #16]
 800651a:	f100 0914 	add.w	r9, r0, #20
 800651e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006522:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006526:	f1a7 0804 	sub.w	r8, r7, #4
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff fd4e 	bl	8005fcc <__hi0bits>
 8006530:	f1c0 0320 	rsb	r3, r0, #32
 8006534:	280a      	cmp	r0, #10
 8006536:	600b      	str	r3, [r1, #0]
 8006538:	491f      	ldr	r1, [pc, #124]	; (80065b8 <__b2d+0xa4>)
 800653a:	dc17      	bgt.n	800656c <__b2d+0x58>
 800653c:	45c1      	cmp	r9, r8
 800653e:	bf28      	it	cs
 8006540:	2200      	movcs	r2, #0
 8006542:	f1c0 0c0b 	rsb	ip, r0, #11
 8006546:	fa26 f30c 	lsr.w	r3, r6, ip
 800654a:	bf38      	it	cc
 800654c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006550:	ea43 0501 	orr.w	r5, r3, r1
 8006554:	f100 0315 	add.w	r3, r0, #21
 8006558:	fa06 f303 	lsl.w	r3, r6, r3
 800655c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006560:	ea43 0402 	orr.w	r4, r3, r2
 8006564:	4620      	mov	r0, r4
 8006566:	4629      	mov	r1, r5
 8006568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656c:	45c1      	cmp	r9, r8
 800656e:	bf2e      	itee	cs
 8006570:	2200      	movcs	r2, #0
 8006572:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006576:	f1a7 0808 	subcc.w	r8, r7, #8
 800657a:	f1b0 030b 	subs.w	r3, r0, #11
 800657e:	d016      	beq.n	80065ae <__b2d+0x9a>
 8006580:	f1c3 0720 	rsb	r7, r3, #32
 8006584:	fa22 f107 	lsr.w	r1, r2, r7
 8006588:	45c8      	cmp	r8, r9
 800658a:	fa06 f603 	lsl.w	r6, r6, r3
 800658e:	ea46 0601 	orr.w	r6, r6, r1
 8006592:	bf94      	ite	ls
 8006594:	2100      	movls	r1, #0
 8006596:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800659a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800659e:	fa02 f003 	lsl.w	r0, r2, r3
 80065a2:	40f9      	lsrs	r1, r7
 80065a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80065a8:	ea40 0401 	orr.w	r4, r0, r1
 80065ac:	e7da      	b.n	8006564 <__b2d+0x50>
 80065ae:	4614      	mov	r4, r2
 80065b0:	ea46 0501 	orr.w	r5, r6, r1
 80065b4:	e7d6      	b.n	8006564 <__b2d+0x50>
 80065b6:	bf00      	nop
 80065b8:	3ff00000 	.word	0x3ff00000

080065bc <__d2b>:
 80065bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80065c0:	2101      	movs	r1, #1
 80065c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80065c6:	4690      	mov	r8, r2
 80065c8:	461d      	mov	r5, r3
 80065ca:	f7ff fc0d 	bl	8005de8 <_Balloc>
 80065ce:	4604      	mov	r4, r0
 80065d0:	b930      	cbnz	r0, 80065e0 <__d2b+0x24>
 80065d2:	4602      	mov	r2, r0
 80065d4:	f240 310a 	movw	r1, #778	; 0x30a
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <__d2b+0xb0>)
 80065da:	4825      	ldr	r0, [pc, #148]	; (8006670 <__d2b+0xb4>)
 80065dc:	f001 f89e 	bl	800771c <__assert_func>
 80065e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80065e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80065e8:	bb2d      	cbnz	r5, 8006636 <__d2b+0x7a>
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	f1b8 0300 	subs.w	r3, r8, #0
 80065f0:	d026      	beq.n	8006640 <__d2b+0x84>
 80065f2:	4668      	mov	r0, sp
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	f7ff fd09 	bl	800600c <__lo0bits>
 80065fa:	9900      	ldr	r1, [sp, #0]
 80065fc:	b1f0      	cbz	r0, 800663c <__d2b+0x80>
 80065fe:	9a01      	ldr	r2, [sp, #4]
 8006600:	f1c0 0320 	rsb	r3, r0, #32
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	430b      	orrs	r3, r1
 800660a:	40c2      	lsrs	r2, r0
 800660c:	6163      	str	r3, [r4, #20]
 800660e:	9201      	str	r2, [sp, #4]
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bf14      	ite	ne
 8006616:	2102      	movne	r1, #2
 8006618:	2101      	moveq	r1, #1
 800661a:	61a3      	str	r3, [r4, #24]
 800661c:	6121      	str	r1, [r4, #16]
 800661e:	b1c5      	cbz	r5, 8006652 <__d2b+0x96>
 8006620:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006624:	4405      	add	r5, r0
 8006626:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800662a:	603d      	str	r5, [r7, #0]
 800662c:	6030      	str	r0, [r6, #0]
 800662e:	4620      	mov	r0, r4
 8006630:	b002      	add	sp, #8
 8006632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663a:	e7d6      	b.n	80065ea <__d2b+0x2e>
 800663c:	6161      	str	r1, [r4, #20]
 800663e:	e7e7      	b.n	8006610 <__d2b+0x54>
 8006640:	a801      	add	r0, sp, #4
 8006642:	f7ff fce3 	bl	800600c <__lo0bits>
 8006646:	2101      	movs	r1, #1
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	6121      	str	r1, [r4, #16]
 800664c:	6163      	str	r3, [r4, #20]
 800664e:	3020      	adds	r0, #32
 8006650:	e7e5      	b.n	800661e <__d2b+0x62>
 8006652:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006656:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800665a:	6038      	str	r0, [r7, #0]
 800665c:	6918      	ldr	r0, [r3, #16]
 800665e:	f7ff fcb5 	bl	8005fcc <__hi0bits>
 8006662:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006666:	6031      	str	r1, [r6, #0]
 8006668:	e7e1      	b.n	800662e <__d2b+0x72>
 800666a:	bf00      	nop
 800666c:	08008418 	.word	0x08008418
 8006670:	080084bb 	.word	0x080084bb

08006674 <__ratio>:
 8006674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4688      	mov	r8, r1
 800667a:	4669      	mov	r1, sp
 800667c:	4681      	mov	r9, r0
 800667e:	f7ff ff49 	bl	8006514 <__b2d>
 8006682:	460f      	mov	r7, r1
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	4640      	mov	r0, r8
 800668a:	a901      	add	r1, sp, #4
 800668c:	f7ff ff42 	bl	8006514 <__b2d>
 8006690:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006694:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006698:	468b      	mov	fp, r1
 800669a:	eba3 0c02 	sub.w	ip, r3, r2
 800669e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bfd5      	itete	le
 80066ac:	460a      	movle	r2, r1
 80066ae:	462a      	movgt	r2, r5
 80066b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80066b4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80066b8:	bfd8      	it	le
 80066ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80066be:	465b      	mov	r3, fp
 80066c0:	4602      	mov	r2, r0
 80066c2:	4639      	mov	r1, r7
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7fa f84b 	bl	8000760 <__aeabi_ddiv>
 80066ca:	b003      	add	sp, #12
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066d0 <__copybits>:
 80066d0:	3901      	subs	r1, #1
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	1149      	asrs	r1, r1, #5
 80066d6:	6914      	ldr	r4, [r2, #16]
 80066d8:	3101      	adds	r1, #1
 80066da:	f102 0314 	add.w	r3, r2, #20
 80066de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066e6:	1f05      	subs	r5, r0, #4
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d30c      	bcc.n	8006706 <__copybits+0x36>
 80066ec:	1aa3      	subs	r3, r4, r2
 80066ee:	3b11      	subs	r3, #17
 80066f0:	f023 0303 	bic.w	r3, r3, #3
 80066f4:	3211      	adds	r2, #17
 80066f6:	42a2      	cmp	r2, r4
 80066f8:	bf88      	it	hi
 80066fa:	2300      	movhi	r3, #0
 80066fc:	4418      	add	r0, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	4288      	cmp	r0, r1
 8006702:	d305      	bcc.n	8006710 <__copybits+0x40>
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	f853 6b04 	ldr.w	r6, [r3], #4
 800670a:	f845 6f04 	str.w	r6, [r5, #4]!
 800670e:	e7eb      	b.n	80066e8 <__copybits+0x18>
 8006710:	f840 3b04 	str.w	r3, [r0], #4
 8006714:	e7f4      	b.n	8006700 <__copybits+0x30>

08006716 <__any_on>:
 8006716:	f100 0214 	add.w	r2, r0, #20
 800671a:	6900      	ldr	r0, [r0, #16]
 800671c:	114b      	asrs	r3, r1, #5
 800671e:	4298      	cmp	r0, r3
 8006720:	b510      	push	{r4, lr}
 8006722:	db11      	blt.n	8006748 <__any_on+0x32>
 8006724:	dd0a      	ble.n	800673c <__any_on+0x26>
 8006726:	f011 011f 	ands.w	r1, r1, #31
 800672a:	d007      	beq.n	800673c <__any_on+0x26>
 800672c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006730:	fa24 f001 	lsr.w	r0, r4, r1
 8006734:	fa00 f101 	lsl.w	r1, r0, r1
 8006738:	428c      	cmp	r4, r1
 800673a:	d10b      	bne.n	8006754 <__any_on+0x3e>
 800673c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006740:	4293      	cmp	r3, r2
 8006742:	d803      	bhi.n	800674c <__any_on+0x36>
 8006744:	2000      	movs	r0, #0
 8006746:	bd10      	pop	{r4, pc}
 8006748:	4603      	mov	r3, r0
 800674a:	e7f7      	b.n	800673c <__any_on+0x26>
 800674c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006750:	2900      	cmp	r1, #0
 8006752:	d0f5      	beq.n	8006740 <__any_on+0x2a>
 8006754:	2001      	movs	r0, #1
 8006756:	e7f6      	b.n	8006746 <__any_on+0x30>

08006758 <_calloc_r>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	fba1 5402 	umull	r5, r4, r1, r2
 800675e:	b934      	cbnz	r4, 800676e <_calloc_r+0x16>
 8006760:	4629      	mov	r1, r5
 8006762:	f7fe f845 	bl	80047f0 <_malloc_r>
 8006766:	4606      	mov	r6, r0
 8006768:	b928      	cbnz	r0, 8006776 <_calloc_r+0x1e>
 800676a:	4630      	mov	r0, r6
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	220c      	movs	r2, #12
 8006770:	2600      	movs	r6, #0
 8006772:	6002      	str	r2, [r0, #0]
 8006774:	e7f9      	b.n	800676a <_calloc_r+0x12>
 8006776:	462a      	mov	r2, r5
 8006778:	4621      	mov	r1, r4
 800677a:	f7fd ffc9 	bl	8004710 <memset>
 800677e:	e7f4      	b.n	800676a <_calloc_r+0x12>

08006780 <_realloc_r>:
 8006780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006784:	4680      	mov	r8, r0
 8006786:	4614      	mov	r4, r2
 8006788:	460e      	mov	r6, r1
 800678a:	b921      	cbnz	r1, 8006796 <_realloc_r+0x16>
 800678c:	4611      	mov	r1, r2
 800678e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	f7fe b82d 	b.w	80047f0 <_malloc_r>
 8006796:	b92a      	cbnz	r2, 80067a4 <_realloc_r+0x24>
 8006798:	f7fd ffc2 	bl	8004720 <_free_r>
 800679c:	4625      	mov	r5, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a4:	f001 f9c8 	bl	8007b38 <_malloc_usable_size_r>
 80067a8:	4284      	cmp	r4, r0
 80067aa:	4607      	mov	r7, r0
 80067ac:	d802      	bhi.n	80067b4 <_realloc_r+0x34>
 80067ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067b2:	d812      	bhi.n	80067da <_realloc_r+0x5a>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4640      	mov	r0, r8
 80067b8:	f7fe f81a 	bl	80047f0 <_malloc_r>
 80067bc:	4605      	mov	r5, r0
 80067be:	2800      	cmp	r0, #0
 80067c0:	d0ed      	beq.n	800679e <_realloc_r+0x1e>
 80067c2:	42bc      	cmp	r4, r7
 80067c4:	4622      	mov	r2, r4
 80067c6:	4631      	mov	r1, r6
 80067c8:	bf28      	it	cs
 80067ca:	463a      	movcs	r2, r7
 80067cc:	f7fd ff92 	bl	80046f4 <memcpy>
 80067d0:	4631      	mov	r1, r6
 80067d2:	4640      	mov	r0, r8
 80067d4:	f7fd ffa4 	bl	8004720 <_free_r>
 80067d8:	e7e1      	b.n	800679e <_realloc_r+0x1e>
 80067da:	4635      	mov	r5, r6
 80067dc:	e7df      	b.n	800679e <_realloc_r+0x1e>

080067de <__ssputs_r>:
 80067de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e2:	688e      	ldr	r6, [r1, #8]
 80067e4:	4682      	mov	sl, r0
 80067e6:	429e      	cmp	r6, r3
 80067e8:	460c      	mov	r4, r1
 80067ea:	4690      	mov	r8, r2
 80067ec:	461f      	mov	r7, r3
 80067ee:	d838      	bhi.n	8006862 <__ssputs_r+0x84>
 80067f0:	898a      	ldrh	r2, [r1, #12]
 80067f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067f6:	d032      	beq.n	800685e <__ssputs_r+0x80>
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	6909      	ldr	r1, [r1, #16]
 80067fc:	3301      	adds	r3, #1
 80067fe:	eba5 0901 	sub.w	r9, r5, r1
 8006802:	6965      	ldr	r5, [r4, #20]
 8006804:	444b      	add	r3, r9
 8006806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800680a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800680e:	106d      	asrs	r5, r5, #1
 8006810:	429d      	cmp	r5, r3
 8006812:	bf38      	it	cc
 8006814:	461d      	movcc	r5, r3
 8006816:	0553      	lsls	r3, r2, #21
 8006818:	d531      	bpl.n	800687e <__ssputs_r+0xa0>
 800681a:	4629      	mov	r1, r5
 800681c:	f7fd ffe8 	bl	80047f0 <_malloc_r>
 8006820:	4606      	mov	r6, r0
 8006822:	b950      	cbnz	r0, 800683a <__ssputs_r+0x5c>
 8006824:	230c      	movs	r3, #12
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	f8ca 3000 	str.w	r3, [sl]
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683a:	464a      	mov	r2, r9
 800683c:	6921      	ldr	r1, [r4, #16]
 800683e:	f7fd ff59 	bl	80046f4 <memcpy>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	6126      	str	r6, [r4, #16]
 8006850:	444e      	add	r6, r9
 8006852:	6026      	str	r6, [r4, #0]
 8006854:	463e      	mov	r6, r7
 8006856:	6165      	str	r5, [r4, #20]
 8006858:	eba5 0509 	sub.w	r5, r5, r9
 800685c:	60a5      	str	r5, [r4, #8]
 800685e:	42be      	cmp	r6, r7
 8006860:	d900      	bls.n	8006864 <__ssputs_r+0x86>
 8006862:	463e      	mov	r6, r7
 8006864:	4632      	mov	r2, r6
 8006866:	4641      	mov	r1, r8
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	f001 f94b 	bl	8007b04 <memmove>
 800686e:	68a3      	ldr	r3, [r4, #8]
 8006870:	2000      	movs	r0, #0
 8006872:	1b9b      	subs	r3, r3, r6
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	4433      	add	r3, r6
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	e7db      	b.n	8006836 <__ssputs_r+0x58>
 800687e:	462a      	mov	r2, r5
 8006880:	f7ff ff7e 	bl	8006780 <_realloc_r>
 8006884:	4606      	mov	r6, r0
 8006886:	2800      	cmp	r0, #0
 8006888:	d1e1      	bne.n	800684e <__ssputs_r+0x70>
 800688a:	4650      	mov	r0, sl
 800688c:	6921      	ldr	r1, [r4, #16]
 800688e:	f7fd ff47 	bl	8004720 <_free_r>
 8006892:	e7c7      	b.n	8006824 <__ssputs_r+0x46>

08006894 <_svfiprintf_r>:
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006898:	4698      	mov	r8, r3
 800689a:	898b      	ldrh	r3, [r1, #12]
 800689c:	4607      	mov	r7, r0
 800689e:	061b      	lsls	r3, r3, #24
 80068a0:	460d      	mov	r5, r1
 80068a2:	4614      	mov	r4, r2
 80068a4:	b09d      	sub	sp, #116	; 0x74
 80068a6:	d50e      	bpl.n	80068c6 <_svfiprintf_r+0x32>
 80068a8:	690b      	ldr	r3, [r1, #16]
 80068aa:	b963      	cbnz	r3, 80068c6 <_svfiprintf_r+0x32>
 80068ac:	2140      	movs	r1, #64	; 0x40
 80068ae:	f7fd ff9f 	bl	80047f0 <_malloc_r>
 80068b2:	6028      	str	r0, [r5, #0]
 80068b4:	6128      	str	r0, [r5, #16]
 80068b6:	b920      	cbnz	r0, 80068c2 <_svfiprintf_r+0x2e>
 80068b8:	230c      	movs	r3, #12
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	e0d1      	b.n	8006a66 <_svfiprintf_r+0x1d2>
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	616b      	str	r3, [r5, #20]
 80068c6:	2300      	movs	r3, #0
 80068c8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ca:	2320      	movs	r3, #32
 80068cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068d0:	2330      	movs	r3, #48	; 0x30
 80068d2:	f04f 0901 	mov.w	r9, #1
 80068d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a80 <_svfiprintf_r+0x1ec>
 80068de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068e2:	4623      	mov	r3, r4
 80068e4:	469a      	mov	sl, r3
 80068e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ea:	b10a      	cbz	r2, 80068f0 <_svfiprintf_r+0x5c>
 80068ec:	2a25      	cmp	r2, #37	; 0x25
 80068ee:	d1f9      	bne.n	80068e4 <_svfiprintf_r+0x50>
 80068f0:	ebba 0b04 	subs.w	fp, sl, r4
 80068f4:	d00b      	beq.n	800690e <_svfiprintf_r+0x7a>
 80068f6:	465b      	mov	r3, fp
 80068f8:	4622      	mov	r2, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ff6e 	bl	80067de <__ssputs_r>
 8006902:	3001      	adds	r0, #1
 8006904:	f000 80aa 	beq.w	8006a5c <_svfiprintf_r+0x1c8>
 8006908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800690a:	445a      	add	r2, fp
 800690c:	9209      	str	r2, [sp, #36]	; 0x24
 800690e:	f89a 3000 	ldrb.w	r3, [sl]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80a2 	beq.w	8006a5c <_svfiprintf_r+0x1c8>
 8006918:	2300      	movs	r3, #0
 800691a:	f04f 32ff 	mov.w	r2, #4294967295
 800691e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006922:	f10a 0a01 	add.w	sl, sl, #1
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	9307      	str	r3, [sp, #28]
 800692a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800692e:	931a      	str	r3, [sp, #104]	; 0x68
 8006930:	4654      	mov	r4, sl
 8006932:	2205      	movs	r2, #5
 8006934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006938:	4851      	ldr	r0, [pc, #324]	; (8006a80 <_svfiprintf_r+0x1ec>)
 800693a:	f001 f8d5 	bl	8007ae8 <memchr>
 800693e:	9a04      	ldr	r2, [sp, #16]
 8006940:	b9d8      	cbnz	r0, 800697a <_svfiprintf_r+0xe6>
 8006942:	06d0      	lsls	r0, r2, #27
 8006944:	bf44      	itt	mi
 8006946:	2320      	movmi	r3, #32
 8006948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694c:	0711      	lsls	r1, r2, #28
 800694e:	bf44      	itt	mi
 8006950:	232b      	movmi	r3, #43	; 0x2b
 8006952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006956:	f89a 3000 	ldrb.w	r3, [sl]
 800695a:	2b2a      	cmp	r3, #42	; 0x2a
 800695c:	d015      	beq.n	800698a <_svfiprintf_r+0xf6>
 800695e:	4654      	mov	r4, sl
 8006960:	2000      	movs	r0, #0
 8006962:	f04f 0c0a 	mov.w	ip, #10
 8006966:	9a07      	ldr	r2, [sp, #28]
 8006968:	4621      	mov	r1, r4
 800696a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800696e:	3b30      	subs	r3, #48	; 0x30
 8006970:	2b09      	cmp	r3, #9
 8006972:	d94e      	bls.n	8006a12 <_svfiprintf_r+0x17e>
 8006974:	b1b0      	cbz	r0, 80069a4 <_svfiprintf_r+0x110>
 8006976:	9207      	str	r2, [sp, #28]
 8006978:	e014      	b.n	80069a4 <_svfiprintf_r+0x110>
 800697a:	eba0 0308 	sub.w	r3, r0, r8
 800697e:	fa09 f303 	lsl.w	r3, r9, r3
 8006982:	4313      	orrs	r3, r2
 8006984:	46a2      	mov	sl, r4
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	e7d2      	b.n	8006930 <_svfiprintf_r+0x9c>
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	9103      	str	r1, [sp, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	bfbb      	ittet	lt
 8006996:	425b      	neglt	r3, r3
 8006998:	f042 0202 	orrlt.w	r2, r2, #2
 800699c:	9307      	strge	r3, [sp, #28]
 800699e:	9307      	strlt	r3, [sp, #28]
 80069a0:	bfb8      	it	lt
 80069a2:	9204      	strlt	r2, [sp, #16]
 80069a4:	7823      	ldrb	r3, [r4, #0]
 80069a6:	2b2e      	cmp	r3, #46	; 0x2e
 80069a8:	d10c      	bne.n	80069c4 <_svfiprintf_r+0x130>
 80069aa:	7863      	ldrb	r3, [r4, #1]
 80069ac:	2b2a      	cmp	r3, #42	; 0x2a
 80069ae:	d135      	bne.n	8006a1c <_svfiprintf_r+0x188>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	3402      	adds	r4, #2
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	9203      	str	r2, [sp, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bfb8      	it	lt
 80069be:	f04f 33ff 	movlt.w	r3, #4294967295
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006a84 <_svfiprintf_r+0x1f0>
 80069c8:	2203      	movs	r2, #3
 80069ca:	4650      	mov	r0, sl
 80069cc:	7821      	ldrb	r1, [r4, #0]
 80069ce:	f001 f88b 	bl	8007ae8 <memchr>
 80069d2:	b140      	cbz	r0, 80069e6 <_svfiprintf_r+0x152>
 80069d4:	2340      	movs	r3, #64	; 0x40
 80069d6:	eba0 000a 	sub.w	r0, r0, sl
 80069da:	fa03 f000 	lsl.w	r0, r3, r0
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	3401      	adds	r4, #1
 80069e2:	4303      	orrs	r3, r0
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ea:	2206      	movs	r2, #6
 80069ec:	4826      	ldr	r0, [pc, #152]	; (8006a88 <_svfiprintf_r+0x1f4>)
 80069ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069f2:	f001 f879 	bl	8007ae8 <memchr>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d038      	beq.n	8006a6c <_svfiprintf_r+0x1d8>
 80069fa:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <_svfiprintf_r+0x1f8>)
 80069fc:	bb1b      	cbnz	r3, 8006a46 <_svfiprintf_r+0x1b2>
 80069fe:	9b03      	ldr	r3, [sp, #12]
 8006a00:	3307      	adds	r3, #7
 8006a02:	f023 0307 	bic.w	r3, r3, #7
 8006a06:	3308      	adds	r3, #8
 8006a08:	9303      	str	r3, [sp, #12]
 8006a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0c:	4433      	add	r3, r6
 8006a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a10:	e767      	b.n	80068e2 <_svfiprintf_r+0x4e>
 8006a12:	460c      	mov	r4, r1
 8006a14:	2001      	movs	r0, #1
 8006a16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a1a:	e7a5      	b.n	8006968 <_svfiprintf_r+0xd4>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f04f 0c0a 	mov.w	ip, #10
 8006a22:	4619      	mov	r1, r3
 8006a24:	3401      	adds	r4, #1
 8006a26:	9305      	str	r3, [sp, #20]
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a2e:	3a30      	subs	r2, #48	; 0x30
 8006a30:	2a09      	cmp	r2, #9
 8006a32:	d903      	bls.n	8006a3c <_svfiprintf_r+0x1a8>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0c5      	beq.n	80069c4 <_svfiprintf_r+0x130>
 8006a38:	9105      	str	r1, [sp, #20]
 8006a3a:	e7c3      	b.n	80069c4 <_svfiprintf_r+0x130>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	2301      	movs	r3, #1
 8006a40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a44:	e7f0      	b.n	8006a28 <_svfiprintf_r+0x194>
 8006a46:	ab03      	add	r3, sp, #12
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <_svfiprintf_r+0x1fc>)
 8006a50:	a904      	add	r1, sp, #16
 8006a52:	f3af 8000 	nop.w
 8006a56:	1c42      	adds	r2, r0, #1
 8006a58:	4606      	mov	r6, r0
 8006a5a:	d1d6      	bne.n	8006a0a <_svfiprintf_r+0x176>
 8006a5c:	89ab      	ldrh	r3, [r5, #12]
 8006a5e:	065b      	lsls	r3, r3, #25
 8006a60:	f53f af2c 	bmi.w	80068bc <_svfiprintf_r+0x28>
 8006a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a66:	b01d      	add	sp, #116	; 0x74
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4638      	mov	r0, r7
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <_svfiprintf_r+0x1fc>)
 8006a76:	a904      	add	r1, sp, #16
 8006a78:	f000 fa50 	bl	8006f1c <_printf_i>
 8006a7c:	e7eb      	b.n	8006a56 <_svfiprintf_r+0x1c2>
 8006a7e:	bf00      	nop
 8006a80:	08008614 	.word	0x08008614
 8006a84:	0800861a 	.word	0x0800861a
 8006a88:	0800861e 	.word	0x0800861e
 8006a8c:	00000000 	.word	0x00000000
 8006a90:	080067df 	.word	0x080067df

08006a94 <_sungetc_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	1c4b      	adds	r3, r1, #1
 8006a98:	4614      	mov	r4, r2
 8006a9a:	d103      	bne.n	8006aa4 <_sungetc_r+0x10>
 8006a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	8993      	ldrh	r3, [r2, #12]
 8006aa6:	b2cd      	uxtb	r5, r1
 8006aa8:	f023 0320 	bic.w	r3, r3, #32
 8006aac:	8193      	strh	r3, [r2, #12]
 8006aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ab0:	6852      	ldr	r2, [r2, #4]
 8006ab2:	b18b      	cbz	r3, 8006ad8 <_sungetc_r+0x44>
 8006ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	dd08      	ble.n	8006acc <_sungetc_r+0x38>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	e7e9      	b.n	8006aa0 <_sungetc_r+0xc>
 8006acc:	4621      	mov	r1, r4
 8006ace:	f000 fddf 	bl	8007690 <__submore>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d0f1      	beq.n	8006aba <_sungetc_r+0x26>
 8006ad6:	e7e1      	b.n	8006a9c <_sungetc_r+0x8>
 8006ad8:	6921      	ldr	r1, [r4, #16]
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	b151      	cbz	r1, 8006af4 <_sungetc_r+0x60>
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	d208      	bcs.n	8006af4 <_sungetc_r+0x60>
 8006ae2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006ae6:	42a9      	cmp	r1, r5
 8006ae8:	d104      	bne.n	8006af4 <_sungetc_r+0x60>
 8006aea:	3b01      	subs	r3, #1
 8006aec:	3201      	adds	r2, #1
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	6062      	str	r2, [r4, #4]
 8006af2:	e7d5      	b.n	8006aa0 <_sungetc_r+0xc>
 8006af4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006afc:	6363      	str	r3, [r4, #52]	; 0x34
 8006afe:	2303      	movs	r3, #3
 8006b00:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b02:	4623      	mov	r3, r4
 8006b04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e7dc      	b.n	8006ac8 <_sungetc_r+0x34>

08006b0e <__ssrefill_r>:
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	460c      	mov	r4, r1
 8006b12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006b14:	b169      	cbz	r1, 8006b32 <__ssrefill_r+0x24>
 8006b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d001      	beq.n	8006b22 <__ssrefill_r+0x14>
 8006b1e:	f7fd fdff 	bl	8004720 <_free_r>
 8006b22:	2000      	movs	r0, #0
 8006b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b26:	6360      	str	r0, [r4, #52]	; 0x34
 8006b28:	6063      	str	r3, [r4, #4]
 8006b2a:	b113      	cbz	r3, 8006b32 <__ssrefill_r+0x24>
 8006b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6063      	str	r3, [r4, #4]
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f043 0320 	orr.w	r3, r3, #32
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	e7f3      	b.n	8006b30 <__ssrefill_r+0x22>

08006b48 <__ssvfiscanf_r>:
 8006b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4606      	mov	r6, r0
 8006b52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006b56:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006b5a:	49a7      	ldr	r1, [pc, #668]	; (8006df8 <__ssvfiscanf_r+0x2b0>)
 8006b5c:	f10d 0804 	add.w	r8, sp, #4
 8006b60:	91a0      	str	r1, [sp, #640]	; 0x280
 8006b62:	49a6      	ldr	r1, [pc, #664]	; (8006dfc <__ssvfiscanf_r+0x2b4>)
 8006b64:	4fa6      	ldr	r7, [pc, #664]	; (8006e00 <__ssvfiscanf_r+0x2b8>)
 8006b66:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8006e04 <__ssvfiscanf_r+0x2bc>
 8006b6a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006b6e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	7813      	ldrb	r3, [r2, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 815c 	beq.w	8006e32 <__ssvfiscanf_r+0x2ea>
 8006b7a:	5dd9      	ldrb	r1, [r3, r7]
 8006b7c:	1c55      	adds	r5, r2, #1
 8006b7e:	f011 0108 	ands.w	r1, r1, #8
 8006b82:	d019      	beq.n	8006bb8 <__ssvfiscanf_r+0x70>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dd0f      	ble.n	8006baa <__ssvfiscanf_r+0x62>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	5cba      	ldrb	r2, [r7, r2]
 8006b90:	0712      	lsls	r2, r2, #28
 8006b92:	d401      	bmi.n	8006b98 <__ssvfiscanf_r+0x50>
 8006b94:	462a      	mov	r2, r5
 8006b96:	e7ec      	b.n	8006b72 <__ssvfiscanf_r+0x2a>
 8006b98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	3201      	adds	r2, #1
 8006b9e:	9245      	str	r2, [sp, #276]	; 0x114
 8006ba0:	6862      	ldr	r2, [r4, #4]
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	3a01      	subs	r2, #1
 8006ba6:	6062      	str	r2, [r4, #4]
 8006ba8:	e7ec      	b.n	8006b84 <__ssvfiscanf_r+0x3c>
 8006baa:	4621      	mov	r1, r4
 8006bac:	4630      	mov	r0, r6
 8006bae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006bb0:	4798      	blx	r3
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d0e9      	beq.n	8006b8a <__ssvfiscanf_r+0x42>
 8006bb6:	e7ed      	b.n	8006b94 <__ssvfiscanf_r+0x4c>
 8006bb8:	2b25      	cmp	r3, #37	; 0x25
 8006bba:	d012      	beq.n	8006be2 <__ssvfiscanf_r+0x9a>
 8006bbc:	469a      	mov	sl, r3
 8006bbe:	6863      	ldr	r3, [r4, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f340 8094 	ble.w	8006cee <__ssvfiscanf_r+0x1a6>
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	7813      	ldrb	r3, [r2, #0]
 8006bca:	4553      	cmp	r3, sl
 8006bcc:	f040 8131 	bne.w	8006e32 <__ssvfiscanf_r+0x2ea>
 8006bd0:	6863      	ldr	r3, [r4, #4]
 8006bd2:	3201      	adds	r2, #1
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	9345      	str	r3, [sp, #276]	; 0x114
 8006be0:	e7d8      	b.n	8006b94 <__ssvfiscanf_r+0x4c>
 8006be2:	9141      	str	r1, [sp, #260]	; 0x104
 8006be4:	9143      	str	r1, [sp, #268]	; 0x10c
 8006be6:	7853      	ldrb	r3, [r2, #1]
 8006be8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bea:	bf04      	itt	eq
 8006bec:	2310      	moveq	r3, #16
 8006bee:	1c95      	addeq	r5, r2, #2
 8006bf0:	f04f 020a 	mov.w	r2, #10
 8006bf4:	bf08      	it	eq
 8006bf6:	9341      	streq	r3, [sp, #260]	; 0x104
 8006bf8:	46aa      	mov	sl, r5
 8006bfa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006bfe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	d91d      	bls.n	8006c42 <__ssvfiscanf_r+0xfa>
 8006c06:	2203      	movs	r2, #3
 8006c08:	487e      	ldr	r0, [pc, #504]	; (8006e04 <__ssvfiscanf_r+0x2bc>)
 8006c0a:	f000 ff6d 	bl	8007ae8 <memchr>
 8006c0e:	b140      	cbz	r0, 8006c22 <__ssvfiscanf_r+0xda>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4655      	mov	r5, sl
 8006c14:	eba0 0009 	sub.w	r0, r0, r9
 8006c18:	fa03 f000 	lsl.w	r0, r3, r0
 8006c1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c1e:	4318      	orrs	r0, r3
 8006c20:	9041      	str	r0, [sp, #260]	; 0x104
 8006c22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c26:	2b78      	cmp	r3, #120	; 0x78
 8006c28:	d806      	bhi.n	8006c38 <__ssvfiscanf_r+0xf0>
 8006c2a:	2b57      	cmp	r3, #87	; 0x57
 8006c2c:	d810      	bhi.n	8006c50 <__ssvfiscanf_r+0x108>
 8006c2e:	2b25      	cmp	r3, #37	; 0x25
 8006c30:	d0c4      	beq.n	8006bbc <__ssvfiscanf_r+0x74>
 8006c32:	d857      	bhi.n	8006ce4 <__ssvfiscanf_r+0x19c>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d065      	beq.n	8006d04 <__ssvfiscanf_r+0x1bc>
 8006c38:	2303      	movs	r3, #3
 8006c3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	9342      	str	r3, [sp, #264]	; 0x108
 8006c40:	e072      	b.n	8006d28 <__ssvfiscanf_r+0x1e0>
 8006c42:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006c44:	4655      	mov	r5, sl
 8006c46:	fb02 1103 	mla	r1, r2, r3, r1
 8006c4a:	3930      	subs	r1, #48	; 0x30
 8006c4c:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c4e:	e7d3      	b.n	8006bf8 <__ssvfiscanf_r+0xb0>
 8006c50:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006c54:	2a20      	cmp	r2, #32
 8006c56:	d8ef      	bhi.n	8006c38 <__ssvfiscanf_r+0xf0>
 8006c58:	a101      	add	r1, pc, #4	; (adr r1, 8006c60 <__ssvfiscanf_r+0x118>)
 8006c5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006d13 	.word	0x08006d13
 8006c64:	08006c39 	.word	0x08006c39
 8006c68:	08006c39 	.word	0x08006c39
 8006c6c:	08006d71 	.word	0x08006d71
 8006c70:	08006c39 	.word	0x08006c39
 8006c74:	08006c39 	.word	0x08006c39
 8006c78:	08006c39 	.word	0x08006c39
 8006c7c:	08006c39 	.word	0x08006c39
 8006c80:	08006c39 	.word	0x08006c39
 8006c84:	08006c39 	.word	0x08006c39
 8006c88:	08006c39 	.word	0x08006c39
 8006c8c:	08006d87 	.word	0x08006d87
 8006c90:	08006d5d 	.word	0x08006d5d
 8006c94:	08006ceb 	.word	0x08006ceb
 8006c98:	08006ceb 	.word	0x08006ceb
 8006c9c:	08006ceb 	.word	0x08006ceb
 8006ca0:	08006c39 	.word	0x08006c39
 8006ca4:	08006d61 	.word	0x08006d61
 8006ca8:	08006c39 	.word	0x08006c39
 8006cac:	08006c39 	.word	0x08006c39
 8006cb0:	08006c39 	.word	0x08006c39
 8006cb4:	08006c39 	.word	0x08006c39
 8006cb8:	08006d97 	.word	0x08006d97
 8006cbc:	08006d69 	.word	0x08006d69
 8006cc0:	08006d0b 	.word	0x08006d0b
 8006cc4:	08006c39 	.word	0x08006c39
 8006cc8:	08006c39 	.word	0x08006c39
 8006ccc:	08006d93 	.word	0x08006d93
 8006cd0:	08006c39 	.word	0x08006c39
 8006cd4:	08006d5d 	.word	0x08006d5d
 8006cd8:	08006c39 	.word	0x08006c39
 8006cdc:	08006c39 	.word	0x08006c39
 8006ce0:	08006d13 	.word	0x08006d13
 8006ce4:	3b45      	subs	r3, #69	; 0x45
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d8a6      	bhi.n	8006c38 <__ssvfiscanf_r+0xf0>
 8006cea:	2305      	movs	r3, #5
 8006cec:	e01b      	b.n	8006d26 <__ssvfiscanf_r+0x1de>
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cf4:	4798      	blx	r3
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f af65 	beq.w	8006bc6 <__ssvfiscanf_r+0x7e>
 8006cfc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f040 808d 	bne.w	8006e1e <__ssvfiscanf_r+0x2d6>
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	e08f      	b.n	8006e2a <__ssvfiscanf_r+0x2e2>
 8006d0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d0c:	f042 0220 	orr.w	r2, r2, #32
 8006d10:	9241      	str	r2, [sp, #260]	; 0x104
 8006d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d18:	9241      	str	r2, [sp, #260]	; 0x104
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	2b6f      	cmp	r3, #111	; 0x6f
 8006d1e:	bf34      	ite	cc
 8006d20:	2303      	movcc	r3, #3
 8006d22:	2304      	movcs	r3, #4
 8006d24:	9242      	str	r2, [sp, #264]	; 0x108
 8006d26:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd42      	ble.n	8006db4 <__ssvfiscanf_r+0x26c>
 8006d2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d30:	0659      	lsls	r1, r3, #25
 8006d32:	d404      	bmi.n	8006d3e <__ssvfiscanf_r+0x1f6>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	781a      	ldrb	r2, [r3, #0]
 8006d38:	5cba      	ldrb	r2, [r7, r2]
 8006d3a:	0712      	lsls	r2, r2, #28
 8006d3c:	d441      	bmi.n	8006dc2 <__ssvfiscanf_r+0x27a>
 8006d3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	dc50      	bgt.n	8006de6 <__ssvfiscanf_r+0x29e>
 8006d44:	466b      	mov	r3, sp
 8006d46:	4622      	mov	r2, r4
 8006d48:	4630      	mov	r0, r6
 8006d4a:	a941      	add	r1, sp, #260	; 0x104
 8006d4c:	f000 fa0c 	bl	8007168 <_scanf_chars>
 8006d50:	2801      	cmp	r0, #1
 8006d52:	d06e      	beq.n	8006e32 <__ssvfiscanf_r+0x2ea>
 8006d54:	2802      	cmp	r0, #2
 8006d56:	f47f af1d 	bne.w	8006b94 <__ssvfiscanf_r+0x4c>
 8006d5a:	e7cf      	b.n	8006cfc <__ssvfiscanf_r+0x1b4>
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	e7dd      	b.n	8006d1c <__ssvfiscanf_r+0x1d4>
 8006d60:	2300      	movs	r3, #0
 8006d62:	9342      	str	r3, [sp, #264]	; 0x108
 8006d64:	2303      	movs	r3, #3
 8006d66:	e7de      	b.n	8006d26 <__ssvfiscanf_r+0x1de>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	9342      	str	r3, [sp, #264]	; 0x108
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	e7da      	b.n	8006d26 <__ssvfiscanf_r+0x1de>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4640      	mov	r0, r8
 8006d74:	f000 fb62 	bl	800743c <__sccl>
 8006d78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d80:	9341      	str	r3, [sp, #260]	; 0x104
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7cf      	b.n	8006d26 <__ssvfiscanf_r+0x1de>
 8006d86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8c:	9341      	str	r3, [sp, #260]	; 0x104
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e7c9      	b.n	8006d26 <__ssvfiscanf_r+0x1de>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e7c7      	b.n	8006d26 <__ssvfiscanf_r+0x1de>
 8006d96:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006d98:	06c3      	lsls	r3, r0, #27
 8006d9a:	f53f aefb 	bmi.w	8006b94 <__ssvfiscanf_r+0x4c>
 8006d9e:	9b00      	ldr	r3, [sp, #0]
 8006da0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006da2:	1d19      	adds	r1, r3, #4
 8006da4:	9100      	str	r1, [sp, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f010 0f01 	tst.w	r0, #1
 8006dac:	bf14      	ite	ne
 8006dae:	801a      	strhne	r2, [r3, #0]
 8006db0:	601a      	streq	r2, [r3, #0]
 8006db2:	e6ef      	b.n	8006b94 <__ssvfiscanf_r+0x4c>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4630      	mov	r0, r6
 8006db8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006dba:	4798      	blx	r3
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0b6      	beq.n	8006d2e <__ssvfiscanf_r+0x1e6>
 8006dc0:	e79c      	b.n	8006cfc <__ssvfiscanf_r+0x1b4>
 8006dc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006dc4:	3201      	adds	r2, #1
 8006dc6:	9245      	str	r2, [sp, #276]	; 0x114
 8006dc8:	6862      	ldr	r2, [r4, #4]
 8006dca:	3a01      	subs	r2, #1
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	6062      	str	r2, [r4, #4]
 8006dd0:	dd02      	ble.n	8006dd8 <__ssvfiscanf_r+0x290>
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	e7ad      	b.n	8006d34 <__ssvfiscanf_r+0x1ec>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4630      	mov	r0, r6
 8006ddc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006dde:	4798      	blx	r3
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d0a7      	beq.n	8006d34 <__ssvfiscanf_r+0x1ec>
 8006de4:	e78a      	b.n	8006cfc <__ssvfiscanf_r+0x1b4>
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	dc0e      	bgt.n	8006e08 <__ssvfiscanf_r+0x2c0>
 8006dea:	466b      	mov	r3, sp
 8006dec:	4622      	mov	r2, r4
 8006dee:	4630      	mov	r0, r6
 8006df0:	a941      	add	r1, sp, #260	; 0x104
 8006df2:	f000 fa13 	bl	800721c <_scanf_i>
 8006df6:	e7ab      	b.n	8006d50 <__ssvfiscanf_r+0x208>
 8006df8:	08006a95 	.word	0x08006a95
 8006dfc:	08006b0f 	.word	0x08006b0f
 8006e00:	080082b1 	.word	0x080082b1
 8006e04:	0800861a 	.word	0x0800861a
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <__ssvfiscanf_r+0x2f0>)
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f43f aec2 	beq.w	8006b94 <__ssvfiscanf_r+0x4c>
 8006e10:	466b      	mov	r3, sp
 8006e12:	4622      	mov	r2, r4
 8006e14:	4630      	mov	r0, r6
 8006e16:	a941      	add	r1, sp, #260	; 0x104
 8006e18:	f3af 8000 	nop.w
 8006e1c:	e798      	b.n	8006d50 <__ssvfiscanf_r+0x208>
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e24:	bf18      	it	ne
 8006e26:	f04f 30ff 	movne.w	r0, #4294967295
 8006e2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e32:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e34:	e7f9      	b.n	8006e2a <__ssvfiscanf_r+0x2e2>
 8006e36:	bf00      	nop
 8006e38:	00000000 	.word	0x00000000

08006e3c <_printf_common>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	4616      	mov	r6, r2
 8006e42:	4699      	mov	r9, r3
 8006e44:	688a      	ldr	r2, [r1, #8]
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	4607      	mov	r7, r0
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bfb8      	it	lt
 8006e4e:	4613      	movlt	r3, r2
 8006e50:	6033      	str	r3, [r6, #0]
 8006e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e56:	460c      	mov	r4, r1
 8006e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e5c:	b10a      	cbz	r2, 8006e62 <_printf_common+0x26>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	6033      	str	r3, [r6, #0]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	0699      	lsls	r1, r3, #26
 8006e66:	bf42      	ittt	mi
 8006e68:	6833      	ldrmi	r3, [r6, #0]
 8006e6a:	3302      	addmi	r3, #2
 8006e6c:	6033      	strmi	r3, [r6, #0]
 8006e6e:	6825      	ldr	r5, [r4, #0]
 8006e70:	f015 0506 	ands.w	r5, r5, #6
 8006e74:	d106      	bne.n	8006e84 <_printf_common+0x48>
 8006e76:	f104 0a19 	add.w	sl, r4, #25
 8006e7a:	68e3      	ldr	r3, [r4, #12]
 8006e7c:	6832      	ldr	r2, [r6, #0]
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	dc28      	bgt.n	8006ed6 <_printf_common+0x9a>
 8006e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e88:	1e13      	subs	r3, r2, #0
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	0692      	lsls	r2, r2, #26
 8006e92:	d42d      	bmi.n	8006ef0 <_printf_common+0xb4>
 8006e94:	4649      	mov	r1, r9
 8006e96:	4638      	mov	r0, r7
 8006e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d020      	beq.n	8006ee4 <_printf_common+0xa8>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	68e5      	ldr	r5, [r4, #12]
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	bf18      	it	ne
 8006eae:	2500      	movne	r5, #0
 8006eb0:	6832      	ldr	r2, [r6, #0]
 8006eb2:	f04f 0600 	mov.w	r6, #0
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	bf08      	it	eq
 8006eba:	1aad      	subeq	r5, r5, r2
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	bf08      	it	eq
 8006ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfc4      	itt	gt
 8006ec8:	1a9b      	subgt	r3, r3, r2
 8006eca:	18ed      	addgt	r5, r5, r3
 8006ecc:	341a      	adds	r4, #26
 8006ece:	42b5      	cmp	r5, r6
 8006ed0:	d11a      	bne.n	8006f08 <_printf_common+0xcc>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e008      	b.n	8006ee8 <_printf_common+0xac>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4652      	mov	r2, sl
 8006eda:	4649      	mov	r1, r9
 8006edc:	4638      	mov	r0, r7
 8006ede:	47c0      	blx	r8
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d103      	bne.n	8006eec <_printf_common+0xb0>
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eec:	3501      	adds	r5, #1
 8006eee:	e7c4      	b.n	8006e7a <_printf_common+0x3e>
 8006ef0:	2030      	movs	r0, #48	; 0x30
 8006ef2:	18e1      	adds	r1, r4, r3
 8006ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006efe:	4422      	add	r2, r4
 8006f00:	3302      	adds	r3, #2
 8006f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f06:	e7c5      	b.n	8006e94 <_printf_common+0x58>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	4638      	mov	r0, r7
 8006f10:	47c0      	blx	r8
 8006f12:	3001      	adds	r0, #1
 8006f14:	d0e6      	beq.n	8006ee4 <_printf_common+0xa8>
 8006f16:	3601      	adds	r6, #1
 8006f18:	e7d9      	b.n	8006ece <_printf_common+0x92>
	...

08006f1c <_printf_i>:
 8006f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	7e0f      	ldrb	r7, [r1, #24]
 8006f22:	4691      	mov	r9, r2
 8006f24:	2f78      	cmp	r7, #120	; 0x78
 8006f26:	4680      	mov	r8, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f32:	d807      	bhi.n	8006f44 <_printf_i+0x28>
 8006f34:	2f62      	cmp	r7, #98	; 0x62
 8006f36:	d80a      	bhi.n	8006f4e <_printf_i+0x32>
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	f000 80d9 	beq.w	80070f0 <_printf_i+0x1d4>
 8006f3e:	2f58      	cmp	r7, #88	; 0x58
 8006f40:	f000 80a4 	beq.w	800708c <_printf_i+0x170>
 8006f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f4c:	e03a      	b.n	8006fc4 <_printf_i+0xa8>
 8006f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f52:	2b15      	cmp	r3, #21
 8006f54:	d8f6      	bhi.n	8006f44 <_printf_i+0x28>
 8006f56:	a101      	add	r1, pc, #4	; (adr r1, 8006f5c <_printf_i+0x40>)
 8006f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f5c:	08006fb5 	.word	0x08006fb5
 8006f60:	08006fc9 	.word	0x08006fc9
 8006f64:	08006f45 	.word	0x08006f45
 8006f68:	08006f45 	.word	0x08006f45
 8006f6c:	08006f45 	.word	0x08006f45
 8006f70:	08006f45 	.word	0x08006f45
 8006f74:	08006fc9 	.word	0x08006fc9
 8006f78:	08006f45 	.word	0x08006f45
 8006f7c:	08006f45 	.word	0x08006f45
 8006f80:	08006f45 	.word	0x08006f45
 8006f84:	08006f45 	.word	0x08006f45
 8006f88:	080070d7 	.word	0x080070d7
 8006f8c:	08006ff9 	.word	0x08006ff9
 8006f90:	080070b9 	.word	0x080070b9
 8006f94:	08006f45 	.word	0x08006f45
 8006f98:	08006f45 	.word	0x08006f45
 8006f9c:	080070f9 	.word	0x080070f9
 8006fa0:	08006f45 	.word	0x08006f45
 8006fa4:	08006ff9 	.word	0x08006ff9
 8006fa8:	08006f45 	.word	0x08006f45
 8006fac:	08006f45 	.word	0x08006f45
 8006fb0:	080070c1 	.word	0x080070c1
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	602a      	str	r2, [r5, #0]
 8006fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0a4      	b.n	8007112 <_printf_i+0x1f6>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	6829      	ldr	r1, [r5, #0]
 8006fcc:	0606      	lsls	r6, r0, #24
 8006fce:	f101 0304 	add.w	r3, r1, #4
 8006fd2:	d50a      	bpl.n	8006fea <_printf_i+0xce>
 8006fd4:	680e      	ldr	r6, [r1, #0]
 8006fd6:	602b      	str	r3, [r5, #0]
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	da03      	bge.n	8006fe4 <_printf_i+0xc8>
 8006fdc:	232d      	movs	r3, #45	; 0x2d
 8006fde:	4276      	negs	r6, r6
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe4:	230a      	movs	r3, #10
 8006fe6:	485e      	ldr	r0, [pc, #376]	; (8007160 <_printf_i+0x244>)
 8006fe8:	e019      	b.n	800701e <_printf_i+0x102>
 8006fea:	680e      	ldr	r6, [r1, #0]
 8006fec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	bf18      	it	ne
 8006ff4:	b236      	sxthne	r6, r6
 8006ff6:	e7ef      	b.n	8006fd8 <_printf_i+0xbc>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	6820      	ldr	r0, [r4, #0]
 8006ffc:	1d19      	adds	r1, r3, #4
 8006ffe:	6029      	str	r1, [r5, #0]
 8007000:	0601      	lsls	r1, r0, #24
 8007002:	d501      	bpl.n	8007008 <_printf_i+0xec>
 8007004:	681e      	ldr	r6, [r3, #0]
 8007006:	e002      	b.n	800700e <_printf_i+0xf2>
 8007008:	0646      	lsls	r6, r0, #25
 800700a:	d5fb      	bpl.n	8007004 <_printf_i+0xe8>
 800700c:	881e      	ldrh	r6, [r3, #0]
 800700e:	2f6f      	cmp	r7, #111	; 0x6f
 8007010:	bf0c      	ite	eq
 8007012:	2308      	moveq	r3, #8
 8007014:	230a      	movne	r3, #10
 8007016:	4852      	ldr	r0, [pc, #328]	; (8007160 <_printf_i+0x244>)
 8007018:	2100      	movs	r1, #0
 800701a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800701e:	6865      	ldr	r5, [r4, #4]
 8007020:	2d00      	cmp	r5, #0
 8007022:	bfa8      	it	ge
 8007024:	6821      	ldrge	r1, [r4, #0]
 8007026:	60a5      	str	r5, [r4, #8]
 8007028:	bfa4      	itt	ge
 800702a:	f021 0104 	bicge.w	r1, r1, #4
 800702e:	6021      	strge	r1, [r4, #0]
 8007030:	b90e      	cbnz	r6, 8007036 <_printf_i+0x11a>
 8007032:	2d00      	cmp	r5, #0
 8007034:	d04d      	beq.n	80070d2 <_printf_i+0x1b6>
 8007036:	4615      	mov	r5, r2
 8007038:	fbb6 f1f3 	udiv	r1, r6, r3
 800703c:	fb03 6711 	mls	r7, r3, r1, r6
 8007040:	5dc7      	ldrb	r7, [r0, r7]
 8007042:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007046:	4637      	mov	r7, r6
 8007048:	42bb      	cmp	r3, r7
 800704a:	460e      	mov	r6, r1
 800704c:	d9f4      	bls.n	8007038 <_printf_i+0x11c>
 800704e:	2b08      	cmp	r3, #8
 8007050:	d10b      	bne.n	800706a <_printf_i+0x14e>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	07de      	lsls	r6, r3, #31
 8007056:	d508      	bpl.n	800706a <_printf_i+0x14e>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	6861      	ldr	r1, [r4, #4]
 800705c:	4299      	cmp	r1, r3
 800705e:	bfde      	ittt	le
 8007060:	2330      	movle	r3, #48	; 0x30
 8007062:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007066:	f105 35ff 	addle.w	r5, r5, #4294967295
 800706a:	1b52      	subs	r2, r2, r5
 800706c:	6122      	str	r2, [r4, #16]
 800706e:	464b      	mov	r3, r9
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	aa03      	add	r2, sp, #12
 800707a:	f7ff fedf 	bl	8006e3c <_printf_common>
 800707e:	3001      	adds	r0, #1
 8007080:	d14c      	bne.n	800711c <_printf_i+0x200>
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	b004      	add	sp, #16
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	4834      	ldr	r0, [pc, #208]	; (8007160 <_printf_i+0x244>)
 800708e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007092:	6829      	ldr	r1, [r5, #0]
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	f851 6b04 	ldr.w	r6, [r1], #4
 800709a:	6029      	str	r1, [r5, #0]
 800709c:	061d      	lsls	r5, r3, #24
 800709e:	d514      	bpl.n	80070ca <_printf_i+0x1ae>
 80070a0:	07df      	lsls	r7, r3, #31
 80070a2:	bf44      	itt	mi
 80070a4:	f043 0320 	orrmi.w	r3, r3, #32
 80070a8:	6023      	strmi	r3, [r4, #0]
 80070aa:	b91e      	cbnz	r6, 80070b4 <_printf_i+0x198>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	f023 0320 	bic.w	r3, r3, #32
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	2310      	movs	r3, #16
 80070b6:	e7af      	b.n	8007018 <_printf_i+0xfc>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	f043 0320 	orr.w	r3, r3, #32
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	2378      	movs	r3, #120	; 0x78
 80070c2:	4828      	ldr	r0, [pc, #160]	; (8007164 <_printf_i+0x248>)
 80070c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070c8:	e7e3      	b.n	8007092 <_printf_i+0x176>
 80070ca:	0659      	lsls	r1, r3, #25
 80070cc:	bf48      	it	mi
 80070ce:	b2b6      	uxthmi	r6, r6
 80070d0:	e7e6      	b.n	80070a0 <_printf_i+0x184>
 80070d2:	4615      	mov	r5, r2
 80070d4:	e7bb      	b.n	800704e <_printf_i+0x132>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	6826      	ldr	r6, [r4, #0]
 80070da:	1d18      	adds	r0, r3, #4
 80070dc:	6961      	ldr	r1, [r4, #20]
 80070de:	6028      	str	r0, [r5, #0]
 80070e0:	0635      	lsls	r5, r6, #24
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	d501      	bpl.n	80070ea <_printf_i+0x1ce>
 80070e6:	6019      	str	r1, [r3, #0]
 80070e8:	e002      	b.n	80070f0 <_printf_i+0x1d4>
 80070ea:	0670      	lsls	r0, r6, #25
 80070ec:	d5fb      	bpl.n	80070e6 <_printf_i+0x1ca>
 80070ee:	8019      	strh	r1, [r3, #0]
 80070f0:	2300      	movs	r3, #0
 80070f2:	4615      	mov	r5, r2
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	e7ba      	b.n	800706e <_printf_i+0x152>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	2100      	movs	r1, #0
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	602a      	str	r2, [r5, #0]
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	4628      	mov	r0, r5
 8007106:	f000 fcef 	bl	8007ae8 <memchr>
 800710a:	b108      	cbz	r0, 8007110 <_printf_i+0x1f4>
 800710c:	1b40      	subs	r0, r0, r5
 800710e:	6060      	str	r0, [r4, #4]
 8007110:	6863      	ldr	r3, [r4, #4]
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	2300      	movs	r3, #0
 8007116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800711a:	e7a8      	b.n	800706e <_printf_i+0x152>
 800711c:	462a      	mov	r2, r5
 800711e:	4649      	mov	r1, r9
 8007120:	4640      	mov	r0, r8
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	47d0      	blx	sl
 8007126:	3001      	adds	r0, #1
 8007128:	d0ab      	beq.n	8007082 <_printf_i+0x166>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	079b      	lsls	r3, r3, #30
 800712e:	d413      	bmi.n	8007158 <_printf_i+0x23c>
 8007130:	68e0      	ldr	r0, [r4, #12]
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	4298      	cmp	r0, r3
 8007136:	bfb8      	it	lt
 8007138:	4618      	movlt	r0, r3
 800713a:	e7a4      	b.n	8007086 <_printf_i+0x16a>
 800713c:	2301      	movs	r3, #1
 800713e:	4632      	mov	r2, r6
 8007140:	4649      	mov	r1, r9
 8007142:	4640      	mov	r0, r8
 8007144:	47d0      	blx	sl
 8007146:	3001      	adds	r0, #1
 8007148:	d09b      	beq.n	8007082 <_printf_i+0x166>
 800714a:	3501      	adds	r5, #1
 800714c:	68e3      	ldr	r3, [r4, #12]
 800714e:	9903      	ldr	r1, [sp, #12]
 8007150:	1a5b      	subs	r3, r3, r1
 8007152:	42ab      	cmp	r3, r5
 8007154:	dcf2      	bgt.n	800713c <_printf_i+0x220>
 8007156:	e7eb      	b.n	8007130 <_printf_i+0x214>
 8007158:	2500      	movs	r5, #0
 800715a:	f104 0619 	add.w	r6, r4, #25
 800715e:	e7f5      	b.n	800714c <_printf_i+0x230>
 8007160:	08008625 	.word	0x08008625
 8007164:	08008636 	.word	0x08008636

08007168 <_scanf_chars>:
 8007168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800716c:	4615      	mov	r5, r2
 800716e:	688a      	ldr	r2, [r1, #8]
 8007170:	4680      	mov	r8, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b932      	cbnz	r2, 8007184 <_scanf_chars+0x1c>
 8007176:	698a      	ldr	r2, [r1, #24]
 8007178:	2a00      	cmp	r2, #0
 800717a:	bf0c      	ite	eq
 800717c:	2201      	moveq	r2, #1
 800717e:	f04f 32ff 	movne.w	r2, #4294967295
 8007182:	608a      	str	r2, [r1, #8]
 8007184:	2700      	movs	r7, #0
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007218 <_scanf_chars+0xb0>
 800718c:	06d1      	lsls	r1, r2, #27
 800718e:	bf5f      	itttt	pl
 8007190:	681a      	ldrpl	r2, [r3, #0]
 8007192:	1d11      	addpl	r1, r2, #4
 8007194:	6019      	strpl	r1, [r3, #0]
 8007196:	6816      	ldrpl	r6, [r2, #0]
 8007198:	69a0      	ldr	r0, [r4, #24]
 800719a:	b188      	cbz	r0, 80071c0 <_scanf_chars+0x58>
 800719c:	2801      	cmp	r0, #1
 800719e:	d107      	bne.n	80071b0 <_scanf_chars+0x48>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	6963      	ldr	r3, [r4, #20]
 80071a6:	5c9b      	ldrb	r3, [r3, r2]
 80071a8:	b953      	cbnz	r3, 80071c0 <_scanf_chars+0x58>
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d031      	beq.n	8007212 <_scanf_chars+0xaa>
 80071ae:	e022      	b.n	80071f6 <_scanf_chars+0x8e>
 80071b0:	2802      	cmp	r0, #2
 80071b2:	d120      	bne.n	80071f6 <_scanf_chars+0x8e>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80071bc:	071b      	lsls	r3, r3, #28
 80071be:	d41a      	bmi.n	80071f6 <_scanf_chars+0x8e>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	3701      	adds	r7, #1
 80071c4:	06da      	lsls	r2, r3, #27
 80071c6:	bf5e      	ittt	pl
 80071c8:	682b      	ldrpl	r3, [r5, #0]
 80071ca:	781b      	ldrbpl	r3, [r3, #0]
 80071cc:	f806 3b01 	strbpl.w	r3, [r6], #1
 80071d0:	682a      	ldr	r2, [r5, #0]
 80071d2:	686b      	ldr	r3, [r5, #4]
 80071d4:	3201      	adds	r2, #1
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	68a2      	ldr	r2, [r4, #8]
 80071da:	3b01      	subs	r3, #1
 80071dc:	3a01      	subs	r2, #1
 80071de:	606b      	str	r3, [r5, #4]
 80071e0:	60a2      	str	r2, [r4, #8]
 80071e2:	b142      	cbz	r2, 80071f6 <_scanf_chars+0x8e>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dcd7      	bgt.n	8007198 <_scanf_chars+0x30>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4640      	mov	r0, r8
 80071ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071f0:	4798      	blx	r3
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0d0      	beq.n	8007198 <_scanf_chars+0x30>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f013 0310 	ands.w	r3, r3, #16
 80071fc:	d105      	bne.n	800720a <_scanf_chars+0xa2>
 80071fe:	68e2      	ldr	r2, [r4, #12]
 8007200:	3201      	adds	r2, #1
 8007202:	60e2      	str	r2, [r4, #12]
 8007204:	69a2      	ldr	r2, [r4, #24]
 8007206:	b102      	cbz	r2, 800720a <_scanf_chars+0xa2>
 8007208:	7033      	strb	r3, [r6, #0]
 800720a:	2000      	movs	r0, #0
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	443b      	add	r3, r7
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007216:	bf00      	nop
 8007218:	080082b1 	.word	0x080082b1

0800721c <_scanf_i>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	460c      	mov	r4, r1
 8007222:	4698      	mov	r8, r3
 8007224:	4b75      	ldr	r3, [pc, #468]	; (80073fc <_scanf_i+0x1e0>)
 8007226:	b087      	sub	sp, #28
 8007228:	4682      	mov	sl, r0
 800722a:	4616      	mov	r6, r2
 800722c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007230:	ab03      	add	r3, sp, #12
 8007232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007236:	4b72      	ldr	r3, [pc, #456]	; (8007400 <_scanf_i+0x1e4>)
 8007238:	69a1      	ldr	r1, [r4, #24]
 800723a:	4a72      	ldr	r2, [pc, #456]	; (8007404 <_scanf_i+0x1e8>)
 800723c:	4627      	mov	r7, r4
 800723e:	2903      	cmp	r1, #3
 8007240:	bf18      	it	ne
 8007242:	461a      	movne	r2, r3
 8007244:	68a3      	ldr	r3, [r4, #8]
 8007246:	9201      	str	r2, [sp, #4]
 8007248:	1e5a      	subs	r2, r3, #1
 800724a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800724e:	bf81      	itttt	hi
 8007250:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007254:	eb03 0905 	addhi.w	r9, r3, r5
 8007258:	f240 135d 	movwhi	r3, #349	; 0x15d
 800725c:	60a3      	strhi	r3, [r4, #8]
 800725e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007262:	bf98      	it	ls
 8007264:	f04f 0900 	movls.w	r9, #0
 8007268:	463d      	mov	r5, r7
 800726a:	f04f 0b00 	mov.w	fp, #0
 800726e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	6831      	ldr	r1, [r6, #0]
 8007276:	ab03      	add	r3, sp, #12
 8007278:	2202      	movs	r2, #2
 800727a:	7809      	ldrb	r1, [r1, #0]
 800727c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007280:	f000 fc32 	bl	8007ae8 <memchr>
 8007284:	b328      	cbz	r0, 80072d2 <_scanf_i+0xb6>
 8007286:	f1bb 0f01 	cmp.w	fp, #1
 800728a:	d159      	bne.n	8007340 <_scanf_i+0x124>
 800728c:	6862      	ldr	r2, [r4, #4]
 800728e:	b92a      	cbnz	r2, 800729c <_scanf_i+0x80>
 8007290:	2308      	movs	r3, #8
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	68a2      	ldr	r2, [r4, #8]
 80072a6:	1e51      	subs	r1, r2, #1
 80072a8:	60a1      	str	r1, [r4, #8]
 80072aa:	b192      	cbz	r2, 80072d2 <_scanf_i+0xb6>
 80072ac:	6832      	ldr	r2, [r6, #0]
 80072ae:	1c51      	adds	r1, r2, #1
 80072b0:	6031      	str	r1, [r6, #0]
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	f805 2b01 	strb.w	r2, [r5], #1
 80072b8:	6872      	ldr	r2, [r6, #4]
 80072ba:	3a01      	subs	r2, #1
 80072bc:	2a00      	cmp	r2, #0
 80072be:	6072      	str	r2, [r6, #4]
 80072c0:	dc07      	bgt.n	80072d2 <_scanf_i+0xb6>
 80072c2:	4631      	mov	r1, r6
 80072c4:	4650      	mov	r0, sl
 80072c6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80072ca:	4790      	blx	r2
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f040 8085 	bne.w	80073dc <_scanf_i+0x1c0>
 80072d2:	f10b 0b01 	add.w	fp, fp, #1
 80072d6:	f1bb 0f03 	cmp.w	fp, #3
 80072da:	d1cb      	bne.n	8007274 <_scanf_i+0x58>
 80072dc:	6863      	ldr	r3, [r4, #4]
 80072de:	b90b      	cbnz	r3, 80072e4 <_scanf_i+0xc8>
 80072e0:	230a      	movs	r3, #10
 80072e2:	6063      	str	r3, [r4, #4]
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	4948      	ldr	r1, [pc, #288]	; (8007408 <_scanf_i+0x1ec>)
 80072e8:	6960      	ldr	r0, [r4, #20]
 80072ea:	1ac9      	subs	r1, r1, r3
 80072ec:	f000 f8a6 	bl	800743c <__sccl>
 80072f0:	f04f 0b00 	mov.w	fp, #0
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d03d      	beq.n	8007378 <_scanf_i+0x15c>
 80072fc:	6831      	ldr	r1, [r6, #0]
 80072fe:	6960      	ldr	r0, [r4, #20]
 8007300:	f891 c000 	ldrb.w	ip, [r1]
 8007304:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007308:	2800      	cmp	r0, #0
 800730a:	d035      	beq.n	8007378 <_scanf_i+0x15c>
 800730c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007310:	d124      	bne.n	800735c <_scanf_i+0x140>
 8007312:	0510      	lsls	r0, r2, #20
 8007314:	d522      	bpl.n	800735c <_scanf_i+0x140>
 8007316:	f10b 0b01 	add.w	fp, fp, #1
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	d003      	beq.n	8007328 <_scanf_i+0x10c>
 8007320:	3301      	adds	r3, #1
 8007322:	f109 39ff 	add.w	r9, r9, #4294967295
 8007326:	60a3      	str	r3, [r4, #8]
 8007328:	6873      	ldr	r3, [r6, #4]
 800732a:	3b01      	subs	r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	6073      	str	r3, [r6, #4]
 8007330:	dd1b      	ble.n	800736a <_scanf_i+0x14e>
 8007332:	6833      	ldr	r3, [r6, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	6033      	str	r3, [r6, #0]
 8007338:	68a3      	ldr	r3, [r4, #8]
 800733a:	3b01      	subs	r3, #1
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	e7d9      	b.n	80072f4 <_scanf_i+0xd8>
 8007340:	f1bb 0f02 	cmp.w	fp, #2
 8007344:	d1ae      	bne.n	80072a4 <_scanf_i+0x88>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800734c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007350:	d1bf      	bne.n	80072d2 <_scanf_i+0xb6>
 8007352:	2310      	movs	r3, #16
 8007354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007358:	6063      	str	r3, [r4, #4]
 800735a:	e7a2      	b.n	80072a2 <_scanf_i+0x86>
 800735c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007360:	6022      	str	r2, [r4, #0]
 8007362:	780b      	ldrb	r3, [r1, #0]
 8007364:	f805 3b01 	strb.w	r3, [r5], #1
 8007368:	e7de      	b.n	8007328 <_scanf_i+0x10c>
 800736a:	4631      	mov	r1, r6
 800736c:	4650      	mov	r0, sl
 800736e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007372:	4798      	blx	r3
 8007374:	2800      	cmp	r0, #0
 8007376:	d0df      	beq.n	8007338 <_scanf_i+0x11c>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	05db      	lsls	r3, r3, #23
 800737c:	d50d      	bpl.n	800739a <_scanf_i+0x17e>
 800737e:	42bd      	cmp	r5, r7
 8007380:	d909      	bls.n	8007396 <_scanf_i+0x17a>
 8007382:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007386:	4632      	mov	r2, r6
 8007388:	4650      	mov	r0, sl
 800738a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800738e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007392:	4798      	blx	r3
 8007394:	464d      	mov	r5, r9
 8007396:	42bd      	cmp	r5, r7
 8007398:	d02d      	beq.n	80073f6 <_scanf_i+0x1da>
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	f012 0210 	ands.w	r2, r2, #16
 80073a0:	d113      	bne.n	80073ca <_scanf_i+0x1ae>
 80073a2:	702a      	strb	r2, [r5, #0]
 80073a4:	4639      	mov	r1, r7
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	4650      	mov	r0, sl
 80073aa:	9e01      	ldr	r6, [sp, #4]
 80073ac:	47b0      	blx	r6
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	f8d8 3000 	ldr.w	r3, [r8]
 80073b4:	f011 0f20 	tst.w	r1, #32
 80073b8:	d013      	beq.n	80073e2 <_scanf_i+0x1c6>
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	f8c8 2000 	str.w	r2, [r8]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6018      	str	r0, [r3, #0]
 80073c4:	68e3      	ldr	r3, [r4, #12]
 80073c6:	3301      	adds	r3, #1
 80073c8:	60e3      	str	r3, [r4, #12]
 80073ca:	2000      	movs	r0, #0
 80073cc:	1bed      	subs	r5, r5, r7
 80073ce:	44ab      	add	fp, r5
 80073d0:	6925      	ldr	r5, [r4, #16]
 80073d2:	445d      	add	r5, fp
 80073d4:	6125      	str	r5, [r4, #16]
 80073d6:	b007      	add	sp, #28
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	f04f 0b00 	mov.w	fp, #0
 80073e0:	e7ca      	b.n	8007378 <_scanf_i+0x15c>
 80073e2:	1d1a      	adds	r2, r3, #4
 80073e4:	f8c8 2000 	str.w	r2, [r8]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f011 0f01 	tst.w	r1, #1
 80073ee:	bf14      	ite	ne
 80073f0:	8018      	strhne	r0, [r3, #0]
 80073f2:	6018      	streq	r0, [r3, #0]
 80073f4:	e7e6      	b.n	80073c4 <_scanf_i+0x1a8>
 80073f6:	2001      	movs	r0, #1
 80073f8:	e7ed      	b.n	80073d6 <_scanf_i+0x1ba>
 80073fa:	bf00      	nop
 80073fc:	08008294 	.word	0x08008294
 8007400:	0800768d 	.word	0x0800768d
 8007404:	080075a5 	.word	0x080075a5
 8007408:	08008660 	.word	0x08008660

0800740c <_read_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4604      	mov	r4, r0
 8007410:	4608      	mov	r0, r1
 8007412:	4611      	mov	r1, r2
 8007414:	2200      	movs	r2, #0
 8007416:	4d05      	ldr	r5, [pc, #20]	; (800742c <_read_r+0x20>)
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f7fd f866 	bl	80044ec <_read>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_read_r+0x1e>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_read_r+0x1e>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	200002b8 	.word	0x200002b8

08007430 <nan>:
 8007430:	2000      	movs	r0, #0
 8007432:	4901      	ldr	r1, [pc, #4]	; (8007438 <nan+0x8>)
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	7ff80000 	.word	0x7ff80000

0800743c <__sccl>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	780b      	ldrb	r3, [r1, #0]
 8007440:	4604      	mov	r4, r0
 8007442:	2b5e      	cmp	r3, #94	; 0x5e
 8007444:	bf13      	iteet	ne
 8007446:	2200      	movne	r2, #0
 8007448:	2201      	moveq	r2, #1
 800744a:	784b      	ldrbeq	r3, [r1, #1]
 800744c:	1c48      	addne	r0, r1, #1
 800744e:	bf08      	it	eq
 8007450:	1c88      	addeq	r0, r1, #2
 8007452:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007456:	1e61      	subs	r1, r4, #1
 8007458:	f801 2f01 	strb.w	r2, [r1, #1]!
 800745c:	42a9      	cmp	r1, r5
 800745e:	d1fb      	bne.n	8007458 <__sccl+0x1c>
 8007460:	b90b      	cbnz	r3, 8007466 <__sccl+0x2a>
 8007462:	3801      	subs	r0, #1
 8007464:	bd70      	pop	{r4, r5, r6, pc}
 8007466:	f082 0201 	eor.w	r2, r2, #1
 800746a:	4605      	mov	r5, r0
 800746c:	54e2      	strb	r2, [r4, r3]
 800746e:	4628      	mov	r0, r5
 8007470:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007474:	292d      	cmp	r1, #45	; 0x2d
 8007476:	d006      	beq.n	8007486 <__sccl+0x4a>
 8007478:	295d      	cmp	r1, #93	; 0x5d
 800747a:	d0f3      	beq.n	8007464 <__sccl+0x28>
 800747c:	b909      	cbnz	r1, 8007482 <__sccl+0x46>
 800747e:	4628      	mov	r0, r5
 8007480:	e7f0      	b.n	8007464 <__sccl+0x28>
 8007482:	460b      	mov	r3, r1
 8007484:	e7f1      	b.n	800746a <__sccl+0x2e>
 8007486:	786e      	ldrb	r6, [r5, #1]
 8007488:	2e5d      	cmp	r6, #93	; 0x5d
 800748a:	d0fa      	beq.n	8007482 <__sccl+0x46>
 800748c:	42b3      	cmp	r3, r6
 800748e:	dcf8      	bgt.n	8007482 <__sccl+0x46>
 8007490:	4619      	mov	r1, r3
 8007492:	3502      	adds	r5, #2
 8007494:	3101      	adds	r1, #1
 8007496:	428e      	cmp	r6, r1
 8007498:	5462      	strb	r2, [r4, r1]
 800749a:	dcfb      	bgt.n	8007494 <__sccl+0x58>
 800749c:	1af1      	subs	r1, r6, r3
 800749e:	3901      	subs	r1, #1
 80074a0:	42b3      	cmp	r3, r6
 80074a2:	bfa8      	it	ge
 80074a4:	2100      	movge	r1, #0
 80074a6:	1c58      	adds	r0, r3, #1
 80074a8:	1843      	adds	r3, r0, r1
 80074aa:	e7e0      	b.n	800746e <__sccl+0x32>

080074ac <_strtol_l.constprop.0>:
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b2:	4680      	mov	r8, r0
 80074b4:	d001      	beq.n	80074ba <_strtol_l.constprop.0+0xe>
 80074b6:	2b24      	cmp	r3, #36	; 0x24
 80074b8:	d906      	bls.n	80074c8 <_strtol_l.constprop.0+0x1c>
 80074ba:	f7fd f8e1 	bl	8004680 <__errno>
 80074be:	2316      	movs	r3, #22
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	2000      	movs	r0, #0
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	460d      	mov	r5, r1
 80074ca:	4f35      	ldr	r7, [pc, #212]	; (80075a0 <_strtol_l.constprop.0+0xf4>)
 80074cc:	4628      	mov	r0, r5
 80074ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074d2:	5de6      	ldrb	r6, [r4, r7]
 80074d4:	f016 0608 	ands.w	r6, r6, #8
 80074d8:	d1f8      	bne.n	80074cc <_strtol_l.constprop.0+0x20>
 80074da:	2c2d      	cmp	r4, #45	; 0x2d
 80074dc:	d12f      	bne.n	800753e <_strtol_l.constprop.0+0x92>
 80074de:	2601      	movs	r6, #1
 80074e0:	782c      	ldrb	r4, [r5, #0]
 80074e2:	1c85      	adds	r5, r0, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d057      	beq.n	8007598 <_strtol_l.constprop.0+0xec>
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d109      	bne.n	8007500 <_strtol_l.constprop.0+0x54>
 80074ec:	2c30      	cmp	r4, #48	; 0x30
 80074ee:	d107      	bne.n	8007500 <_strtol_l.constprop.0+0x54>
 80074f0:	7828      	ldrb	r0, [r5, #0]
 80074f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80074f6:	2858      	cmp	r0, #88	; 0x58
 80074f8:	d149      	bne.n	800758e <_strtol_l.constprop.0+0xe2>
 80074fa:	2310      	movs	r3, #16
 80074fc:	786c      	ldrb	r4, [r5, #1]
 80074fe:	3502      	adds	r5, #2
 8007500:	2700      	movs	r7, #0
 8007502:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007506:	f10e 3eff 	add.w	lr, lr, #4294967295
 800750a:	fbbe f9f3 	udiv	r9, lr, r3
 800750e:	4638      	mov	r0, r7
 8007510:	fb03 ea19 	mls	sl, r3, r9, lr
 8007514:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007518:	f1bc 0f09 	cmp.w	ip, #9
 800751c:	d814      	bhi.n	8007548 <_strtol_l.constprop.0+0x9c>
 800751e:	4664      	mov	r4, ip
 8007520:	42a3      	cmp	r3, r4
 8007522:	dd22      	ble.n	800756a <_strtol_l.constprop.0+0xbe>
 8007524:	2f00      	cmp	r7, #0
 8007526:	db1d      	blt.n	8007564 <_strtol_l.constprop.0+0xb8>
 8007528:	4581      	cmp	r9, r0
 800752a:	d31b      	bcc.n	8007564 <_strtol_l.constprop.0+0xb8>
 800752c:	d101      	bne.n	8007532 <_strtol_l.constprop.0+0x86>
 800752e:	45a2      	cmp	sl, r4
 8007530:	db18      	blt.n	8007564 <_strtol_l.constprop.0+0xb8>
 8007532:	2701      	movs	r7, #1
 8007534:	fb00 4003 	mla	r0, r0, r3, r4
 8007538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800753c:	e7ea      	b.n	8007514 <_strtol_l.constprop.0+0x68>
 800753e:	2c2b      	cmp	r4, #43	; 0x2b
 8007540:	bf04      	itt	eq
 8007542:	782c      	ldrbeq	r4, [r5, #0]
 8007544:	1c85      	addeq	r5, r0, #2
 8007546:	e7cd      	b.n	80074e4 <_strtol_l.constprop.0+0x38>
 8007548:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800754c:	f1bc 0f19 	cmp.w	ip, #25
 8007550:	d801      	bhi.n	8007556 <_strtol_l.constprop.0+0xaa>
 8007552:	3c37      	subs	r4, #55	; 0x37
 8007554:	e7e4      	b.n	8007520 <_strtol_l.constprop.0+0x74>
 8007556:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800755a:	f1bc 0f19 	cmp.w	ip, #25
 800755e:	d804      	bhi.n	800756a <_strtol_l.constprop.0+0xbe>
 8007560:	3c57      	subs	r4, #87	; 0x57
 8007562:	e7dd      	b.n	8007520 <_strtol_l.constprop.0+0x74>
 8007564:	f04f 37ff 	mov.w	r7, #4294967295
 8007568:	e7e6      	b.n	8007538 <_strtol_l.constprop.0+0x8c>
 800756a:	2f00      	cmp	r7, #0
 800756c:	da07      	bge.n	800757e <_strtol_l.constprop.0+0xd2>
 800756e:	2322      	movs	r3, #34	; 0x22
 8007570:	4670      	mov	r0, lr
 8007572:	f8c8 3000 	str.w	r3, [r8]
 8007576:	2a00      	cmp	r2, #0
 8007578:	d0a4      	beq.n	80074c4 <_strtol_l.constprop.0+0x18>
 800757a:	1e69      	subs	r1, r5, #1
 800757c:	e005      	b.n	800758a <_strtol_l.constprop.0+0xde>
 800757e:	b106      	cbz	r6, 8007582 <_strtol_l.constprop.0+0xd6>
 8007580:	4240      	negs	r0, r0
 8007582:	2a00      	cmp	r2, #0
 8007584:	d09e      	beq.n	80074c4 <_strtol_l.constprop.0+0x18>
 8007586:	2f00      	cmp	r7, #0
 8007588:	d1f7      	bne.n	800757a <_strtol_l.constprop.0+0xce>
 800758a:	6011      	str	r1, [r2, #0]
 800758c:	e79a      	b.n	80074c4 <_strtol_l.constprop.0+0x18>
 800758e:	2430      	movs	r4, #48	; 0x30
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1b5      	bne.n	8007500 <_strtol_l.constprop.0+0x54>
 8007594:	2308      	movs	r3, #8
 8007596:	e7b3      	b.n	8007500 <_strtol_l.constprop.0+0x54>
 8007598:	2c30      	cmp	r4, #48	; 0x30
 800759a:	d0a9      	beq.n	80074f0 <_strtol_l.constprop.0+0x44>
 800759c:	230a      	movs	r3, #10
 800759e:	e7af      	b.n	8007500 <_strtol_l.constprop.0+0x54>
 80075a0:	080082b1 	.word	0x080082b1

080075a4 <_strtol_r>:
 80075a4:	f7ff bf82 	b.w	80074ac <_strtol_l.constprop.0>

080075a8 <_strtoul_l.constprop.0>:
 80075a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075ac:	4686      	mov	lr, r0
 80075ae:	460d      	mov	r5, r1
 80075b0:	4f35      	ldr	r7, [pc, #212]	; (8007688 <_strtoul_l.constprop.0+0xe0>)
 80075b2:	4628      	mov	r0, r5
 80075b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b8:	5de6      	ldrb	r6, [r4, r7]
 80075ba:	f016 0608 	ands.w	r6, r6, #8
 80075be:	d1f8      	bne.n	80075b2 <_strtoul_l.constprop.0+0xa>
 80075c0:	2c2d      	cmp	r4, #45	; 0x2d
 80075c2:	d12f      	bne.n	8007624 <_strtoul_l.constprop.0+0x7c>
 80075c4:	2601      	movs	r6, #1
 80075c6:	782c      	ldrb	r4, [r5, #0]
 80075c8:	1c85      	adds	r5, r0, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d057      	beq.n	800767e <_strtoul_l.constprop.0+0xd6>
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d109      	bne.n	80075e6 <_strtoul_l.constprop.0+0x3e>
 80075d2:	2c30      	cmp	r4, #48	; 0x30
 80075d4:	d107      	bne.n	80075e6 <_strtoul_l.constprop.0+0x3e>
 80075d6:	7828      	ldrb	r0, [r5, #0]
 80075d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80075dc:	2858      	cmp	r0, #88	; 0x58
 80075de:	d149      	bne.n	8007674 <_strtoul_l.constprop.0+0xcc>
 80075e0:	2310      	movs	r3, #16
 80075e2:	786c      	ldrb	r4, [r5, #1]
 80075e4:	3502      	adds	r5, #2
 80075e6:	f04f 38ff 	mov.w	r8, #4294967295
 80075ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80075ee:	2700      	movs	r7, #0
 80075f0:	fb03 f908 	mul.w	r9, r3, r8
 80075f4:	4638      	mov	r0, r7
 80075f6:	ea6f 0909 	mvn.w	r9, r9
 80075fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80075fe:	f1bc 0f09 	cmp.w	ip, #9
 8007602:	d814      	bhi.n	800762e <_strtoul_l.constprop.0+0x86>
 8007604:	4664      	mov	r4, ip
 8007606:	42a3      	cmp	r3, r4
 8007608:	dd22      	ble.n	8007650 <_strtoul_l.constprop.0+0xa8>
 800760a:	2f00      	cmp	r7, #0
 800760c:	db1d      	blt.n	800764a <_strtoul_l.constprop.0+0xa2>
 800760e:	4580      	cmp	r8, r0
 8007610:	d31b      	bcc.n	800764a <_strtoul_l.constprop.0+0xa2>
 8007612:	d101      	bne.n	8007618 <_strtoul_l.constprop.0+0x70>
 8007614:	45a1      	cmp	r9, r4
 8007616:	db18      	blt.n	800764a <_strtoul_l.constprop.0+0xa2>
 8007618:	2701      	movs	r7, #1
 800761a:	fb00 4003 	mla	r0, r0, r3, r4
 800761e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007622:	e7ea      	b.n	80075fa <_strtoul_l.constprop.0+0x52>
 8007624:	2c2b      	cmp	r4, #43	; 0x2b
 8007626:	bf04      	itt	eq
 8007628:	782c      	ldrbeq	r4, [r5, #0]
 800762a:	1c85      	addeq	r5, r0, #2
 800762c:	e7cd      	b.n	80075ca <_strtoul_l.constprop.0+0x22>
 800762e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007632:	f1bc 0f19 	cmp.w	ip, #25
 8007636:	d801      	bhi.n	800763c <_strtoul_l.constprop.0+0x94>
 8007638:	3c37      	subs	r4, #55	; 0x37
 800763a:	e7e4      	b.n	8007606 <_strtoul_l.constprop.0+0x5e>
 800763c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007640:	f1bc 0f19 	cmp.w	ip, #25
 8007644:	d804      	bhi.n	8007650 <_strtoul_l.constprop.0+0xa8>
 8007646:	3c57      	subs	r4, #87	; 0x57
 8007648:	e7dd      	b.n	8007606 <_strtoul_l.constprop.0+0x5e>
 800764a:	f04f 37ff 	mov.w	r7, #4294967295
 800764e:	e7e6      	b.n	800761e <_strtoul_l.constprop.0+0x76>
 8007650:	2f00      	cmp	r7, #0
 8007652:	da07      	bge.n	8007664 <_strtoul_l.constprop.0+0xbc>
 8007654:	2322      	movs	r3, #34	; 0x22
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	f8ce 3000 	str.w	r3, [lr]
 800765e:	b932      	cbnz	r2, 800766e <_strtoul_l.constprop.0+0xc6>
 8007660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007664:	b106      	cbz	r6, 8007668 <_strtoul_l.constprop.0+0xc0>
 8007666:	4240      	negs	r0, r0
 8007668:	2a00      	cmp	r2, #0
 800766a:	d0f9      	beq.n	8007660 <_strtoul_l.constprop.0+0xb8>
 800766c:	b107      	cbz	r7, 8007670 <_strtoul_l.constprop.0+0xc8>
 800766e:	1e69      	subs	r1, r5, #1
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	e7f5      	b.n	8007660 <_strtoul_l.constprop.0+0xb8>
 8007674:	2430      	movs	r4, #48	; 0x30
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1b5      	bne.n	80075e6 <_strtoul_l.constprop.0+0x3e>
 800767a:	2308      	movs	r3, #8
 800767c:	e7b3      	b.n	80075e6 <_strtoul_l.constprop.0+0x3e>
 800767e:	2c30      	cmp	r4, #48	; 0x30
 8007680:	d0a9      	beq.n	80075d6 <_strtoul_l.constprop.0+0x2e>
 8007682:	230a      	movs	r3, #10
 8007684:	e7af      	b.n	80075e6 <_strtoul_l.constprop.0+0x3e>
 8007686:	bf00      	nop
 8007688:	080082b1 	.word	0x080082b1

0800768c <_strtoul_r>:
 800768c:	f7ff bf8c 	b.w	80075a8 <_strtoul_l.constprop.0>

08007690 <__submore>:
 8007690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007694:	460c      	mov	r4, r1
 8007696:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800769c:	4299      	cmp	r1, r3
 800769e:	d11b      	bne.n	80076d8 <__submore+0x48>
 80076a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076a4:	f7fd f8a4 	bl	80047f0 <_malloc_r>
 80076a8:	b918      	cbnz	r0, 80076b2 <__submore+0x22>
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80076b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80076bc:	6360      	str	r0, [r4, #52]	; 0x34
 80076be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80076c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80076c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80076ca:	7043      	strb	r3, [r0, #1]
 80076cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076d0:	7003      	strb	r3, [r0, #0]
 80076d2:	6020      	str	r0, [r4, #0]
 80076d4:	2000      	movs	r0, #0
 80076d6:	e7ea      	b.n	80076ae <__submore+0x1e>
 80076d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80076da:	0077      	lsls	r7, r6, #1
 80076dc:	463a      	mov	r2, r7
 80076de:	f7ff f84f 	bl	8006780 <_realloc_r>
 80076e2:	4605      	mov	r5, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0e0      	beq.n	80076aa <__submore+0x1a>
 80076e8:	eb00 0806 	add.w	r8, r0, r6
 80076ec:	4601      	mov	r1, r0
 80076ee:	4632      	mov	r2, r6
 80076f0:	4640      	mov	r0, r8
 80076f2:	f7fc ffff 	bl	80046f4 <memcpy>
 80076f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80076fa:	f8c4 8000 	str.w	r8, [r4]
 80076fe:	e7e9      	b.n	80076d4 <__submore+0x44>

08007700 <__ascii_wctomb>:
 8007700:	4603      	mov	r3, r0
 8007702:	4608      	mov	r0, r1
 8007704:	b141      	cbz	r1, 8007718 <__ascii_wctomb+0x18>
 8007706:	2aff      	cmp	r2, #255	; 0xff
 8007708:	d904      	bls.n	8007714 <__ascii_wctomb+0x14>
 800770a:	228a      	movs	r2, #138	; 0x8a
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	4770      	bx	lr
 8007714:	2001      	movs	r0, #1
 8007716:	700a      	strb	r2, [r1, #0]
 8007718:	4770      	bx	lr
	...

0800771c <__assert_func>:
 800771c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800771e:	4614      	mov	r4, r2
 8007720:	461a      	mov	r2, r3
 8007722:	4b09      	ldr	r3, [pc, #36]	; (8007748 <__assert_func+0x2c>)
 8007724:	4605      	mov	r5, r0
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68d8      	ldr	r0, [r3, #12]
 800772a:	b14c      	cbz	r4, 8007740 <__assert_func+0x24>
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <__assert_func+0x30>)
 800772e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007732:	9100      	str	r1, [sp, #0]
 8007734:	462b      	mov	r3, r5
 8007736:	4906      	ldr	r1, [pc, #24]	; (8007750 <__assert_func+0x34>)
 8007738:	f000 f9a2 	bl	8007a80 <fiprintf>
 800773c:	f000 fc1c 	bl	8007f78 <abort>
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <__assert_func+0x38>)
 8007742:	461c      	mov	r4, r3
 8007744:	e7f3      	b.n	800772e <__assert_func+0x12>
 8007746:	bf00      	nop
 8007748:	20000020 	.word	0x20000020
 800774c:	08008662 	.word	0x08008662
 8007750:	0800866f 	.word	0x0800866f
 8007754:	0800869d 	.word	0x0800869d

08007758 <__sflush_r>:
 8007758:	898a      	ldrh	r2, [r1, #12]
 800775a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775c:	4605      	mov	r5, r0
 800775e:	0710      	lsls	r0, r2, #28
 8007760:	460c      	mov	r4, r1
 8007762:	d457      	bmi.n	8007814 <__sflush_r+0xbc>
 8007764:	684b      	ldr	r3, [r1, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc04      	bgt.n	8007774 <__sflush_r+0x1c>
 800776a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc01      	bgt.n	8007774 <__sflush_r+0x1c>
 8007770:	2000      	movs	r0, #0
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007776:	2e00      	cmp	r6, #0
 8007778:	d0fa      	beq.n	8007770 <__sflush_r+0x18>
 800777a:	2300      	movs	r3, #0
 800777c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007780:	682f      	ldr	r7, [r5, #0]
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	d032      	beq.n	80077ec <__sflush_r+0x94>
 8007786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	075a      	lsls	r2, r3, #29
 800778c:	d505      	bpl.n	800779a <__sflush_r+0x42>
 800778e:	6863      	ldr	r3, [r4, #4]
 8007790:	1ac0      	subs	r0, r0, r3
 8007792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007794:	b10b      	cbz	r3, 800779a <__sflush_r+0x42>
 8007796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007798:	1ac0      	subs	r0, r0, r3
 800779a:	2300      	movs	r3, #0
 800779c:	4602      	mov	r2, r0
 800779e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077a0:	4628      	mov	r0, r5
 80077a2:	6a21      	ldr	r1, [r4, #32]
 80077a4:	47b0      	blx	r6
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	d106      	bne.n	80077ba <__sflush_r+0x62>
 80077ac:	6829      	ldr	r1, [r5, #0]
 80077ae:	291d      	cmp	r1, #29
 80077b0:	d82c      	bhi.n	800780c <__sflush_r+0xb4>
 80077b2:	4a29      	ldr	r2, [pc, #164]	; (8007858 <__sflush_r+0x100>)
 80077b4:	40ca      	lsrs	r2, r1
 80077b6:	07d6      	lsls	r6, r2, #31
 80077b8:	d528      	bpl.n	800780c <__sflush_r+0xb4>
 80077ba:	2200      	movs	r2, #0
 80077bc:	6062      	str	r2, [r4, #4]
 80077be:	6922      	ldr	r2, [r4, #16]
 80077c0:	04d9      	lsls	r1, r3, #19
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	d504      	bpl.n	80077d0 <__sflush_r+0x78>
 80077c6:	1c42      	adds	r2, r0, #1
 80077c8:	d101      	bne.n	80077ce <__sflush_r+0x76>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b903      	cbnz	r3, 80077d0 <__sflush_r+0x78>
 80077ce:	6560      	str	r0, [r4, #84]	; 0x54
 80077d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d2:	602f      	str	r7, [r5, #0]
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d0cb      	beq.n	8007770 <__sflush_r+0x18>
 80077d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077dc:	4299      	cmp	r1, r3
 80077de:	d002      	beq.n	80077e6 <__sflush_r+0x8e>
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7fc ff9d 	bl	8004720 <_free_r>
 80077e6:	2000      	movs	r0, #0
 80077e8:	6360      	str	r0, [r4, #52]	; 0x34
 80077ea:	e7c2      	b.n	8007772 <__sflush_r+0x1a>
 80077ec:	6a21      	ldr	r1, [r4, #32]
 80077ee:	2301      	movs	r3, #1
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b0      	blx	r6
 80077f4:	1c41      	adds	r1, r0, #1
 80077f6:	d1c7      	bne.n	8007788 <__sflush_r+0x30>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0c4      	beq.n	8007788 <__sflush_r+0x30>
 80077fe:	2b1d      	cmp	r3, #29
 8007800:	d001      	beq.n	8007806 <__sflush_r+0xae>
 8007802:	2b16      	cmp	r3, #22
 8007804:	d101      	bne.n	800780a <__sflush_r+0xb2>
 8007806:	602f      	str	r7, [r5, #0]
 8007808:	e7b2      	b.n	8007770 <__sflush_r+0x18>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	e7ae      	b.n	8007772 <__sflush_r+0x1a>
 8007814:	690f      	ldr	r7, [r1, #16]
 8007816:	2f00      	cmp	r7, #0
 8007818:	d0aa      	beq.n	8007770 <__sflush_r+0x18>
 800781a:	0793      	lsls	r3, r2, #30
 800781c:	bf18      	it	ne
 800781e:	2300      	movne	r3, #0
 8007820:	680e      	ldr	r6, [r1, #0]
 8007822:	bf08      	it	eq
 8007824:	694b      	ldreq	r3, [r1, #20]
 8007826:	1bf6      	subs	r6, r6, r7
 8007828:	600f      	str	r7, [r1, #0]
 800782a:	608b      	str	r3, [r1, #8]
 800782c:	2e00      	cmp	r6, #0
 800782e:	dd9f      	ble.n	8007770 <__sflush_r+0x18>
 8007830:	4633      	mov	r3, r6
 8007832:	463a      	mov	r2, r7
 8007834:	4628      	mov	r0, r5
 8007836:	6a21      	ldr	r1, [r4, #32]
 8007838:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800783c:	47e0      	blx	ip
 800783e:	2800      	cmp	r0, #0
 8007840:	dc06      	bgt.n	8007850 <__sflush_r+0xf8>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	e790      	b.n	8007772 <__sflush_r+0x1a>
 8007850:	4407      	add	r7, r0
 8007852:	1a36      	subs	r6, r6, r0
 8007854:	e7ea      	b.n	800782c <__sflush_r+0xd4>
 8007856:	bf00      	nop
 8007858:	20400001 	.word	0x20400001

0800785c <_fflush_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b913      	cbnz	r3, 800786c <_fflush_r+0x10>
 8007866:	2500      	movs	r5, #0
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	b118      	cbz	r0, 8007876 <_fflush_r+0x1a>
 800786e:	6983      	ldr	r3, [r0, #24]
 8007870:	b90b      	cbnz	r3, 8007876 <_fflush_r+0x1a>
 8007872:	f000 f887 	bl	8007984 <__sinit>
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <_fflush_r+0x6c>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d11b      	bne.n	80078b4 <_fflush_r+0x58>
 800787c:	686c      	ldr	r4, [r5, #4]
 800787e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0ef      	beq.n	8007866 <_fflush_r+0xa>
 8007886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007888:	07d0      	lsls	r0, r2, #31
 800788a:	d404      	bmi.n	8007896 <_fflush_r+0x3a>
 800788c:	0599      	lsls	r1, r3, #22
 800788e:	d402      	bmi.n	8007896 <_fflush_r+0x3a>
 8007890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007892:	f000 f927 	bl	8007ae4 <__retarget_lock_acquire_recursive>
 8007896:	4628      	mov	r0, r5
 8007898:	4621      	mov	r1, r4
 800789a:	f7ff ff5d 	bl	8007758 <__sflush_r>
 800789e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078a0:	4605      	mov	r5, r0
 80078a2:	07da      	lsls	r2, r3, #31
 80078a4:	d4e0      	bmi.n	8007868 <_fflush_r+0xc>
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	059b      	lsls	r3, r3, #22
 80078aa:	d4dd      	bmi.n	8007868 <_fflush_r+0xc>
 80078ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ae:	f000 f91a 	bl	8007ae6 <__retarget_lock_release_recursive>
 80078b2:	e7d9      	b.n	8007868 <_fflush_r+0xc>
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_fflush_r+0x70>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d101      	bne.n	80078be <_fflush_r+0x62>
 80078ba:	68ac      	ldr	r4, [r5, #8]
 80078bc:	e7df      	b.n	800787e <_fflush_r+0x22>
 80078be:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <_fflush_r+0x74>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	bf08      	it	eq
 80078c4:	68ec      	ldreq	r4, [r5, #12]
 80078c6:	e7da      	b.n	800787e <_fflush_r+0x22>
 80078c8:	080086c0 	.word	0x080086c0
 80078cc:	080086e0 	.word	0x080086e0
 80078d0:	080086a0 	.word	0x080086a0

080078d4 <std>:
 80078d4:	2300      	movs	r3, #0
 80078d6:	b510      	push	{r4, lr}
 80078d8:	4604      	mov	r4, r0
 80078da:	e9c0 3300 	strd	r3, r3, [r0]
 80078de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078e2:	6083      	str	r3, [r0, #8]
 80078e4:	8181      	strh	r1, [r0, #12]
 80078e6:	6643      	str	r3, [r0, #100]	; 0x64
 80078e8:	81c2      	strh	r2, [r0, #14]
 80078ea:	6183      	str	r3, [r0, #24]
 80078ec:	4619      	mov	r1, r3
 80078ee:	2208      	movs	r2, #8
 80078f0:	305c      	adds	r0, #92	; 0x5c
 80078f2:	f7fc ff0d 	bl	8004710 <memset>
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x38>)
 80078f8:	6224      	str	r4, [r4, #32]
 80078fa:	6263      	str	r3, [r4, #36]	; 0x24
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <std+0x3c>)
 80078fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <std+0x40>)
 8007902:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <std+0x44>)
 8007906:	6323      	str	r3, [r4, #48]	; 0x30
 8007908:	bd10      	pop	{r4, pc}
 800790a:	bf00      	nop
 800790c:	0800499d 	.word	0x0800499d
 8007910:	080049c3 	.word	0x080049c3
 8007914:	080049fb 	.word	0x080049fb
 8007918:	08004a1f 	.word	0x08004a1f

0800791c <_cleanup_r>:
 800791c:	4901      	ldr	r1, [pc, #4]	; (8007924 <_cleanup_r+0x8>)
 800791e:	f000 b8c1 	b.w	8007aa4 <_fwalk_reent>
 8007922:	bf00      	nop
 8007924:	0800785d 	.word	0x0800785d

08007928 <__sfmoreglue>:
 8007928:	2268      	movs	r2, #104	; 0x68
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	1e4d      	subs	r5, r1, #1
 800792e:	4355      	muls	r5, r2
 8007930:	460e      	mov	r6, r1
 8007932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007936:	f7fc ff5b 	bl	80047f0 <_malloc_r>
 800793a:	4604      	mov	r4, r0
 800793c:	b140      	cbz	r0, 8007950 <__sfmoreglue+0x28>
 800793e:	2100      	movs	r1, #0
 8007940:	e9c0 1600 	strd	r1, r6, [r0]
 8007944:	300c      	adds	r0, #12
 8007946:	60a0      	str	r0, [r4, #8]
 8007948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800794c:	f7fc fee0 	bl	8004710 <memset>
 8007950:	4620      	mov	r0, r4
 8007952:	bd70      	pop	{r4, r5, r6, pc}

08007954 <__sfp_lock_acquire>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__sfp_lock_acquire+0x8>)
 8007956:	f000 b8c5 	b.w	8007ae4 <__retarget_lock_acquire_recursive>
 800795a:	bf00      	nop
 800795c:	200002bd 	.word	0x200002bd

08007960 <__sfp_lock_release>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__sfp_lock_release+0x8>)
 8007962:	f000 b8c0 	b.w	8007ae6 <__retarget_lock_release_recursive>
 8007966:	bf00      	nop
 8007968:	200002bd 	.word	0x200002bd

0800796c <__sinit_lock_acquire>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__sinit_lock_acquire+0x8>)
 800796e:	f000 b8b9 	b.w	8007ae4 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	200002be 	.word	0x200002be

08007978 <__sinit_lock_release>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__sinit_lock_release+0x8>)
 800797a:	f000 b8b4 	b.w	8007ae6 <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	200002be 	.word	0x200002be

08007984 <__sinit>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	f7ff fff0 	bl	800796c <__sinit_lock_acquire>
 800798c:	69a3      	ldr	r3, [r4, #24]
 800798e:	b11b      	cbz	r3, 8007998 <__sinit+0x14>
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f7ff bff0 	b.w	8007978 <__sinit_lock_release>
 8007998:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800799c:	6523      	str	r3, [r4, #80]	; 0x50
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <__sinit+0x68>)
 80079a0:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <__sinit+0x6c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	bf08      	it	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	4620      	mov	r0, r4
 80079ae:	bf08      	it	eq
 80079b0:	61a3      	streq	r3, [r4, #24]
 80079b2:	f000 f81f 	bl	80079f4 <__sfp>
 80079b6:	6060      	str	r0, [r4, #4]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f81b 	bl	80079f4 <__sfp>
 80079be:	60a0      	str	r0, [r4, #8]
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 f817 	bl	80079f4 <__sfp>
 80079c6:	2200      	movs	r2, #0
 80079c8:	2104      	movs	r1, #4
 80079ca:	60e0      	str	r0, [r4, #12]
 80079cc:	6860      	ldr	r0, [r4, #4]
 80079ce:	f7ff ff81 	bl	80078d4 <std>
 80079d2:	2201      	movs	r2, #1
 80079d4:	2109      	movs	r1, #9
 80079d6:	68a0      	ldr	r0, [r4, #8]
 80079d8:	f7ff ff7c 	bl	80078d4 <std>
 80079dc:	2202      	movs	r2, #2
 80079de:	2112      	movs	r1, #18
 80079e0:	68e0      	ldr	r0, [r4, #12]
 80079e2:	f7ff ff77 	bl	80078d4 <std>
 80079e6:	2301      	movs	r3, #1
 80079e8:	61a3      	str	r3, [r4, #24]
 80079ea:	e7d1      	b.n	8007990 <__sinit+0xc>
 80079ec:	080083b4 	.word	0x080083b4
 80079f0:	0800791d 	.word	0x0800791d

080079f4 <__sfp>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	4607      	mov	r7, r0
 80079f8:	f7ff ffac 	bl	8007954 <__sfp_lock_acquire>
 80079fc:	4b1e      	ldr	r3, [pc, #120]	; (8007a78 <__sfp+0x84>)
 80079fe:	681e      	ldr	r6, [r3, #0]
 8007a00:	69b3      	ldr	r3, [r6, #24]
 8007a02:	b913      	cbnz	r3, 8007a0a <__sfp+0x16>
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7ff ffbd 	bl	8007984 <__sinit>
 8007a0a:	3648      	adds	r6, #72	; 0x48
 8007a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	d503      	bpl.n	8007a1c <__sfp+0x28>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	b30b      	cbz	r3, 8007a5c <__sfp+0x68>
 8007a18:	6836      	ldr	r6, [r6, #0]
 8007a1a:	e7f7      	b.n	8007a0c <__sfp+0x18>
 8007a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a20:	b9d5      	cbnz	r5, 8007a58 <__sfp+0x64>
 8007a22:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <__sfp+0x88>)
 8007a24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a28:	60e3      	str	r3, [r4, #12]
 8007a2a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a2c:	f000 f859 	bl	8007ae2 <__retarget_lock_init_recursive>
 8007a30:	f7ff ff96 	bl	8007960 <__sfp_lock_release>
 8007a34:	2208      	movs	r2, #8
 8007a36:	4629      	mov	r1, r5
 8007a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a40:	6025      	str	r5, [r4, #0]
 8007a42:	61a5      	str	r5, [r4, #24]
 8007a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a48:	f7fc fe62 	bl	8004710 <memset>
 8007a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a54:	4620      	mov	r0, r4
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	3468      	adds	r4, #104	; 0x68
 8007a5a:	e7d9      	b.n	8007a10 <__sfp+0x1c>
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f7ff ff62 	bl	8007928 <__sfmoreglue>
 8007a64:	4604      	mov	r4, r0
 8007a66:	6030      	str	r0, [r6, #0]
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1d5      	bne.n	8007a18 <__sfp+0x24>
 8007a6c:	f7ff ff78 	bl	8007960 <__sfp_lock_release>
 8007a70:	230c      	movs	r3, #12
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	e7ee      	b.n	8007a54 <__sfp+0x60>
 8007a76:	bf00      	nop
 8007a78:	080083b4 	.word	0x080083b4
 8007a7c:	ffff0001 	.word	0xffff0001

08007a80 <fiprintf>:
 8007a80:	b40e      	push	{r1, r2, r3}
 8007a82:	b503      	push	{r0, r1, lr}
 8007a84:	4601      	mov	r1, r0
 8007a86:	ab03      	add	r3, sp, #12
 8007a88:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <fiprintf+0x20>)
 8007a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	f000 f881 	bl	8007b98 <_vfiprintf_r>
 8007a96:	b002      	add	sp, #8
 8007a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a9c:	b003      	add	sp, #12
 8007a9e:	4770      	bx	lr
 8007aa0:	20000020 	.word	0x20000020

08007aa4 <_fwalk_reent>:
 8007aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	4688      	mov	r8, r1
 8007aac:	2700      	movs	r7, #0
 8007aae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ab6:	f1b9 0901 	subs.w	r9, r9, #1
 8007aba:	d505      	bpl.n	8007ac8 <_fwalk_reent+0x24>
 8007abc:	6824      	ldr	r4, [r4, #0]
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	d1f7      	bne.n	8007ab2 <_fwalk_reent+0xe>
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac8:	89ab      	ldrh	r3, [r5, #12]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d907      	bls.n	8007ade <_fwalk_reent+0x3a>
 8007ace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	d003      	beq.n	8007ade <_fwalk_reent+0x3a>
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4630      	mov	r0, r6
 8007ada:	47c0      	blx	r8
 8007adc:	4307      	orrs	r7, r0
 8007ade:	3568      	adds	r5, #104	; 0x68
 8007ae0:	e7e9      	b.n	8007ab6 <_fwalk_reent+0x12>

08007ae2 <__retarget_lock_init_recursive>:
 8007ae2:	4770      	bx	lr

08007ae4 <__retarget_lock_acquire_recursive>:
 8007ae4:	4770      	bx	lr

08007ae6 <__retarget_lock_release_recursive>:
 8007ae6:	4770      	bx	lr

08007ae8 <memchr>:
 8007ae8:	4603      	mov	r3, r0
 8007aea:	b510      	push	{r4, lr}
 8007aec:	b2c9      	uxtb	r1, r1
 8007aee:	4402      	add	r2, r0
 8007af0:	4293      	cmp	r3, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	d101      	bne.n	8007afa <memchr+0x12>
 8007af6:	2000      	movs	r0, #0
 8007af8:	e003      	b.n	8007b02 <memchr+0x1a>
 8007afa:	7804      	ldrb	r4, [r0, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	428c      	cmp	r4, r1
 8007b00:	d1f6      	bne.n	8007af0 <memchr+0x8>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <memmove>:
 8007b04:	4288      	cmp	r0, r1
 8007b06:	b510      	push	{r4, lr}
 8007b08:	eb01 0402 	add.w	r4, r1, r2
 8007b0c:	d902      	bls.n	8007b14 <memmove+0x10>
 8007b0e:	4284      	cmp	r4, r0
 8007b10:	4623      	mov	r3, r4
 8007b12:	d807      	bhi.n	8007b24 <memmove+0x20>
 8007b14:	1e43      	subs	r3, r0, #1
 8007b16:	42a1      	cmp	r1, r4
 8007b18:	d008      	beq.n	8007b2c <memmove+0x28>
 8007b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b22:	e7f8      	b.n	8007b16 <memmove+0x12>
 8007b24:	4601      	mov	r1, r0
 8007b26:	4402      	add	r2, r0
 8007b28:	428a      	cmp	r2, r1
 8007b2a:	d100      	bne.n	8007b2e <memmove+0x2a>
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b36:	e7f7      	b.n	8007b28 <memmove+0x24>

08007b38 <_malloc_usable_size_r>:
 8007b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b3c:	1f18      	subs	r0, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbc      	itt	lt
 8007b42:	580b      	ldrlt	r3, [r1, r0]
 8007b44:	18c0      	addlt	r0, r0, r3
 8007b46:	4770      	bx	lr

08007b48 <__sfputc_r>:
 8007b48:	6893      	ldr	r3, [r2, #8]
 8007b4a:	b410      	push	{r4}
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	6093      	str	r3, [r2, #8]
 8007b52:	da07      	bge.n	8007b64 <__sfputc_r+0x1c>
 8007b54:	6994      	ldr	r4, [r2, #24]
 8007b56:	42a3      	cmp	r3, r4
 8007b58:	db01      	blt.n	8007b5e <__sfputc_r+0x16>
 8007b5a:	290a      	cmp	r1, #10
 8007b5c:	d102      	bne.n	8007b64 <__sfputc_r+0x1c>
 8007b5e:	bc10      	pop	{r4}
 8007b60:	f000 b94a 	b.w	8007df8 <__swbuf_r>
 8007b64:	6813      	ldr	r3, [r2, #0]
 8007b66:	1c58      	adds	r0, r3, #1
 8007b68:	6010      	str	r0, [r2, #0]
 8007b6a:	7019      	strb	r1, [r3, #0]
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	bc10      	pop	{r4}
 8007b70:	4770      	bx	lr

08007b72 <__sfputs_r>:
 8007b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b74:	4606      	mov	r6, r0
 8007b76:	460f      	mov	r7, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	18d5      	adds	r5, r2, r3
 8007b7c:	42ac      	cmp	r4, r5
 8007b7e:	d101      	bne.n	8007b84 <__sfputs_r+0x12>
 8007b80:	2000      	movs	r0, #0
 8007b82:	e007      	b.n	8007b94 <__sfputs_r+0x22>
 8007b84:	463a      	mov	r2, r7
 8007b86:	4630      	mov	r0, r6
 8007b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8c:	f7ff ffdc 	bl	8007b48 <__sfputc_r>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d1f3      	bne.n	8007b7c <__sfputs_r+0xa>
 8007b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b98 <_vfiprintf_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	4698      	mov	r8, r3
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	b09d      	sub	sp, #116	; 0x74
 8007ba6:	b118      	cbz	r0, 8007bb0 <_vfiprintf_r+0x18>
 8007ba8:	6983      	ldr	r3, [r0, #24]
 8007baa:	b90b      	cbnz	r3, 8007bb0 <_vfiprintf_r+0x18>
 8007bac:	f7ff feea 	bl	8007984 <__sinit>
 8007bb0:	4b89      	ldr	r3, [pc, #548]	; (8007dd8 <_vfiprintf_r+0x240>)
 8007bb2:	429d      	cmp	r5, r3
 8007bb4:	d11b      	bne.n	8007bee <_vfiprintf_r+0x56>
 8007bb6:	6875      	ldr	r5, [r6, #4]
 8007bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bba:	07d9      	lsls	r1, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_vfiprintf_r+0x32>
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	059a      	lsls	r2, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_vfiprintf_r+0x32>
 8007bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc6:	f7ff ff8d 	bl	8007ae4 <__retarget_lock_acquire_recursive>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	071b      	lsls	r3, r3, #28
 8007bce:	d501      	bpl.n	8007bd4 <_vfiprintf_r+0x3c>
 8007bd0:	692b      	ldr	r3, [r5, #16]
 8007bd2:	b9eb      	cbnz	r3, 8007c10 <_vfiprintf_r+0x78>
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 f960 	bl	8007e9c <__swsetup_r>
 8007bdc:	b1c0      	cbz	r0, 8007c10 <_vfiprintf_r+0x78>
 8007bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be0:	07dc      	lsls	r4, r3, #31
 8007be2:	d50e      	bpl.n	8007c02 <_vfiprintf_r+0x6a>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	b01d      	add	sp, #116	; 0x74
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	4b7b      	ldr	r3, [pc, #492]	; (8007ddc <_vfiprintf_r+0x244>)
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	d101      	bne.n	8007bf8 <_vfiprintf_r+0x60>
 8007bf4:	68b5      	ldr	r5, [r6, #8]
 8007bf6:	e7df      	b.n	8007bb8 <_vfiprintf_r+0x20>
 8007bf8:	4b79      	ldr	r3, [pc, #484]	; (8007de0 <_vfiprintf_r+0x248>)
 8007bfa:	429d      	cmp	r5, r3
 8007bfc:	bf08      	it	eq
 8007bfe:	68f5      	ldreq	r5, [r6, #12]
 8007c00:	e7da      	b.n	8007bb8 <_vfiprintf_r+0x20>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	0598      	lsls	r0, r3, #22
 8007c06:	d4ed      	bmi.n	8007be4 <_vfiprintf_r+0x4c>
 8007c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c0a:	f7ff ff6c 	bl	8007ae6 <__retarget_lock_release_recursive>
 8007c0e:	e7e9      	b.n	8007be4 <_vfiprintf_r+0x4c>
 8007c10:	2300      	movs	r3, #0
 8007c12:	9309      	str	r3, [sp, #36]	; 0x24
 8007c14:	2320      	movs	r3, #32
 8007c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c1a:	2330      	movs	r3, #48	; 0x30
 8007c1c:	f04f 0901 	mov.w	r9, #1
 8007c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007de4 <_vfiprintf_r+0x24c>
 8007c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	469a      	mov	sl, r3
 8007c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c34:	b10a      	cbz	r2, 8007c3a <_vfiprintf_r+0xa2>
 8007c36:	2a25      	cmp	r2, #37	; 0x25
 8007c38:	d1f9      	bne.n	8007c2e <_vfiprintf_r+0x96>
 8007c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3e:	d00b      	beq.n	8007c58 <_vfiprintf_r+0xc0>
 8007c40:	465b      	mov	r3, fp
 8007c42:	4622      	mov	r2, r4
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ff93 	bl	8007b72 <__sfputs_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f000 80aa 	beq.w	8007da6 <_vfiprintf_r+0x20e>
 8007c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c54:	445a      	add	r2, fp
 8007c56:	9209      	str	r2, [sp, #36]	; 0x24
 8007c58:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80a2 	beq.w	8007da6 <_vfiprintf_r+0x20e>
 8007c62:	2300      	movs	r3, #0
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6c:	f10a 0a01 	add.w	sl, sl, #1
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c78:	931a      	str	r3, [sp, #104]	; 0x68
 8007c7a:	4654      	mov	r4, sl
 8007c7c:	2205      	movs	r2, #5
 8007c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c82:	4858      	ldr	r0, [pc, #352]	; (8007de4 <_vfiprintf_r+0x24c>)
 8007c84:	f7ff ff30 	bl	8007ae8 <memchr>
 8007c88:	9a04      	ldr	r2, [sp, #16]
 8007c8a:	b9d8      	cbnz	r0, 8007cc4 <_vfiprintf_r+0x12c>
 8007c8c:	06d1      	lsls	r1, r2, #27
 8007c8e:	bf44      	itt	mi
 8007c90:	2320      	movmi	r3, #32
 8007c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c96:	0713      	lsls	r3, r2, #28
 8007c98:	bf44      	itt	mi
 8007c9a:	232b      	movmi	r3, #43	; 0x2b
 8007c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca6:	d015      	beq.n	8007cd4 <_vfiprintf_r+0x13c>
 8007ca8:	4654      	mov	r4, sl
 8007caa:	2000      	movs	r0, #0
 8007cac:	f04f 0c0a 	mov.w	ip, #10
 8007cb0:	9a07      	ldr	r2, [sp, #28]
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb8:	3b30      	subs	r3, #48	; 0x30
 8007cba:	2b09      	cmp	r3, #9
 8007cbc:	d94e      	bls.n	8007d5c <_vfiprintf_r+0x1c4>
 8007cbe:	b1b0      	cbz	r0, 8007cee <_vfiprintf_r+0x156>
 8007cc0:	9207      	str	r2, [sp, #28]
 8007cc2:	e014      	b.n	8007cee <_vfiprintf_r+0x156>
 8007cc4:	eba0 0308 	sub.w	r3, r0, r8
 8007cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	46a2      	mov	sl, r4
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	e7d2      	b.n	8007c7a <_vfiprintf_r+0xe2>
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	1d19      	adds	r1, r3, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	9103      	str	r1, [sp, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bfbb      	ittet	lt
 8007ce0:	425b      	neglt	r3, r3
 8007ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce6:	9307      	strge	r3, [sp, #28]
 8007ce8:	9307      	strlt	r3, [sp, #28]
 8007cea:	bfb8      	it	lt
 8007cec:	9204      	strlt	r2, [sp, #16]
 8007cee:	7823      	ldrb	r3, [r4, #0]
 8007cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf2:	d10c      	bne.n	8007d0e <_vfiprintf_r+0x176>
 8007cf4:	7863      	ldrb	r3, [r4, #1]
 8007cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf8:	d135      	bne.n	8007d66 <_vfiprintf_r+0x1ce>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3402      	adds	r4, #2
 8007cfe:	1d1a      	adds	r2, r3, #4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	9203      	str	r2, [sp, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfb8      	it	lt
 8007d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007de8 <_vfiprintf_r+0x250>
 8007d12:	2203      	movs	r2, #3
 8007d14:	4650      	mov	r0, sl
 8007d16:	7821      	ldrb	r1, [r4, #0]
 8007d18:	f7ff fee6 	bl	8007ae8 <memchr>
 8007d1c:	b140      	cbz	r0, 8007d30 <_vfiprintf_r+0x198>
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	eba0 000a 	sub.w	r0, r0, sl
 8007d24:	fa03 f000 	lsl.w	r0, r3, r0
 8007d28:	9b04      	ldr	r3, [sp, #16]
 8007d2a:	3401      	adds	r4, #1
 8007d2c:	4303      	orrs	r3, r0
 8007d2e:	9304      	str	r3, [sp, #16]
 8007d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d34:	2206      	movs	r2, #6
 8007d36:	482d      	ldr	r0, [pc, #180]	; (8007dec <_vfiprintf_r+0x254>)
 8007d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d3c:	f7ff fed4 	bl	8007ae8 <memchr>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d03f      	beq.n	8007dc4 <_vfiprintf_r+0x22c>
 8007d44:	4b2a      	ldr	r3, [pc, #168]	; (8007df0 <_vfiprintf_r+0x258>)
 8007d46:	bb1b      	cbnz	r3, 8007d90 <_vfiprintf_r+0x1f8>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	3307      	adds	r3, #7
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	3308      	adds	r3, #8
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d56:	443b      	add	r3, r7
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	e767      	b.n	8007c2c <_vfiprintf_r+0x94>
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	2001      	movs	r0, #1
 8007d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d64:	e7a5      	b.n	8007cb2 <_vfiprintf_r+0x11a>
 8007d66:	2300      	movs	r3, #0
 8007d68:	f04f 0c0a 	mov.w	ip, #10
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	3401      	adds	r4, #1
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d78:	3a30      	subs	r2, #48	; 0x30
 8007d7a:	2a09      	cmp	r2, #9
 8007d7c:	d903      	bls.n	8007d86 <_vfiprintf_r+0x1ee>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0c5      	beq.n	8007d0e <_vfiprintf_r+0x176>
 8007d82:	9105      	str	r1, [sp, #20]
 8007d84:	e7c3      	b.n	8007d0e <_vfiprintf_r+0x176>
 8007d86:	4604      	mov	r4, r0
 8007d88:	2301      	movs	r3, #1
 8007d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8e:	e7f0      	b.n	8007d72 <_vfiprintf_r+0x1da>
 8007d90:	ab03      	add	r3, sp, #12
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	462a      	mov	r2, r5
 8007d96:	4630      	mov	r0, r6
 8007d98:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <_vfiprintf_r+0x25c>)
 8007d9a:	a904      	add	r1, sp, #16
 8007d9c:	f3af 8000 	nop.w
 8007da0:	4607      	mov	r7, r0
 8007da2:	1c78      	adds	r0, r7, #1
 8007da4:	d1d6      	bne.n	8007d54 <_vfiprintf_r+0x1bc>
 8007da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007da8:	07d9      	lsls	r1, r3, #31
 8007daa:	d405      	bmi.n	8007db8 <_vfiprintf_r+0x220>
 8007dac:	89ab      	ldrh	r3, [r5, #12]
 8007dae:	059a      	lsls	r2, r3, #22
 8007db0:	d402      	bmi.n	8007db8 <_vfiprintf_r+0x220>
 8007db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db4:	f7ff fe97 	bl	8007ae6 <__retarget_lock_release_recursive>
 8007db8:	89ab      	ldrh	r3, [r5, #12]
 8007dba:	065b      	lsls	r3, r3, #25
 8007dbc:	f53f af12 	bmi.w	8007be4 <_vfiprintf_r+0x4c>
 8007dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dc2:	e711      	b.n	8007be8 <_vfiprintf_r+0x50>
 8007dc4:	ab03      	add	r3, sp, #12
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	462a      	mov	r2, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <_vfiprintf_r+0x25c>)
 8007dce:	a904      	add	r1, sp, #16
 8007dd0:	f7ff f8a4 	bl	8006f1c <_printf_i>
 8007dd4:	e7e4      	b.n	8007da0 <_vfiprintf_r+0x208>
 8007dd6:	bf00      	nop
 8007dd8:	080086c0 	.word	0x080086c0
 8007ddc:	080086e0 	.word	0x080086e0
 8007de0:	080086a0 	.word	0x080086a0
 8007de4:	08008614 	.word	0x08008614
 8007de8:	0800861a 	.word	0x0800861a
 8007dec:	0800861e 	.word	0x0800861e
 8007df0:	00000000 	.word	0x00000000
 8007df4:	08007b73 	.word	0x08007b73

08007df8 <__swbuf_r>:
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	460e      	mov	r6, r1
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	4605      	mov	r5, r0
 8007e00:	b118      	cbz	r0, 8007e0a <__swbuf_r+0x12>
 8007e02:	6983      	ldr	r3, [r0, #24]
 8007e04:	b90b      	cbnz	r3, 8007e0a <__swbuf_r+0x12>
 8007e06:	f7ff fdbd 	bl	8007984 <__sinit>
 8007e0a:	4b21      	ldr	r3, [pc, #132]	; (8007e90 <__swbuf_r+0x98>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	d12b      	bne.n	8007e68 <__swbuf_r+0x70>
 8007e10:	686c      	ldr	r4, [r5, #4]
 8007e12:	69a3      	ldr	r3, [r4, #24]
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	89a3      	ldrh	r3, [r4, #12]
 8007e18:	071a      	lsls	r2, r3, #28
 8007e1a:	d52f      	bpl.n	8007e7c <__swbuf_r+0x84>
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	b36b      	cbz	r3, 8007e7c <__swbuf_r+0x84>
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	b2f6      	uxtb	r6, r6
 8007e26:	1ac0      	subs	r0, r0, r3
 8007e28:	6963      	ldr	r3, [r4, #20]
 8007e2a:	4637      	mov	r7, r6
 8007e2c:	4283      	cmp	r3, r0
 8007e2e:	dc04      	bgt.n	8007e3a <__swbuf_r+0x42>
 8007e30:	4621      	mov	r1, r4
 8007e32:	4628      	mov	r0, r5
 8007e34:	f7ff fd12 	bl	800785c <_fflush_r>
 8007e38:	bb30      	cbnz	r0, 8007e88 <__swbuf_r+0x90>
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	60a3      	str	r3, [r4, #8]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	701e      	strb	r6, [r3, #0]
 8007e4a:	6963      	ldr	r3, [r4, #20]
 8007e4c:	4283      	cmp	r3, r0
 8007e4e:	d004      	beq.n	8007e5a <__swbuf_r+0x62>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d506      	bpl.n	8007e64 <__swbuf_r+0x6c>
 8007e56:	2e0a      	cmp	r6, #10
 8007e58:	d104      	bne.n	8007e64 <__swbuf_r+0x6c>
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7ff fcfd 	bl	800785c <_fflush_r>
 8007e62:	b988      	cbnz	r0, 8007e88 <__swbuf_r+0x90>
 8007e64:	4638      	mov	r0, r7
 8007e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <__swbuf_r+0x9c>)
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	d101      	bne.n	8007e72 <__swbuf_r+0x7a>
 8007e6e:	68ac      	ldr	r4, [r5, #8]
 8007e70:	e7cf      	b.n	8007e12 <__swbuf_r+0x1a>
 8007e72:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <__swbuf_r+0xa0>)
 8007e74:	429c      	cmp	r4, r3
 8007e76:	bf08      	it	eq
 8007e78:	68ec      	ldreq	r4, [r5, #12]
 8007e7a:	e7ca      	b.n	8007e12 <__swbuf_r+0x1a>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f80c 	bl	8007e9c <__swsetup_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d0cb      	beq.n	8007e20 <__swbuf_r+0x28>
 8007e88:	f04f 37ff 	mov.w	r7, #4294967295
 8007e8c:	e7ea      	b.n	8007e64 <__swbuf_r+0x6c>
 8007e8e:	bf00      	nop
 8007e90:	080086c0 	.word	0x080086c0
 8007e94:	080086e0 	.word	0x080086e0
 8007e98:	080086a0 	.word	0x080086a0

08007e9c <__swsetup_r>:
 8007e9c:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <__swsetup_r+0xcc>)
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	681d      	ldr	r5, [r3, #0]
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	b125      	cbz	r5, 8007eb2 <__swsetup_r+0x16>
 8007ea8:	69ab      	ldr	r3, [r5, #24]
 8007eaa:	b913      	cbnz	r3, 8007eb2 <__swsetup_r+0x16>
 8007eac:	4628      	mov	r0, r5
 8007eae:	f7ff fd69 	bl	8007984 <__sinit>
 8007eb2:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <__swsetup_r+0xd0>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	d10f      	bne.n	8007ed8 <__swsetup_r+0x3c>
 8007eb8:	686c      	ldr	r4, [r5, #4]
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ec0:	0719      	lsls	r1, r3, #28
 8007ec2:	d42c      	bmi.n	8007f1e <__swsetup_r+0x82>
 8007ec4:	06dd      	lsls	r5, r3, #27
 8007ec6:	d411      	bmi.n	8007eec <__swsetup_r+0x50>
 8007ec8:	2309      	movs	r3, #9
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	e03e      	b.n	8007f56 <__swsetup_r+0xba>
 8007ed8:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <__swsetup_r+0xd4>)
 8007eda:	429c      	cmp	r4, r3
 8007edc:	d101      	bne.n	8007ee2 <__swsetup_r+0x46>
 8007ede:	68ac      	ldr	r4, [r5, #8]
 8007ee0:	e7eb      	b.n	8007eba <__swsetup_r+0x1e>
 8007ee2:	4b24      	ldr	r3, [pc, #144]	; (8007f74 <__swsetup_r+0xd8>)
 8007ee4:	429c      	cmp	r4, r3
 8007ee6:	bf08      	it	eq
 8007ee8:	68ec      	ldreq	r4, [r5, #12]
 8007eea:	e7e6      	b.n	8007eba <__swsetup_r+0x1e>
 8007eec:	0758      	lsls	r0, r3, #29
 8007eee:	d512      	bpl.n	8007f16 <__swsetup_r+0x7a>
 8007ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef2:	b141      	cbz	r1, 8007f06 <__swsetup_r+0x6a>
 8007ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	d002      	beq.n	8007f02 <__swsetup_r+0x66>
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7fc fc0f 	bl	8004720 <_free_r>
 8007f02:	2300      	movs	r3, #0
 8007f04:	6363      	str	r3, [r4, #52]	; 0x34
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6063      	str	r3, [r4, #4]
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	f043 0308 	orr.w	r3, r3, #8
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	b94b      	cbnz	r3, 8007f36 <__swsetup_r+0x9a>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f2c:	d003      	beq.n	8007f36 <__swsetup_r+0x9a>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 f84d 	bl	8007fd0 <__smakebuf_r>
 8007f36:	89a0      	ldrh	r0, [r4, #12]
 8007f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f3c:	f010 0301 	ands.w	r3, r0, #1
 8007f40:	d00a      	beq.n	8007f58 <__swsetup_r+0xbc>
 8007f42:	2300      	movs	r3, #0
 8007f44:	60a3      	str	r3, [r4, #8]
 8007f46:	6963      	ldr	r3, [r4, #20]
 8007f48:	425b      	negs	r3, r3
 8007f4a:	61a3      	str	r3, [r4, #24]
 8007f4c:	6923      	ldr	r3, [r4, #16]
 8007f4e:	b943      	cbnz	r3, 8007f62 <__swsetup_r+0xc6>
 8007f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f54:	d1ba      	bne.n	8007ecc <__swsetup_r+0x30>
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	0781      	lsls	r1, r0, #30
 8007f5a:	bf58      	it	pl
 8007f5c:	6963      	ldrpl	r3, [r4, #20]
 8007f5e:	60a3      	str	r3, [r4, #8]
 8007f60:	e7f4      	b.n	8007f4c <__swsetup_r+0xb0>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e7f7      	b.n	8007f56 <__swsetup_r+0xba>
 8007f66:	bf00      	nop
 8007f68:	20000020 	.word	0x20000020
 8007f6c:	080086c0 	.word	0x080086c0
 8007f70:	080086e0 	.word	0x080086e0
 8007f74:	080086a0 	.word	0x080086a0

08007f78 <abort>:
 8007f78:	2006      	movs	r0, #6
 8007f7a:	b508      	push	{r3, lr}
 8007f7c:	f000 f890 	bl	80080a0 <raise>
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7fc faa9 	bl	80044d8 <_exit>

08007f86 <__swhatbuf_r>:
 8007f86:	b570      	push	{r4, r5, r6, lr}
 8007f88:	460e      	mov	r6, r1
 8007f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8e:	4614      	mov	r4, r2
 8007f90:	2900      	cmp	r1, #0
 8007f92:	461d      	mov	r5, r3
 8007f94:	b096      	sub	sp, #88	; 0x58
 8007f96:	da08      	bge.n	8007faa <__swhatbuf_r+0x24>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f9e:	602a      	str	r2, [r5, #0]
 8007fa0:	061a      	lsls	r2, r3, #24
 8007fa2:	d410      	bmi.n	8007fc6 <__swhatbuf_r+0x40>
 8007fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa8:	e00e      	b.n	8007fc8 <__swhatbuf_r+0x42>
 8007faa:	466a      	mov	r2, sp
 8007fac:	f000 f894 	bl	80080d8 <_fstat_r>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	dbf1      	blt.n	8007f98 <__swhatbuf_r+0x12>
 8007fb4:	9a01      	ldr	r2, [sp, #4]
 8007fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fbe:	425a      	negs	r2, r3
 8007fc0:	415a      	adcs	r2, r3
 8007fc2:	602a      	str	r2, [r5, #0]
 8007fc4:	e7ee      	b.n	8007fa4 <__swhatbuf_r+0x1e>
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	2000      	movs	r0, #0
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	b016      	add	sp, #88	; 0x58
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__smakebuf_r>:
 8007fd0:	898b      	ldrh	r3, [r1, #12]
 8007fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fd4:	079d      	lsls	r5, r3, #30
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	d507      	bpl.n	8007fec <__smakebuf_r+0x1c>
 8007fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	6163      	str	r3, [r4, #20]
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	466a      	mov	r2, sp
 8007fee:	ab01      	add	r3, sp, #4
 8007ff0:	f7ff ffc9 	bl	8007f86 <__swhatbuf_r>
 8007ff4:	9900      	ldr	r1, [sp, #0]
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7fc fbf9 	bl	80047f0 <_malloc_r>
 8007ffe:	b948      	cbnz	r0, 8008014 <__smakebuf_r+0x44>
 8008000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008004:	059a      	lsls	r2, r3, #22
 8008006:	d4ef      	bmi.n	8007fe8 <__smakebuf_r+0x18>
 8008008:	f023 0303 	bic.w	r3, r3, #3
 800800c:	f043 0302 	orr.w	r3, r3, #2
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	e7e3      	b.n	8007fdc <__smakebuf_r+0xc>
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <__smakebuf_r+0x7c>)
 8008016:	62b3      	str	r3, [r6, #40]	; 0x28
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	6020      	str	r0, [r4, #0]
 800801c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	9b00      	ldr	r3, [sp, #0]
 8008024:	6120      	str	r0, [r4, #16]
 8008026:	6163      	str	r3, [r4, #20]
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	b15b      	cbz	r3, 8008044 <__smakebuf_r+0x74>
 800802c:	4630      	mov	r0, r6
 800802e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008032:	f000 f863 	bl	80080fc <_isatty_r>
 8008036:	b128      	cbz	r0, 8008044 <__smakebuf_r+0x74>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f023 0303 	bic.w	r3, r3, #3
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	89a0      	ldrh	r0, [r4, #12]
 8008046:	4305      	orrs	r5, r0
 8008048:	81a5      	strh	r5, [r4, #12]
 800804a:	e7cd      	b.n	8007fe8 <__smakebuf_r+0x18>
 800804c:	0800791d 	.word	0x0800791d

08008050 <_raise_r>:
 8008050:	291f      	cmp	r1, #31
 8008052:	b538      	push	{r3, r4, r5, lr}
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	d904      	bls.n	8008064 <_raise_r+0x14>
 800805a:	2316      	movs	r3, #22
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008066:	b112      	cbz	r2, 800806e <_raise_r+0x1e>
 8008068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800806c:	b94b      	cbnz	r3, 8008082 <_raise_r+0x32>
 800806e:	4620      	mov	r0, r4
 8008070:	f000 f830 	bl	80080d4 <_getpid_r>
 8008074:	462a      	mov	r2, r5
 8008076:	4601      	mov	r1, r0
 8008078:	4620      	mov	r0, r4
 800807a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800807e:	f000 b817 	b.w	80080b0 <_kill_r>
 8008082:	2b01      	cmp	r3, #1
 8008084:	d00a      	beq.n	800809c <_raise_r+0x4c>
 8008086:	1c59      	adds	r1, r3, #1
 8008088:	d103      	bne.n	8008092 <_raise_r+0x42>
 800808a:	2316      	movs	r3, #22
 800808c:	6003      	str	r3, [r0, #0]
 800808e:	2001      	movs	r0, #1
 8008090:	e7e7      	b.n	8008062 <_raise_r+0x12>
 8008092:	2400      	movs	r4, #0
 8008094:	4628      	mov	r0, r5
 8008096:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800809a:	4798      	blx	r3
 800809c:	2000      	movs	r0, #0
 800809e:	e7e0      	b.n	8008062 <_raise_r+0x12>

080080a0 <raise>:
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <raise+0xc>)
 80080a2:	4601      	mov	r1, r0
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	f7ff bfd3 	b.w	8008050 <_raise_r>
 80080aa:	bf00      	nop
 80080ac:	20000020 	.word	0x20000020

080080b0 <_kill_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	4d06      	ldr	r5, [pc, #24]	; (80080d0 <_kill_r+0x20>)
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	f7fc f9fb 	bl	80044b8 <_kill>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d102      	bne.n	80080cc <_kill_r+0x1c>
 80080c6:	682b      	ldr	r3, [r5, #0]
 80080c8:	b103      	cbz	r3, 80080cc <_kill_r+0x1c>
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	bf00      	nop
 80080d0:	200002b8 	.word	0x200002b8

080080d4 <_getpid_r>:
 80080d4:	f7fc b9e9 	b.w	80044aa <_getpid>

080080d8 <_fstat_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	2300      	movs	r3, #0
 80080dc:	4d06      	ldr	r5, [pc, #24]	; (80080f8 <_fstat_r+0x20>)
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f7fc fa45 	bl	8004574 <_fstat>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d102      	bne.n	80080f4 <_fstat_r+0x1c>
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	b103      	cbz	r3, 80080f4 <_fstat_r+0x1c>
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	200002b8 	.word	0x200002b8

080080fc <_isatty_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	2300      	movs	r3, #0
 8008100:	4d05      	ldr	r5, [pc, #20]	; (8008118 <_isatty_r+0x1c>)
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7fc fa43 	bl	8004592 <_isatty>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_isatty_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_isatty_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	200002b8 	.word	0x200002b8

0800811c <_init>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	bf00      	nop
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr

08008128 <_fini>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr
